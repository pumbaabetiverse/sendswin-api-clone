/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/api/v3/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Connectivity
         * @description Test connectivity to the Rest API.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Server Time
         * @description Test connectivity to the Rest API and get the current server time.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Binance server UTC timestamp */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1499827319559
                             */
                            serverTime: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/exchangeInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Exchange Information
         * @description Current exchange trading rules and symbol information
         *
         *     - If any symbol provided in either symbol or symbols do not exist, the endpoint will throw an error.
         *     - All parameters are optional.
         *     - permissions can support single or multiple values (e.g. SPOT, ["MARGIN","LEVERAGED"])
         *     - If permissions parameter not provided, the default values will be ["SPOT","MARGIN","LEVERAGED"].
         *       - To display all permissions you need to specify them explicitly. (e.g. SPOT, MARGIN,...)
         *
         *     Examples of Symbol Permissions Interpretation from the Response:
         *     - [["A","B"]] means you may place an order if your account has either permission "A" or permission "B".
         *     - [["A"],["B"]] means you can place an order if your account has permission "A" and permission "B".
         *     - [["A"],["B","C"]] means you can place an order if your account has permission "A" and permission "B" or permission "C". (Inclusive or is applied here, not exclusive or, so your account may have both permission "B" and permission "C".)
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query?: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol?: components["parameters"]["optionalSymbol"];
                    symbols?: components["parameters"]["arraySymbols"];
                    permissions?: components["parameters"]["permissions"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current exchange trading rules and symbol information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example UTC */
                            timezone: string;
                            /**
                             * Format: int64
                             * @example 1592882214236
                             */
                            serverTime: number;
                            rateLimits: {
                                /** @example REQUEST_WEIGHT */
                                rateLimitType: string;
                                /** @example MINUTE */
                                interval: string;
                                /**
                                 * Format: int32
                                 * @example 1
                                 */
                                intervalNum: number;
                                /**
                                 * Format: int32
                                 * @example 1200
                                 */
                                limit: number;
                            }[];
                            exchangeFilters: Record<string, never>[];
                            symbols: {
                                /** @example ETHBTC */
                                symbol: string;
                                /** @example TRADING */
                                status: string;
                                /** @example ETH */
                                baseAsset: string;
                                /**
                                 * Format: int32
                                 * @example 8
                                 */
                                baseAssetPrecision: number;
                                /** @example BTC */
                                quoteAsset: string;
                                /**
                                 * Format: int32
                                 * @example 8
                                 */
                                quoteAssetPrecision: number;
                                /**
                                 * Format: int32
                                 * @example 8
                                 */
                                baseCommissionPrecision: number;
                                /**
                                 * Format: int32
                                 * @example 8
                                 */
                                quoteCommissionPrecision: number;
                                orderTypes: string[];
                                /** @example true */
                                icebergAllowed: boolean;
                                /** @example true */
                                ocoAllowed: boolean;
                                /** @example false */
                                otoAllowed: boolean;
                                /** @example true */
                                quoteOrderQtyMarketAllowed: boolean;
                                /** @example false */
                                allowTrailingStop: boolean;
                                /** @example true */
                                cancelReplaceAllowed: boolean;
                                /** @example true */
                                isSpotTradingAllowed: boolean;
                                /** @example true */
                                isMarginTradingAllowed: boolean;
                                filters: {
                                    /** @example PRICE_FILTER */
                                    filterType: string;
                                    /** @example 0.00000100 */
                                    minPrice: string;
                                    /** @example 100000.00000000 */
                                    maxPrice: string;
                                    /** @example 0.00000100 */
                                    tickSize: string;
                                }[];
                                permissions: string[];
                                permissionSets: string[][];
                                /** @example NONE */
                                defaultSelfTradePreventionMode: string;
                                allowedSelfTradePreventionModes: string[];
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/depth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Order Book
         * @description | Limit               | Weight(IP)  |
         *     |---------------------|-------------|
         *     | 1-100               | 5           |
         *     | 101-500             | 25          |
         *     | 501-1000            | 50          |
         *     | 1001-5000           | 250         |
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description If limit > 5000, then the response will truncate to 5000 */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order book */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: int64 */
                            lastUpdateId: number;
                            bids: string[][];
                            asks: string[][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/trades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Recent Trades List
         * @description Get recent trades.
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Trade list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["trade"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/historicalTrades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Old Trade Lookup
         * @description Get older market trades.
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description Trade id to fetch from. Default gets most recent trades. */
                    fromId?: components["parameters"]["fromId"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Trade list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["trade"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/aggTrades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Compressed/Aggregate Trades List
         * @description Get compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
         *     - If `fromId`, `startTime`, and `endTime` are not sent, the most recent aggregate trades will be returned.
         *     - Note that if a trade has the following values, this was a duplicate aggregate trade and marked as invalid:
         *
         *       p = '0' // price
         *
         *       q = '0' // qty
         *
         *       f = -1 // ﬁrst_trade_id
         *
         *       l = -1 // last_trade_id
         *
         *     Weight(IP): 2
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description Trade id to fetch from. Default gets most recent trades. */
                    fromId?: components["parameters"]["fromId"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Trade list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["aggTrade"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/klines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Kline/Candlestick Data
         * @description Kline/candlestick bars for a symbol.
         *     Klines are uniquely identified by their open time.
         *
         *     - If `startTime` and `endTime` are not sent, the most recent klines are returned.
         *
         *     Weight(IP): 2
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description kline intervals */
                    interval: "1s" | "1m" | "3m" | "5m" | "15m" | "30m" | "1h" | "2h" | "4h" | "6h" | "8h" | "12h" | "1d" | "3d" | "1w" | "1M";
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default: 0 (UTC) */
                    timeZone?: string;
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Kline data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": (number | string)[][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/uiKlines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * UIKlines
         * @description The request is similar to klines having the same parameters and response.
         *
         *     uiKlines return modified kline data, optimized for presentation of candlestick charts.
         *
         *     Weight(IP): 2
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description kline intervals */
                    interval: "1s" | "1m" | "3m" | "5m" | "15m" | "30m" | "1h" | "2h" | "4h" | "6h" | "8h" | "12h" | "1d" | "3d" | "1w" | "1M";
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default: 0 (UTC) */
                    timeZone?: string;
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description UIKline data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": (number | string)[][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/avgPrice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Current Average Price
         * @description Current average price for a symbol.
         *
         *     Weight(IP): 2
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Average price */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @description Average price interval (in minutes)
                             * @example 5
                             */
                            mins: number;
                            /**
                             * @description Average price
                             * @example 9.35751834
                             */
                            price: string;
                            /**
                             * Format: int64
                             * @description Last trade time
                             * @example 1694061154503
                             */
                            closeTime: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/ticker/24hr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 24hr Ticker Price Change Statistics
         * @description 24 hour rolling window price change statistics. Careful when accessing this with no symbol.
         *
         *     - If the symbol is not sent, tickers for all symbols will be returned in an array.
         *
         *     Weight(IP):
         *     - `2` for a single symbol;
         *     - `80` when the symbol parameter is omitted;
         */
        get: {
            parameters: {
                query?: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol?: components["parameters"]["optionalSymbol"];
                    symbols?: components["parameters"]["arraySymbols"];
                    /** @description Supported values: FULL or MINI.
                     *     If none provided, the default is FULL */
                    type?: components["parameters"]["tickerType"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 24hr ticker */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ticker"] | components["schemas"]["tickerList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/ticker/tradingDay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Trading Day Ticker
         * @description Price change statistics for a trading day.
         *
         *     Notes:
         *     - Supported values for timeZone:
         *       - Hours and minutes (e.g. -1:00, 05:45)
         *       - Only hours (e.g. 0, 8, 4)
         *
         *     Weight:
         *     - `4` for each requested symbol.
         *     - The weight for this request will cap at `200` once the number of symbols in the request is more than `50`.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol?: components["parameters"]["optionalSymbol"];
                    symbols?: components["parameters"]["arraySymbols"];
                    /** @description Default: 0 (UTC) */
                    timeZone?: string;
                    /** @description Supported values: FULL or MINI.
                     *     If none provided, the default is FULL */
                    type?: components["parameters"]["tickerType"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Trading day ticker */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["dayTicker"] | components["schemas"]["dayTickerList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/ticker/price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Symbol Price Ticker
         * @description Latest price for a symbol or symbols.
         *
         *     - If the symbol is not sent, prices for all symbols will be returned in an array.
         *
         *     Weight(IP):
         *     - `2` for a single symbol;
         *     - `4` when the symbol parameter is omitted;
         */
        get: {
            parameters: {
                query?: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol?: components["parameters"]["optionalSymbol"];
                    symbols?: components["parameters"]["arraySymbols"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Price ticker */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["priceTicker"] | components["schemas"]["priceTickerList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/ticker/bookTicker": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Symbol Order Book Ticker
         * @description Best price/qty on the order book for a symbol or symbols.
         *
         *     - If the symbol is not sent, bookTickers for all symbols will be returned in an array.
         *
         *     Weight(IP):
         *     - `2` for a single symbol;
         *     - `4` when the symbol parameter is omitted;
         */
        get: {
            parameters: {
                query?: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol?: components["parameters"]["optionalSymbol"];
                    symbols?: components["parameters"]["arraySymbols"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order book ticker */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["bookTicker"] | components["schemas"]["bookTickerList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/ticker": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rolling window price change statistics
         * @description The window used to compute statistics is typically slightly wider than requested windowSize.
         *
         *     openTime for /api/v3/ticker always starts on a minute, while the closeTime is the current time of the request. As such, the effective window might be up to 1 minute wider than requested.
         *
         *     E.g. If the closeTime is 1641287867099 (January 04, 2022 09:17:47:099 UTC) , and the windowSize is 1d. the openTime will be: 1641201420000 (January 3, 2022, 09:17:00 UTC)
         *
         *     Weight(IP): 4 for each requested symbol regardless of windowSize.
         *
         *     The weight for this request will cap at 200 once the number of symbols in the request is more than 50.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol?: components["parameters"]["optionalSymbol"];
                    symbols?: components["parameters"]["arraySymbols"];
                    /** @description Defaults to 1d if no parameter provided.
                     *     Supported windowSize values:
                     *     1m,2m....59m for minutes
                     *     1h, 2h....23h - for hours
                     *     1d...7d - for days.
                     *
                     *     Units cannot be combined (e.g. 1d2h is not allowed) */
                    windowSize?: string;
                    /** @description Supported values: FULL or MINI.
                     *     If none provided, the default is FULL */
                    type?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Rolling price ticker */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BNBBTC */
                            symbol: string;
                            /** @example -8.00000000 */
                            priceChange: string;
                            /** @example -88.889 */
                            priceChangePercent: string;
                            /** @example 2.60427807 */
                            weightedAvgPrice: string;
                            /** @example 9.00000000 */
                            openPrice: string;
                            /** @example 9.00000000 */
                            highPrice: string;
                            /** @example 1.00000000 */
                            lowPrice: string;
                            /** @example 1.00000000 */
                            lastPrice: string;
                            /** @example 187.00000000 */
                            volume: string;
                            /** @example 487.00000000 */
                            quoteVolume: string;
                            /**
                             * Format: int64
                             * @example 1641859200000
                             */
                            openTime: number;
                            /**
                             * Format: int64
                             * @example 1642031999999
                             */
                            closeTime: number;
                            /**
                             * Format: int64
                             * @example 0
                             */
                            firstId: number;
                            /**
                             * Format: int64
                             * @example 60
                             */
                            lastId: number;
                            /**
                             * Format: int64
                             * @example 61
                             */
                            count: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/order/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test New Order (TRADE)
         * @description Test new order creation and signature/recvWindow long.
         *     Creates and validates a new order but does not send it into the matching engine.
         *
         *     Weight(IP):
         *       - Without computeCommissionRates: `1`
         *       - With computeCommissionRates: `20`
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    side: components["parameters"]["side"];
                    /** @description Order type */
                    type: components["parameters"]["orderType"];
                    /** @description Order time in force */
                    timeInForce?: components["parameters"]["timeInForce"];
                    /** @description Order quantity */
                    quantity?: components["parameters"]["optionalQuantity"];
                    /** @description Quote quantity */
                    quoteOrderQty?: components["parameters"]["quoteOrderQty"];
                    /** @description Order price */
                    price?: components["parameters"]["optionalPrice"];
                    /** @description Used to uniquely identify this cancel. Automatically generated by default */
                    newClientOrderId?: components["parameters"]["newClientOrderId"];
                    strategyId?: components["parameters"]["strategyId"];
                    /** @description The value cannot be less than 1000000. */
                    strategyType?: components["parameters"]["strategyType"];
                    /** @description Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
                    stopPrice?: components["parameters"]["stopPrice"];
                    /** @description Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
                    trailingDelta?: components["parameters"]["optionalTrailingDelta"];
                    /** @description Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. */
                    icebergQty?: components["parameters"]["icebergQty"];
                    /** @description Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK. */
                    newOrderRespType?: components["parameters"]["newOrderRespType"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description Default: false */
                    computeCommissionRates?: boolean;
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Order (USER_DATA)
         * @description Check an order's status.
         *
         *     - Either `orderId` or `origClientOrderId` must be sent.
         *     - For some historical orders `cummulativeQuoteQty` will be < 0, meaning the data is not available at this time.
         *
         *     Weight(IP): 4
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    /** @description Order id from client */
                    origClientOrderId?: components["parameters"]["origClientOrderId"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["orderDetails"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * New Order (TRADE)
         * @description Send in a new order.
         *
         *     - `LIMIT_MAKER` are `LIMIT` orders that will be rejected if they would immediately match and trade as a taker.
         *     - `STOP_LOSS` and `TAKE_PROFIT` will execute a `MARKET` order when the `stopPrice` is reached.
         *     - Any `LIMIT` or `LIMIT_MAKER` type order can be made an iceberg order by sending an `icebergQty`.
         *     - Any order with an `icebergQty` MUST have `timeInForce` set to `GTC`.
         *     - `MARKET` orders using `quantity` specifies how much a user wants to buy or sell based on the market price.
         *     - `MARKET` orders using `quoteOrderQty` specifies the amount the user wants to spend (when buying) or receive (when selling) of the quote asset; the correct quantity will be determined based on the market liquidity and `quoteOrderQty`.
         *     - `MARKET` orders using `quoteOrderQty` will not break `LOT_SIZE` filter rules; the order will execute a quantity that will have the notional value as close as possible to `quoteOrderQty`.
         *     - same `newClientOrderId` can be accepted only when the previous one is filled, otherwise the order will be rejected.
         *
         *     Trigger order price rules against market price for both `MARKET` and `LIMIT` versions:
         *
         *     - Price above market price: `STOP_LOSS` `BUY`, `TAKE_PROFIT` `SELL`
         *     - Price below market price: `STOP_LOSS` `SELL`, `TAKE_PROFIT` `BUY`
         *
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    side: components["parameters"]["side"];
                    /** @description Order type */
                    type: components["parameters"]["orderType"];
                    /** @description Order time in force */
                    timeInForce?: components["parameters"]["timeInForce"];
                    /** @description Order quantity */
                    quantity?: components["parameters"]["optionalQuantity"];
                    /** @description Quote quantity */
                    quoteOrderQty?: components["parameters"]["quoteOrderQty"];
                    /** @description Order price */
                    price?: components["parameters"]["optionalPrice"];
                    /** @description Used to uniquely identify this cancel. Automatically generated by default */
                    newClientOrderId?: components["parameters"]["newClientOrderId"];
                    strategyId?: components["parameters"]["strategyId"];
                    /** @description The value cannot be less than 1000000. */
                    strategyType?: components["parameters"]["strategyType"];
                    /** @description Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
                    stopPrice?: components["parameters"]["stopPrice"];
                    /** @description Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
                    trailingDelta?: components["parameters"]["optionalTrailingDelta"];
                    /** @description Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. */
                    icebergQty?: components["parameters"]["icebergQty"];
                    /** @description Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK. */
                    newOrderRespType?: components["parameters"]["newOrderRespType"];
                    /** @description The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. */
                    selfTradePreventionMode?: components["parameters"]["selfTradePreventionMode"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["orderResponseAck"] | components["schemas"]["orderResponseResult"] | components["schemas"]["orderResponseFull"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        /**
         * Cancel Order (TRADE)
         * @description Cancel an active order.
         *
         *     Either `orderId` or `origClientOrderId` must be sent.
         *
         *     Weight(IP): 1
         */
        delete: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    /** @description Order id from client */
                    origClientOrderId?: components["parameters"]["origClientOrderId"];
                    /** @description Used to uniquely identify this cancel. Automatically generated by default */
                    newClientOrderId?: components["parameters"]["newClientOrderId"];
                    cancelRestrictions?: components["parameters"]["cancelRestrictions"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cancelled order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["order"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/order/cancelReplace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel an Existing Order and Send a New Order (Trade)
         * @description Cancels an existing order and places a new order on the same symbol.
         *
         *     Filters and Order Count are evaluated before the processing of the cancellation and order placement occurs.
         *
         *     A new order that was not attempted (i.e. when newOrderResult: NOT_ATTEMPTED), will still increase the order count by 1.
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    side: components["parameters"]["side"];
                    /** @description Order type */
                    type: components["parameters"]["orderType"];
                    /** @description - `STOP_ON_FAILURE` If the cancel request fails, the new order placement will not be attempted.
                     *     - `ALLOW_FAILURES` If new order placement will be attempted even if cancel request fails. */
                    cancelReplaceMode: string;
                    cancelRestrictions?: components["parameters"]["cancelRestrictions"];
                    /** @description Order time in force */
                    timeInForce?: components["parameters"]["timeInForce"];
                    /** @description Order quantity */
                    quantity?: components["parameters"]["optionalQuantity"];
                    /** @description Quote quantity */
                    quoteOrderQty?: components["parameters"]["quoteOrderQty"];
                    /** @description Order price */
                    price?: components["parameters"]["optionalPrice"];
                    /** @description Used to uniquely identify this cancel. Automatically generated by default */
                    cancelNewClientOrderId?: string;
                    /** @description Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence. */
                    cancelOrigClientOrderId?: string;
                    /** @description Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence. */
                    cancelOrderId?: number;
                    /** @description Used to uniquely identify this cancel. Automatically generated by default */
                    newClientOrderId?: components["parameters"]["newClientOrderId"];
                    strategyId?: components["parameters"]["strategyId"];
                    /** @description The value cannot be less than 1000000. */
                    strategyType?: components["parameters"]["strategyType"];
                    /** @description Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
                    stopPrice?: components["parameters"]["stopPrice"];
                    /** @description Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
                    trailingDelta?: components["parameters"]["optionalTrailingDelta"];
                    /** @description Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. */
                    icebergQty?: components["parameters"]["icebergQty"];
                    /** @description Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK. */
                    newOrderRespType?: components["parameters"]["newOrderRespType"];
                    /** @description The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. */
                    selfTradePreventionMode?: components["parameters"]["selfTradePreventionMode"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example SUCCESS */
                            cancelResult: string;
                            /** @example SUCCESS */
                            newOrderResult: string;
                            cancelResponse: {
                                /** @example BTCUSDT */
                                symbol: string;
                                /** @example DnLo3vTAQcjha43lAZhZ0y */
                                origClientOrderId: string;
                                /**
                                 * Format: int64
                                 * @example 9
                                 */
                                orderId: number;
                                /**
                                 * Format: int64
                                 * @example -1
                                 */
                                orderListId: number;
                                /** @example osxN3JXAtJvKvCqGeMWMVR */
                                clientOrderId: string;
                                /** @example 0.01000000 */
                                price: string;
                                /** @example 0.000100 */
                                origQty: string;
                                /** @example 0.00000000 */
                                executedQty: string;
                                /** @example 0.00000000 */
                                cummulativeQuoteQty: string;
                                /** @example CANCELED */
                                status: string;
                                /** @example GTC */
                                timeInForce: string;
                                /** @example LIMIT */
                                type: string;
                                /** @example SELL */
                                side: string;
                                /** @example NONE */
                                selfTradePreventionMode: string;
                                /**
                                 * Format: int64
                                 * @example 1507725176595
                                 */
                                transactTime?: number;
                            };
                            newOrderResponse: {
                                /** @example BTCUSDT */
                                symbol: string;
                                /**
                                 * Format: int64
                                 * @example 10
                                 */
                                orderId: number;
                                /**
                                 * Format: int64
                                 * @example -1
                                 */
                                orderListId: number;
                                /** @example wOceeeOzNORyLiQfw7jd8S */
                                clientOrderId: string;
                                /**
                                 * Format: int64
                                 * @example 1652928801803
                                 */
                                transactTime: number;
                                /** @example 0.02000000 */
                                price: string;
                                /** @example 0.040000 */
                                origQty: string;
                                /** @example 0.00000000 */
                                executedQty: string;
                                /** @example 0.00000000 */
                                cummulativeQuoteQty: string;
                                /** @example NEW */
                                status: string;
                                /** @example GTC */
                                timeInForce: string;
                                /** @example LIMIT */
                                type: string;
                                /** @example BUY */
                                side: string;
                                /**
                                 * Format: int64
                                 * @example 1669277163808
                                 */
                                workingTime: number;
                                fills: string[];
                                /** @example NONE */
                                selfTradePreventionMode: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/openOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Current Open Orders (USER_DATA)
         * @description Get all open orders on a symbol. Careful when accessing this with no symbol.
         *
         *     Weight(IP):
         *     - `6` for a single symbol;
         *     - `80` when the symbol parameter is omitted;
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol?: components["parameters"]["optionalSymbol"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current open orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["orderDetails"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Cancel all Open Orders on a Symbol (TRADE)
         * @description Cancels all active orders on a symbol.
         *     This includes OCO orders.
         *
         *     Weight(IP): 1
         */
        delete: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cancelled orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": (components["schemas"]["order"] | components["schemas"]["ocoOrder"])[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/allOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * All Orders (USER_DATA)
         * @description Get all account orders; active, canceled, or filled..
         *
         *     - If `orderId` is set, it will get orders >= that `orderId`. Otherwise most recent orders are returned.
         *     - For some historical orders `cummulativeQuoteQty` will be < 0, meaning the data is not available at this time.
         *     - If `startTime` and/or `endTime` provided, `orderId` is not required
         *
         *     Weight(IP): 20
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current open orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["orderDetails"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/orderList/oco": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * New Order list - OCO (TRADE)
         * @description Send in an one-cancels-the-other (OCO) pair, where activation of one order immediately cancels the other.
         *
         *     - An `OCO` has 2 orders called the above order and below order.
         *     - One of the orders must be a `LIMIT_MAKER` order and the other must be `STOP_LOSS` or`STOP_LOSS_LIMIT` order.
         *     - Price restrictions:
         *         - If the `OCO` is on the `SELL` side: `LIMIT_MAKER` price > Last Traded Price > stopPrice
         *         - If the `OCO` is on the `BUY` side: `LIMIT_MAKER` price < Last Traded Price < stopPrice
         *     - OCOs add 2 orders to the unfilled order count, `EXCHANGE_MAX_ORDERS` filter, and the `MAX_NUM_ORDERS` filter.
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description Arbitrary unique ID among open order lists. Automatically generated if not sent.
                     *     A new order list with the same `listClientOrderId` is accepted only when the previous one is filled or completely expired.
                     *     `listClientOrderId` is distinct from the `aboveClientOrderId` and the `belowCLientOrderId`. */
                    listClientOrderId?: string;
                    side: components["parameters"]["side"];
                    quantity: components["parameters"]["quantity"];
                    /** @description Supported values : `STOP_LOSS_LIMIT`, `STOP_LOSS`, `LIMIT_MAKER` */
                    aboveType: string;
                    /** @description Arbitrary unique ID among open orders for the above order. Automatically generated if not sent */
                    aboveClientOrderId?: string;
                    /** @description Note that this can only be used if `aboveTimeInForce` is `GTC`. */
                    aboveIcebergQty?: number;
                    abovePrice?: number;
                    /** @description Can be used if `aboveType` is `STOP_LOSS` or `STOP_LOSS_LIMIT`.
                     *     Either `aboveStopPrice` or `aboveTrailingDelta` or both, must be specified. */
                    aboveStopPrice?: number;
                    aboveTrailingDelta?: number;
                    /** @description Required if the `aboveType` is `STOP_LOSS_LIMIT`. */
                    aboveTimeInForce?: "GTC" | "IOC" | "FOK";
                    /** @description Arbitrary numeric value identifying the above order within an order strategy. */
                    aboveStrategyId?: number;
                    /** @description Arbitrary numeric value identifying the above order strategy.
                     *     Values smaller than 1000000 are reserved and cannot be used. */
                    aboveStrategyType?: number;
                    /** @description Supported values : `STOP_LOSS_LIMIT`, `STOP_LOSS`, `LIMIT_MAKER` */
                    belowType: string;
                    /** @description Arbitrary unique ID among open orders for the below order. Automatically generated if not sent */
                    belowClientOrderId?: string;
                    /** @description Note that this can only be used if `belowTimeInForce` is `GTC`. */
                    belowIcebergQty?: number;
                    /** @description Can be used if `belowType` is `STOP_LOSS_LIMIT` or `LIMIT_MAKER` to specify the limit price. */
                    belowPrice?: number;
                    /** @description Can be used if `belowType` is `STOP_LOSS` or `STOP_LOSS_LIMIT`.
                     *     Either `belowStopPrice` or `belowTrailingDelta` or both, must be specified. */
                    belowStopPrice?: number;
                    belowTrailingDelta?: number;
                    /** @description Required if the `belowType` is `STOP_LOSS_LIMIT`. */
                    belowTimeInForce?: "GTC" | "IOC" | "FOK";
                    /** @description Arbitrary numeric value identifying the below order within an order strategy. */
                    belowStrategyId?: number;
                    /** @description Arbitrary numeric value identifying the below order strategy.
                     *     Values smaller than 1000000 are reserved and cannot be used. */
                    belowStrategyType?: number;
                    /** @description Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK. */
                    newOrderRespType?: components["parameters"]["newOrderRespType"];
                    /** @description The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. */
                    selfTradePreventionMode?: components["parameters"]["selfTradePreventionMode"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description New OCO details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            orderListId: number;
                            /** @example OCO */
                            contingencyType: string;
                            /** @example EXEC_STARTED */
                            listStatusType: string;
                            /** @example EXECUTING */
                            listOrderStatus: string;
                            /** @example lH1YDkuQKWiXVXHPSKYEIp */
                            listClientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1710485608839
                             */
                            transactionTime: number;
                            /** @example LTCBTC */
                            symbol: string;
                            orders: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                clientOrderId: string;
                            }[];
                            /** @example [
                             *       {
                             *         "symbol": "LTCBTC",
                             *         "orderId": 10,
                             *         "orderListId": 1,
                             *         "clientOrderId": "44nZvqpemY7sVYgPYbvPih",
                             *         "transactTime": 1710485608839,
                             *         "price": "1.000000",
                             *         "origQty": "5.00000000",
                             *         "executedQty": "0.000000",
                             *         "cummulativeQuoteQty": "0.000000",
                             *         "status": "NEW",
                             *         "timeInForce": "GTC",
                             *         "type": "STOP_LOSS_LIMIT",
                             *         "side": "SELL",
                             *         "stopPrice": "1.00000000",
                             *         "workingTime": -1,
                             *         "icebergQty": "1.00000000",
                             *         "selfTradePreventionMode": "NONE"
                             *       },
                             *       {
                             *         "symbol": "LTCBTC",
                             *         "orderId": 11,
                             *         "orderListId": 1,
                             *         "clientOrderId": "NuMp0nVYnciDiFmVqfpBqK",
                             *         "transactTime": 1710485608839,
                             *         "price": "3.00000000",
                             *         "origQty": "5.00000000",
                             *         "executedQty": "0.000000",
                             *         "cummulativeQuoteQty": "0.000000",
                             *         "status": "NEW",
                             *         "timeInForce": "GTC",
                             *         "type": "LIMIT_MAKER",
                             *         "side": "SELL",
                             *         "workingTime": 1710485608839,
                             *         "selfTradePreventionMode": "NONE"
                             *       }
                             *     ] */
                            orderReports: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                /** Format: int64 */
                                orderListId: number;
                                clientOrderId: string;
                                /** Format: int64 */
                                transactTime: number;
                                price: string;
                                origQty: string;
                                executedQty: string;
                                cummulativeQuoteQty: string;
                                status: string;
                                timeInForce: string;
                                type: string;
                                side: string;
                                stopPrice: string;
                                /** Format: int64 */
                                workingTime: number;
                                selfTradePreventionMode: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/orderList/oto": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * New Order List - OTO (TRADE)
         * @description Places an `OTO`.
         *     - An `OTO` (One-Triggers-the-Other) is an order list comprised of 2 orders.
         *     - The first order is called the working order and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
         *     - The second order is called the pending order. It can be any order type except for `MARKET` orders using parameter `quoteOrderQty`. The pending order is only placed on the order book when the working order gets fully filled.
         *     - If either the working order or the pending order is cancelled individually, the other order in the order list will also be canceled or expired.
         *     - When the order list is placed, if the working order gets immediately fully filled, the placement response will show the working order as `FILLED` but the pending order will still appear as `PENDING_NEW`. You need to query the status of the pending order again to see its updated status.
         *     - OTOs add 2 orders to the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter and `MAX_NUM_ORDERS` filter.
         *
         *     Weight: 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description Arbitrary unique ID among open order lists. Automatically generated if not sent.
                     *     A new order list with the same `listClientOrderId` is accepted only when the previous one is filled or completely expired.
                     *     `listClientOrderId` is distinct from the `workingClientOrderId` and the `pendingClientOrderId`. */
                    listClientOrderId?: string;
                    /** @description Set the response JSON. */
                    newOrderRespType?: components["parameters"]["ocoNewOrderRespType"];
                    /** @description The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. */
                    selfTradePreventionMode?: components["parameters"]["selfTradePreventionMode"];
                    /** @description Supported values: LIMIT,LIMIT_MAKER */
                    workingType: components["parameters"]["workingType"];
                    /** @description BUY,SELL */
                    workingSide: components["parameters"]["workingSide"];
                    /** @description Arbitrary unique ID among open orders for the working order. Automatically generated if not sent. */
                    workingClientOrderId?: components["parameters"]["workingClientOrderId"];
                    workingPrice: components["parameters"]["workingPrice"];
                    /** @description Sets the quantity for the working order. */
                    workingQuantity: components["parameters"]["workingQuantity"];
                    /** @description This can only be used if workingTimeInForce is GTC. */
                    workingIcebergQty: components["parameters"]["workingIcebergQty"];
                    /** @description GTC, IOC, FOK */
                    workingTimeInForce?: components["parameters"]["workingTimeInForce"];
                    /** @description Arbitrary numeric value identifying the working order within an order strategy. */
                    workingStrategyId?: number;
                    /** @description Arbitrary numeric value identifying the working order strategy.
                     *     Values smaller than 1000000 are reserved and cannot be used. */
                    workingStrategyType?: number;
                    /** @description Supported values: Order Types Note that MARKET orders using quoteOrderQty are not supported. */
                    pendingType: components["parameters"]["pendingType"];
                    /** @description BUY,SELL */
                    pendingSide: components["parameters"]["pendingSide"];
                    /** @description Arbitrary unique ID among open orders for the pending order. Automatically generated if not sent. */
                    pendingClientOrderId?: components["parameters"]["pendingClientOrderId"];
                    pendingPrice?: components["parameters"]["pendingPrice"];
                    pendingStopPrice?: components["parameters"]["pendingStopPrice"];
                    pendingTrailingDelta?: components["parameters"]["pendingTrailingDelta"];
                    /** @description Sets the quantity for the pending order. */
                    pendingQuantity: components["parameters"]["pendingQuantity"];
                    /** @description This can only be used if pendingTimeInForce is GTC. */
                    pendingIcebergQty?: components["parameters"]["pendingIcebergQty"];
                    /** @description GTC, IOC, FOK */
                    pendingTimeInForce?: components["parameters"]["pendingTimeInForce"];
                    /** @description Arbitrary numeric value identifying the pending order within an order strategy. */
                    pendingStrategyId?: number;
                    /** @description Arbitrary numeric value identifying the pending order strategy.
                     *     Values smaller than 1000000 are reserved and cannot be used. */
                    pendingStrategyType?: number;
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description New OTO details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            orderListId: number;
                            /** @example OTO */
                            contingencyType: string;
                            /** @example EXEC_STARTED */
                            listStatusType: string;
                            /** @example EXECUTING */
                            listOrderStatus: string;
                            /** @example yl2ERtcar1o25zcWtqVBTC */
                            listClientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1712289389158
                             */
                            transactionTime: number;
                            /** @example LTCBTC */
                            symbol: string;
                            orders: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                clientOrderId: string;
                            }[];
                            orderReports: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                /** Format: int64 */
                                orderListId: number;
                                clientOrderId: string;
                                /** Format: int64 */
                                transactTime: number;
                                price: string;
                                origQty: string;
                                executedQty: string;
                                cummulativeQuoteQty: string;
                                status: string;
                                timeInForce: string;
                                type: string;
                                side: string;
                                /** Format: int64 */
                                workingTime: number;
                                selfTradePreventionMode: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/orderList/otoco": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * New Order List - OTOCO (TRADE)
         * @description Place an `OTOCO`.
         *     - An `OTOCO` (One-Triggers-One-Cancels-the-Other) is an order list comprised of 3 orders.
         *     - The first order is called the working order and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
         *       - The behavior of the working order is the same as the `OTO`.
         *     - `OTOCO` has 2 pending orders (pending above and pending below), forming an `OCO` pair. The pending orders are only placed on the order book when the working order gets fully filled.
         *       - The rules of the pending above and pending below follow the same rules as the Order List `OCO`.
         *     - OTOCOs add 3 orders against the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter, and `MAX_NUM_ORDERS` filter.
         *
         *     Weight: 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description Arbitrary unique ID among open order lists. Automatically generated if not sent.
                     *     A new order list with the same `listClientOrderId` is accepted only when the previous one is filled or completely expired.
                     *     `listClientOrderId` is distinct from the `workingClientOrderId` and the `pendingClientOrderId`. */
                    listClientOrderId?: string;
                    /** @description Set the response JSON. */
                    newOrderRespType?: components["parameters"]["ocoNewOrderRespType"];
                    /** @description The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. */
                    selfTradePreventionMode?: components["parameters"]["selfTradePreventionMode"];
                    /** @description Supported values: LIMIT,LIMIT_MAKER */
                    workingType: components["parameters"]["workingType"];
                    /** @description BUY,SELL */
                    workingSide: components["parameters"]["workingSide"];
                    /** @description Arbitrary unique ID among open orders for the working order. Automatically generated if not sent. */
                    workingClientOrderId?: components["parameters"]["workingClientOrderId"];
                    workingPrice: components["parameters"]["workingPrice"];
                    /** @description Sets the quantity for the working order. */
                    workingQuantity: components["parameters"]["workingQuantity"];
                    /** @description This can only be used if workingTimeInForce is GTC. */
                    workingIcebergQty: components["parameters"]["workingIcebergQty"];
                    /** @description GTC, IOC, FOK */
                    workingTimeInForce?: components["parameters"]["workingTimeInForce"];
                    /** @description Arbitrary numeric value identifying the working order within an order strategy. */
                    workingStrategyId?: number;
                    /** @description Arbitrary numeric value identifying the working order strategy.
                     *     Values smaller than 1000000 are reserved and cannot be used. */
                    workingStrategyType?: number;
                    /** @description BUY,SELL */
                    pendingSide: components["parameters"]["pendingSide"];
                    /** @description Sets the quantity for the pending order. */
                    pendingQuantity: components["parameters"]["pendingQuantity"];
                    /** @description Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT */
                    pendingAboveType: components["parameters"]["pendingAboveType"];
                    /** @description Arbitrary unique ID among open orders for the pending above order. Automatically generated if not sent. */
                    pendingAboveClientOrderId?: components["parameters"]["pendingAboveClientOrderId"];
                    pendingAbovePrice?: components["parameters"]["pendingAbovePrice"];
                    pendingAboveStopPrice?: components["parameters"]["pendingAboveStopPrice"];
                    pendingAboveTrailingDelta?: components["parameters"]["pendingAboveTrailingDelta"];
                    /** @description This can only be used if pendingAboveTimeInForce is GTC. */
                    pendingAboveIcebergQty?: components["parameters"]["pendingAboveIcebergQty"];
                    pendingAboveTimeInForce?: components["parameters"]["pendingAboveTimeInForce"];
                    /** @description Arbitrary numeric value identifying the pending above order within an order strategy. */
                    pendingAboveStrategyId?: number;
                    /** @description Arbitrary numeric value identifying the pending above order strategy.
                     *     Values smaller than 1000000 are reserved and cannot be used. */
                    pendingAboveStrategyType?: number;
                    /** @description Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT */
                    pendingBelowType?: components["parameters"]["pendingBelowType"];
                    /** @description Arbitrary unique ID among open orders for the pending below order. Automatically generated if not sent. */
                    pendingBelowClientOrderId?: components["parameters"]["pendingBelowClientOrderId"];
                    pendingBelowPrice?: components["parameters"]["pendingBelowPrice"];
                    pendingBelowStopPrice?: components["parameters"]["pendingBelowStopPrice"];
                    pendingBelowTrailingDelta?: components["parameters"]["pendingBelowTrailingDelta"];
                    /** @description This can only be used if pendingBelowTimeInForce is GTC. */
                    pendingBelowIcebergQty?: components["parameters"]["pendingBelowIcebergQty"];
                    pendingBelowTimeInForce?: components["parameters"]["pendingBelowTimeInForce"];
                    /** @description Arbitrary numeric value identifying the pending below order within an order strategy. */
                    pendingBelowStrategyId?: number;
                    /** @description Arbitrary numeric value identifying the pending below order strategy.
                     *     Values smaller than 1000000 are reserved and cannot be used. */
                    pendingBelowStrategyType?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description New OTOCO details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            orderListId: number;
                            /** @example OTOCO */
                            contingencyType: string;
                            /** @example EXEC_STARTED */
                            listStatusType: string;
                            /** @example EXECUTING */
                            listOrderStatus: string;
                            /** @example RumwQpBaDctlUu5jyG5rs0 */
                            listClientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1712291372842
                             */
                            transactionTime: number;
                            /** @example LTCBTC */
                            symbol: string;
                            orders: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                clientOrderId: string;
                            }[];
                            orderReports: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                /** Format: int64 */
                                orderListId: number;
                                clientOrderId: string;
                                /** Format: int64 */
                                transactTime: number;
                                price: string;
                                origQty: string;
                                executedQty: string;
                                cummulativeQuoteQty: string;
                                status: string;
                                timeInForce: string;
                                type: string;
                                side: string;
                                /** Format: int64 */
                                workingTime: number;
                                selfTradePreventionMode: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/orderList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query OCO (USER_DATA)
         * @description Retrieves a specific OCO based on provided optional parameters
         *
         *     Weight(IP): 4
         */
        get: {
            parameters: {
                query: {
                    /** @description Order list id */
                    orderListId?: components["parameters"]["orderListId"];
                    /** @description Order id from client */
                    origClientOrderId?: components["parameters"]["origClientOrderId"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OCO details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 27
                             */
                            orderListId: number;
                            /** @example OCO */
                            contingencyType: string;
                            /** @example EXEC_STARTED */
                            listStatusType: string;
                            /** @example EXECUTING */
                            listOrderStatus: string;
                            /** @example h2USkA5YQpaXHPIrkd96xE */
                            listClientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1565245656253
                             */
                            transactionTime: number;
                            /** @example LTCBTC */
                            symbol: string;
                            orders: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                clientOrderId: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Cancel OCO (TRADE)
         * @description Cancel an entire Order List
         *
         *     Canceling an individual leg will cancel the entire OCO
         *
         *     Weight(IP): 1
         */
        delete: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description Order list id */
                    orderListId?: components["parameters"]["orderListId"];
                    /** @description A unique Id for the entire orderList */
                    listClientOrderId?: components["parameters"]["listClientOrderId"];
                    /** @description Used to uniquely identify this cancel. Automatically generated by default */
                    newClientOrderId?: components["parameters"]["newClientOrderId"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Report on deleted OCO */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ocoOrder"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/allOrderList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query all OCO (USER_DATA)
         * @description Retrieves all OCO based on provided optional parameters
         *
         *     Weight(IP): 20
         */
        get: {
            parameters: {
                query: {
                    /** @description Trade id to fetch from. Default gets most recent trades. */
                    fromId?: components["parameters"]["fromId"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of OCO orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 29
                             */
                            orderListId: number;
                            /** @example OCO */
                            contingencyType: string;
                            /** @example EXEC_STARTED */
                            listStatusType: string;
                            /** @example EXECUTING */
                            listOrderStatus: string;
                            /** @example amEEAXryFzFwYF1FeRpUoZ */
                            listClientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1565245913483
                             */
                            transactionTime: number;
                            /** @example LTCBTC */
                            symbol: string;
                            isIsolated: boolean;
                            orders: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                clientOrderId: string;
                            }[];
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/openOrderList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Open OCO (USER_DATA)
         * @description Weight(IP): 6
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of OCO orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 31
                             */
                            orderListId: number;
                            /** @example OCO */
                            contingencyType: string;
                            /** @example EXEC_STARTED */
                            listStatusType: string;
                            /** @example EXECUTING */
                            listOrderStatus: string;
                            /** @example wuB13fmulKj3YjdqWEcsnp */
                            listClientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1565246080644
                             */
                            transactionTime: number;
                            /** @example LTCBTC */
                            symbol: string;
                            orders: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                clientOrderId: string;
                            }[];
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/sor/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * New order using SOR (TRADE)
         * @description Weight(IP): 6
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    side: components["parameters"]["side"];
                    /** @description Order type */
                    type: components["parameters"]["orderType"];
                    /** @description Order time in force */
                    timeInForce?: components["parameters"]["timeInForce"];
                    quantity: components["parameters"]["quantity"];
                    price?: number;
                    /** @description Used to uniquely identify this cancel. Automatically generated by default */
                    newClientOrderId?: components["parameters"]["newClientOrderId"];
                    strategyId?: components["parameters"]["strategyId"];
                    /** @description The value cannot be less than 1000000. */
                    strategyType?: components["parameters"]["strategyType"];
                    /** @description Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. */
                    icebergQty?: components["parameters"]["icebergQty"];
                    /** @description Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK. */
                    newOrderRespType?: components["parameters"]["newOrderRespType"];
                    /** @description The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. */
                    selfTradePreventionMode?: components["parameters"]["selfTradePreventionMode"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description New order details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTCUSDT */
                            symbol: string;
                            /**
                             * Format: int64
                             * @example 2
                             */
                            orderId: number;
                            /**
                             * Format: int64
                             * @example -1
                             */
                            orderListId: number;
                            /** @example sBI1KM6nNtOfj5tccZSKly */
                            clientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1689149087774
                             */
                            transactTime: number;
                            /** @example 31000.00000000 */
                            price: string;
                            /** @example 0.50000000 */
                            origQty: string;
                            /** @example 0.50000000 */
                            executedQty: string;
                            /** @example 14000.00000000 */
                            cummulativeQuoteQty: string;
                            /** @example FILLED */
                            status: string;
                            /** @example GTC */
                            timeInForce: string;
                            /** @example LIMIT */
                            type: string;
                            /** @example BUY */
                            side: string;
                            /**
                             * Format: int64
                             * @example 1689149087774
                             */
                            workingTime: number;
                            fills: {
                                /** @example ONE_PARTY_TRADE_REPORT */
                                matchType: string;
                                /** @example 28000.00000000 */
                                price: string;
                                /** @example 0.50000000 */
                                qty: string;
                                /** @example 0.00000000 */
                                commission: string;
                                /** @example BTC */
                                commissionAsset: string;
                                /**
                                 * Format: int64
                                 * @example -1
                                 */
                                tradeId: number;
                                /**
                                 * Format: int64
                                 * @example 0
                                 */
                                allocId: number;
                            }[];
                            /** @example SOR */
                            workingFloor: string;
                            /** @example NONE */
                            selfTradePreventionMode: string;
                            /** @example true */
                            usedSor: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/sor/order/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test new order using SOR (TRADE)
         * @description Test new order creation and signature/recvWindow using smart order routing (SOR).
         *     Creates and validates a new order but does not send it into the matching engine.
         *
         *     Weight(IP):
         *       - Without computeCommissionRates: `1`
         *       - With computeCommissionRates: `20`
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    side: components["parameters"]["side"];
                    /** @description Order type */
                    type: components["parameters"]["orderType"];
                    /** @description Order time in force */
                    timeInForce?: components["parameters"]["timeInForce"];
                    quantity: components["parameters"]["quantity"];
                    price?: number;
                    /** @description Used to uniquely identify this cancel. Automatically generated by default */
                    newClientOrderId?: components["parameters"]["newClientOrderId"];
                    strategyId?: components["parameters"]["strategyId"];
                    /** @description The value cannot be less than 1000000. */
                    strategyType?: components["parameters"]["strategyType"];
                    /** @description Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. */
                    icebergQty?: components["parameters"]["icebergQty"];
                    /** @description Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK. */
                    newOrderRespType?: components["parameters"]["newOrderRespType"];
                    /** @description The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. */
                    selfTradePreventionMode?: components["parameters"]["selfTradePreventionMode"];
                    /** @description Default: false */
                    computeCommissionRates?: boolean;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Test new order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Account Information (USER_DATA)
         * @description Get current account information.
         *
         *     Weight(IP): 20
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Account details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["account"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/myTrades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Account Trade List (USER_DATA)
         * @description Get trades for a specific account and symbol.
         *
         *     If `fromId` is set, it will get id >= that `fromId`. Otherwise most recent orders are returned.
         *
         *     The time between startTime and endTime can't be longer than 24 hours.
         *     These are the supported combinations of all parameters:
         *
         *       symbol
         *
         *       symbol + orderId
         *
         *       symbol + startTime
         *
         *       symbol + endTime
         *
         *       symbol + fromId
         *
         *       symbol + startTime + endTime
         *
         *       symbol+ orderId + fromId
         *
         *     Weight(IP): 20
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description This can only be used in combination with symbol. */
                    orderId?: number;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Trade id to fetch from. Default gets most recent trades. */
                    fromId?: components["parameters"]["fromId"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of trades */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["myTrade"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/rateLimit/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Current Order Count Usage (TRADE)
         * @description Displays the user's current order count usage for all intervals.
         *
         *     Weight(IP): 40
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order rate limits */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rateLimitType: string;
                            interval: string;
                            /** Format: int32 */
                            intervalNum: number;
                            /** Format: int32 */
                            limit: number;
                            /** Format: int32 */
                            count?: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/myPreventedMatches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Prevented Matches
         * @description Displays the list of orders that were expired because of STP.
         *
         *     For additional information on what a Prevented match is, as well as Self Trade Prevention (STP), please refer to our STP FAQ page.
         *
         *     These are the combinations supported:
         *
         *     * symbol + preventedMatchId
         *     * symbol + orderId
         *     * symbol + orderId + fromPreventedMatchId (limit will default to 500)
         *     * symbol + orderId + fromPreventedMatchId + limit
         *
         *     Weight(IP):
         *
         *     Case 	                          Weight
         *     If symbol is invalid: 	        2
         *     Querying by preventedMatchId: 	2
         *     Querying by orderId: 	          20
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    preventedMatchId?: components["parameters"]["preventedMatchId"];
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    fromPreventedMatchId?: number;
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order list that were expired due to STP */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTCUSDT */
                            symbol: string;
                            /**
                             * Format: int64
                             * @example 1
                             */
                            preventedMatchId: number;
                            /**
                             * Format: int64
                             * @example 5
                             */
                            takerOrderId: number;
                            /**
                             * Format: int64
                             * @example 3
                             */
                            makerOrderId: number;
                            /**
                             * Format: int64
                             * @example 1
                             */
                            tradeGroupId: number;
                            /** @example EXPIRE_MAKER */
                            selfTradePreventionMode: string;
                            /** @example 1.100000 */
                            price: string;
                            /** @example 1.300000 */
                            makerPreventedQuantity: string;
                            /**
                             * Format: int64
                             * @example 1669101687094
                             */
                            transactTime: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/myAllocations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Allocations (USER_DATA)
         * @description Retrieves allocations resulting from SOR order placement.
         *
         *     Weight: 20
         *
         *     Supported parameter combinations:
         *     Parameters 	                          Response
         *     symbol 	                              allocations from oldest to newest
         *     symbol + startTime 	                  oldest allocations since startTime
         *     symbol + endTime 	                    newest allocations until endTime
         *     symbol + startTime + endTime 	        allocations within the time range
         *     symbol + fromAllocationId 	          allocations by allocation ID
         *     symbol + orderId 	                    allocations related to an order starting with oldest
         *     symbol + orderId + fromAllocationId 	allocations related to an order by allocation ID
         *
         *     Note: The time between startTime and endTime can't be longer than 24 hours.
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    fromAllocationId?: number;
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Allocations resulting from SOR order placement */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTCUSDT */
                            symbol: string;
                            /**
                             * Format: int64
                             * @example 0
                             */
                            allocationId: number;
                            /** @example SOR */
                            allocationType: string;
                            /**
                             * Format: int64
                             * @example 1
                             */
                            orderId: number;
                            /**
                             * Format: int64
                             * @example -1
                             */
                            orderListId: number;
                            /** @example 1.00000000 */
                            price: string;
                            /** @example 5.00000000 */
                            qty: string;
                            /** @example 5.00000000 */
                            quoteQty: string;
                            /** @example 0.00000000 */
                            commission: string;
                            /** @example BTC */
                            commissionAsset: string;
                            /**
                             * Format: int64
                             * @example 1687506878118
                             */
                            time: number;
                            /** @example true */
                            isBuyer: boolean;
                            /** @example false */
                            isMaker: boolean;
                            /** @example false */
                            isAllocator: boolean;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/account/commission": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Commission Rates (USER_DATA)
         * @description Get current account commission rates.
         *
         *     Weight: 20
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current account commission rates. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTCUSDT */
                            symbol: string;
                            /** @description Standard commission rates on trades from the order. */
                            standardCommission: {
                                /** @example 0.00000010 */
                                maker: string;
                                /** @example 0.00000020 */
                                taker: string;
                                /** @example 0.00000030 */
                                buyer: string;
                                /** @example 0.00000040 */
                                seller: string;
                            };
                            /** @description Tax commission rates for trades from the order. */
                            taxCommission: {
                                /** @example 0.00000112 */
                                maker: string;
                                /** @example 0.00000114 */
                                taker: string;
                                /** @example 0.00000118 */
                                buyer: string;
                                /** @example 0.00000116 */
                                seller: string;
                            };
                            /** @description Discount commission when paying in BNB. */
                            discount: {
                                /** @example true */
                                enabledForAccount?: boolean;
                                /** @example true */
                                enabledForSymbol?: boolean;
                                /** @example BNB */
                                discountAsset?: string;
                                /**
                                 * @description Standard commission is reduced by this rate when paying commission in BNB.
                                 * @example 0.25000000
                                 */
                                discount?: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/borrow-repay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query borrow/repay records in Margin account(USER_DATA)
         * @description Query borrow/repay records in Margin account
         *
         *     - txId or startTime must be sent. txId takes precedence. Response in descending order
         *     - If an asset is sent, data within 30 days before endTime; If an asset is not sent, data within 7 days before endTime
         *     - If neither startTime nor endTime is sent, the recent 7-day data will be returned.
         *     - startTime set as endTime - 7 days by default, endTime set as current time by default
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    asset: components["parameters"]["asset"];
                    /** @description Isolated symbol */
                    isolatedSymbol?: components["parameters"]["isolatedSymbol"];
                    /** @description tranId in POST /sapi/v1/margin/loan */
                    txId?: number;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description BORROW or REPAY */
                    type: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin account borrow/repay */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @description Isolated symbol, will not be returned for crossed margin */
                                isolatedSymbol?: string;
                                /** @description Total amount borrowed/repaid */
                                amount?: string;
                                asset: string;
                                /** @description Interest repaid */
                                interest?: string;
                                /** @description Principal repaid */
                                principal: string;
                                /** @description one of PENDING (pending execution), CONFIRMED (successfully execution), FAILED (execution failed, nothing happened to your account) */
                                status: string;
                                /** Format: int64 */
                                timestamp: number;
                                /** Format: int64 */
                                txId: number;
                            }[];
                            /** Format: int32 */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Margin account borrow/repay(MARGIN)
         * @description Margin account borrow/repay(MARGIN)
         *
         *     Weight(UID): 3000
         */
        post: {
            parameters: {
                query: {
                    asset: components["parameters"]["asset"];
                    /** @description TRUE for isolated margin, FALSE for crossed margin */
                    isIsolated: string;
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    amount: components["parameters"]["amount"];
                    /** @description BORROW or REPAY */
                    type: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin account borrow/repay */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 100000001
                             */
                            tranId: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Cross Margin Transfer History (USER_DATA)
         * @description - Response in descending order
         *     - Returns data for last 7 days by default
         *     - Set `archived` to `true` to query data from 6 months ago
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    asset?: components["parameters"]["optionalAsset"];
                    type?: components["parameters"]["getCrossMargingTransferHistoryType"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description Isolated symbol */
                    isolatedSymbol?: components["parameters"]["isolatedSymbol"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin account transfer history, response in descending order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                amount: string;
                                asset: string;
                                status: string;
                                /** Format: int64 */
                                timestamp: number;
                                /** Format: int64 */
                                txId: number;
                                type: string;
                            }[];
                            /**
                             * Format: int32
                             * @example 3
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/allAssets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Margin Assets (MARKET_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    asset: components["parameters"]["asset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Assets details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Binance coin */
                            assetFullName: string;
                            /** @example BNB */
                            assetName: string;
                            isBorrowable: boolean;
                            isMortgageable: boolean;
                            /** @example 0.00000000 */
                            userMinBorrow: string;
                            /** @example 0.00000000 */
                            userMinRepay: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/allPairs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Cross Margin Pairs (MARKET_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin pairs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BNB */
                            base: string;
                            /**
                             * Format: int64
                             * @example 351637150141315840
                             */
                            id: number;
                            isBuyAllowed: boolean;
                            isMarginTrade: boolean;
                            isSellAllowed: boolean;
                            /** @example BTC */
                            quote: string;
                            /** @example BNBBTC */
                            symbol: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/priceIndex": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Margin PriceIndex (MARKET_DATA)
         * @description Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Price index */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1562046418000
                             */
                            calcTime: number;
                            /** @example 0.00333930 */
                            price: string;
                            /** @example BNBBTC */
                            symbol: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Margin Account's Order (USER_DATA)
         * @description - Either `orderId` or `origClientOrderId` must be sent.
         *     - For some historical orders `cummulativeQuoteQty` will be < 0, meaning the data is not available at this time.
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    /** @description Order id from client */
                    origClientOrderId?: components["parameters"]["origClientOrderId"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Interest History, response in descending order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["marginOrderDetail"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Margin Account New Order (TRADE)
         * @description Post a new order for margin account.
         *
         *     Weight(UID): 6
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    side: components["parameters"]["side"];
                    /** @description Order type */
                    type: components["parameters"]["orderType"];
                    quantity: components["parameters"]["quantity"];
                    /** @description Quote quantity */
                    quoteOrderQty?: components["parameters"]["quoteOrderQty"];
                    /** @description Order price */
                    price?: components["parameters"]["optionalPrice"];
                    /** @description Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
                    stopPrice?: components["parameters"]["stopPrice"];
                    /** @description Used to uniquely identify this cancel. Automatically generated by default */
                    newClientOrderId?: components["parameters"]["newClientOrderId"];
                    /** @description Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. */
                    icebergQty?: components["parameters"]["icebergQty"];
                    /** @description Set the response JSON. */
                    newOrderRespType?: components["parameters"]["ocoNewOrderRespType"];
                    /** @description Default `NO_SIDE_EFFECT` */
                    sideEffectType?: components["parameters"]["sideEffectType"];
                    /** @description Order time in force */
                    timeInForce?: components["parameters"]["timeInForce"];
                    autoRepayAtCancel: boolean;
                    /** @description The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. */
                    selfTradePreventionMode?: components["parameters"]["selfTradePreventionMode"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin order info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["marginOrderResponseAck"] | components["schemas"]["marginOrderResponseResult"] | components["schemas"]["marginOrderResponseFull"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        /**
         * Margin Account Cancel Order (TRADE)
         * @description Cancel an active order for margin account.
         *
         *     Either `orderId` or `origClientOrderId` must be sent.
         *
         *     Weight(IP): 10
         */
        delete: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    /** @description Order id from client */
                    origClientOrderId?: components["parameters"]["origClientOrderId"];
                    /** @description Used to uniquely identify this cancel. Automatically generated by default */
                    newClientOrderId?: components["parameters"]["newClientOrderId"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cancelled margin order details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["marginOrder"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/interestHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Interest History (USER_DATA)
         * @description - Response in descending order
         *     - If `isolatedSymbol` is not sent, crossed margin data will be returned
         *     - Set `archived` to `true` to query data from 6 months ago
         *     - `type` in response has 4 enums:
         *       - `PERIODIC` interest charged per hour
         *       - `ON_BORROW` first interest charged on borrow
         *       - `PERIODIC_CONVERTED` interest charged per hour converted into BNB
         *       - `ON_BORROW_CONVERTED` first interest charged on borrow converted into BNB
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    asset?: components["parameters"]["optionalAsset"];
                    /** @description Isolated symbol */
                    isolatedSymbol?: components["parameters"]["isolatedSymbol"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description Default: false. Set to true for archived data from 6 months ago */
                    archived?: components["parameters"]["archived"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Interest History, response in descending order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BNBUSDT */
                                isolatedSymbol: string;
                                /** @example BNB */
                                asset: string;
                                /** @example 0.01866667 */
                                interest: string;
                                /**
                                 * Format: int64
                                 * @example 1566813600
                                 */
                                interestAccuredTime: number;
                                /** @example 0.01600000 */
                                interestRate: string;
                                /** @example 36.22000000 */
                                principal: string;
                                /** @example ON_BORROW */
                                type: string;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/forceLiquidationRec": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Force Liquidation Record (USER_DATA)
         * @description - Response in descending order
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Isolated symbol */
                    isolatedSymbol?: components["parameters"]["isolatedSymbol"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Force Liquidation History, response in descending order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                avgPrice: string;
                                executedQty: string;
                                /** Format: int64 */
                                orderId: number;
                                price: string;
                                qty: string;
                                side: string;
                                symbol: string;
                                timeInForce: string;
                                isIsolated: boolean;
                                /** Format: int64 */
                                updatedTime: number;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Cross Margin Account Details (USER_DATA)
         * @description Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin account details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            created: boolean;
                            /** @example true */
                            borrowEnabled: boolean;
                            /** @example 11.64405625 */
                            marginLevel: string;
                            /** @example 3.2 */
                            collateralMarginLevel: string;
                            /** @example 6.82728457 */
                            totalAssetOfBtc: string;
                            /** @example 0.58633215 */
                            totalLiabilityOfBtc: string;
                            /** @example 6.24095242 */
                            totalNetAssetOfBtc: string;
                            /** @example 5.82728457 */
                            TotalCollateralValueInUSDT: string;
                            tradeEnabled: boolean;
                            transferInEnabled: boolean;
                            transferOutEnabled: boolean;
                            /** @example MARGIN_1 */
                            accountType: string;
                            userAssets: {
                                /** @example BTC */
                                asset: string;
                                /** @example 0.00000000 */
                                borrowed: string;
                                /** @example 0.00499500 */
                                free: string;
                                /** @example 0.00000000 */
                                interest: string;
                                /** @example 0.00000000 */
                                locked: string;
                                /** @example 0.00499500 */
                                netAsset: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/openOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Margin Account's Open Orders (USER_DATA)
         * @description - If the `symbol` is not sent, orders for all symbols will be returned in an array.
         *     - When all symbols are returned, the number of requests counted against the rate limiter is equal to the number of symbols currently trading on the exchange
         *     - If isIsolated ="TRUE", symbol must be sent.
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol?: components["parameters"]["optionalSymbol"];
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin open orders list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["marginOrderDetail"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Margin Account Cancel all Open Orders on a Symbol (TRADE)
         * @description - Cancels all active orders on a symbol for margin account.
         *     - This includes OCO orders.
         *
         *     Weight(IP): 1
         *
         */
        delete: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cancelled margin orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": (components["schemas"]["canceledMarginOrderDetail"] | components["schemas"]["marginOcoOrder"])[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/allOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Margin Account's All Orders (USER_DATA)
         * @description - If `orderId` is set, it will get orders >= that orderId. Otherwise most recent orders are returned.
         *     - For some historical orders `cummulativeQuoteQty` will be < 0, meaning the data is not available at this time.
         *
         *     Weight(IP): 200
         *
         *     Request Limit: 60 times/min per IP
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin order list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["marginOrderDetail"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/order/oco": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Margin Account New OCO (TRADE)
         * @description Send in a new OCO for a margin account
         *
         *     - Price Restrictions:
         *       - SELL: Limit Price > Last Price > Stop Price
         *       - BUY: Limit Price < Last Price < Stop Price
         *     - Quantity Restrictions:
         *       - Both legs must have the same quantity
         *       - ICEBERG quantities however do not have to be the same.
         *     - Order Rate Limit
         *       - OCO counts as 2 orders against the order rate limit.
         *
         *     Weight(UID): 6
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description A unique Id for the entire orderList */
                    listClientOrderId?: components["parameters"]["listClientOrderId"];
                    side: components["parameters"]["side"];
                    quantity: components["parameters"]["quantity"];
                    /** @description A unique Id for the limit order */
                    limitClientOrderId?: components["parameters"]["limitClientOrderId"];
                    /** @description Order price */
                    price: components["parameters"]["price"];
                    limitIcebergQty?: components["parameters"]["limitIcebergQty"];
                    /** @description A unique Id for the stop loss/stop loss limit leg */
                    stopClientOrderId?: components["parameters"]["stopClientOrderId"];
                    stopPrice: components["parameters"]["ocoStopPrice"];
                    /** @description If provided, stopLimitTimeInForce is required. */
                    stopLimitPrice?: components["parameters"]["stopLimitPrice"];
                    stopIcebergQty?: components["parameters"]["stopIcebergQty"];
                    stopLimitTimeInForce?: components["parameters"]["stopLimitTimeInForce"];
                    /** @description Set the response JSON. */
                    newOrderRespType?: components["parameters"]["ocoNewOrderRespType"];
                    /** @description Default `NO_SIDE_EFFECT` */
                    sideEffectType?: components["parameters"]["sideEffectType"];
                    /** @description The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. */
                    selfTradePreventionMode?: components["parameters"]["selfTradePreventionMode"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description New Margin OCO details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            orderListId: number;
                            /** @example OCO */
                            contingencyType: string;
                            /** @example EXEC_STARTED */
                            listStatusType: string;
                            /** @example EXECUTING */
                            listOrderStatus: string;
                            /** @example JYVpp3F0f5CAG15DhtrqLp */
                            listClientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1563417480525
                             */
                            transactionTime: number;
                            /** @example LTCBTC */
                            symbol: string;
                            /**
                             * @description will not return if no margin trade happens
                             * @example 5
                             */
                            marginBuyBorrowAmount: string;
                            /**
                             * @description will not return if no margin trade happens
                             * @example BTC
                             */
                            marginBuyBorrowAsset: string;
                            /** @example false */
                            isIsolated: boolean;
                            /** @example [
                             *       {
                             *         "symbol": "LTCBTC",
                             *         "orderId": 2,
                             *         "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos"
                             *       },
                             *       {
                             *         "symbol": "LTCBTC",
                             *         "orderId": 3,
                             *         "clientOrderId": "xTXKaGYd4bluPVp78IVRvl"
                             *       }
                             *     ] */
                            orders: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                clientOrderId: string;
                            }[];
                            /** @example [
                             *       {
                             *         "symbol": "LTCBTC",
                             *         "orderId": 2,
                             *         "orderListId": 0,
                             *         "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos",
                             *         "transactTime": 1563417480525,
                             *         "price": "0.000000",
                             *         "origQty": "0.624363",
                             *         "executedQty": "0.000000",
                             *         "cummulativeQuoteQty": "0.000000",
                             *         "status": "NEW",
                             *         "timeInForce": "GTC",
                             *         "type": "STOP_LOSS",
                             *         "side": "BUY",
                             *         "stopPrice": "0.960664"
                             *       },
                             *       {
                             *         "symbol": "LTCBTC",
                             *         "orderId": 3,
                             *         "orderListId": 0,
                             *         "clientOrderId": "xTXKaGYd4bluPVp78IVRvl",
                             *         "transactTime": 1563417480525,
                             *         "price": "0.036435",
                             *         "origQty": "0.624363",
                             *         "executedQty": "0.000000",
                             *         "cummulativeQuoteQty": "0.000000",
                             *         "status": "NEW",
                             *         "timeInForce": "GTC",
                             *         "type": "LIMIT_MAKER",
                             *         "side": "BUY"
                             *       }
                             *     ] */
                            orderReports: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                /** Format: int64 */
                                orderListId: number;
                                clientOrderId: string;
                                /** Format: int64 */
                                transactTime: number;
                                price: string;
                                origQty: string;
                                executedQty: string;
                                cummulativeQuoteQty: string;
                                status: string;
                                timeInForce: string;
                                type: string;
                                side: string;
                                stopPrice: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/orderList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Margin Account's OCO (USER_DATA)
         * @description Retrieves a specific OCO based on provided optional parameters
         *
         *     - Either `orderListId` or `origClientOrderId` must be provided
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description Mandatory for isolated margin, not supported for cross margin */
                    symbol?: string;
                    /** @description Order list id */
                    orderListId?: components["parameters"]["orderListId"];
                    /** @description Order id from client */
                    origClientOrderId?: components["parameters"]["origClientOrderId"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin OCO details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 27
                             */
                            orderListId: number;
                            /** @example OCO */
                            contingencyType: string;
                            /** @example EXEC_STARTED */
                            listStatusType: string;
                            /** @example EXECUTING */
                            listOrderStatus: string;
                            /** @example h2USkA5YQpaXHPIrkd96xE */
                            listClientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1565245656253
                             */
                            transactionTime: number;
                            /** @example LTCBTC */
                            symbol: string;
                            /** @example false */
                            isIsolated: boolean;
                            orders: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                clientOrderId: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Margin Account Cancel OCO (TRADE)
         * @description Cancel an entire Order List for a margin account
         *
         *     - Canceling an individual leg will cancel the entire OCO
         *     - Either `orderListId` or `listClientOrderId` must be provided
         *
         *     Weight(UID): 1
         */
        delete: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description Order list id */
                    orderListId?: components["parameters"]["orderListId"];
                    /** @description A unique Id for the entire orderList */
                    listClientOrderId?: components["parameters"]["listClientOrderId"];
                    /** @description Used to uniquely identify this cancel. Automatically generated by default */
                    newClientOrderId?: components["parameters"]["newClientOrderId"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin OCO details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["marginOcoOrder"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/allOrderList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Margin Account's all OCO (USER_DATA)
         * @description Retrieves all OCO for a specific margin account based on provided optional parameters
         *
         *     Weight(IP): 200
         */
        get: {
            parameters: {
                query: {
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description Mandatory for isolated margin, not supported for cross margin */
                    symbol?: string;
                    /** @description If supplied, neither `startTime` or `endTime` can be provided */
                    fromId?: string;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default Value: 500; Max Value: 1000 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of Margin OCO orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 29
                             */
                            orderListId: number;
                            /** @example OCO */
                            contingencyType: string;
                            /** @example EXEC_STARTED */
                            listStatusType: string;
                            /** @example EXECUTING */
                            listOrderStatus: string;
                            /** @example amEEAXryFzFwYF1FeRpUoZ */
                            listClientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1565245913483
                             */
                            transactionTime: number;
                            /** @example LTCBTC */
                            symbol: string;
                            isIsolated: boolean;
                            orders: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                clientOrderId: string;
                            }[];
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/openOrderList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Margin Account's Open OCO (USER_DATA)
         * @description Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description Mandatory for isolated margin, not supported for cross margin */
                    symbol?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of Open Margin OCO orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 31
                             */
                            orderListId: number;
                            /** @example OCO */
                            contingencyType: string;
                            /** @example EXEC_STARTED */
                            listStatusType: string;
                            /** @example EXECUTING */
                            listOrderStatus: string;
                            /** @example wuB13fmulKj3YjdqWEcsnp */
                            listClientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1565246080644
                             */
                            transactionTime: number;
                            /** @example LTCBTC */
                            symbol: string;
                            /** @example false */
                            isIsolated: boolean;
                            orders: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                clientOrderId: string;
                            }[];
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/myTrades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Margin Account's Trade List (USER_DATA)
         * @description - If `fromId` is set, it will get orders >= that `fromId`. Otherwise most recent trades are returned.
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Trade id to fetch from. Default gets most recent trades. */
                    fromId?: components["parameters"]["fromId"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of margin trades */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["marginTrade"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/maxBorrowable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Max Borrow (USER_DATA)
         * @description - If `isolatedSymbol` is not sent, crossed margin data will be sent.
         *     - `borrowLimit` is also available from https://www.binance.com/en/margin-fee
         *
         *     Weight(IP): 50
         */
        get: {
            parameters: {
                query: {
                    asset: components["parameters"]["asset"];
                    /** @description Isolated symbol */
                    isolatedSymbol?: components["parameters"]["isolatedSymbol"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Details on max borrow amount */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description account's currently max borrowable amount with sufficient system availability
                             * @example 1.69248805
                             */
                            amount: string;
                            /**
                             * @description max borrowable amount limited by the account level
                             * @example 60
                             */
                            borrowLimit: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/maxTransferable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Max Transfer-Out Amount (USER_DATA)
         * @description - If `isolatedSymbol` is not sent, crossed margin data will be sent.
         *
         *     Weight(IP): 50
         */
        get: {
            parameters: {
                query: {
                    asset: components["parameters"]["asset"];
                    /** @description Isolated symbol */
                    isolatedSymbol?: components["parameters"]["isolatedSymbol"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Details on max transferable amount */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Account's currently max borrowable amount with sufficient system availability */
                            amount: string;
                            /** @description Max borrowable amount limited by the account level */
                            borrowLimit: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/tradeCoeff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Summary of Margin account (USER_DATA)
         * @description Get personal margin level information
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Email Address */
                    email: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Summary of Margin Account */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Account's currently max borrowable amount with sufficient system availability
                             * @example 1.5
                             */
                            normalBar?: string;
                            /**
                             * @description Max borrowable amount limited by the account level
                             * @example 1.3
                             */
                            marginCallBar?: string;
                            /**
                             * @description Liquidation Margin Ratio
                             * @example 1.1
                             */
                            forceLiquidationBar?: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/isolated/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Isolated Margin Account Info (USER_DATA)
         * @description - If "symbols" is not sent, all isolated assets will be returned.
         *     - If "symbols" is sent, only the isolated assets of the sent symbols will be returned.
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Max 5 symbols can be sent; separated by ',' */
                    symbols?: components["parameters"]["symbols"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Isolated Margin Account Info when "symbols" is not sent */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["isolatedMarginAccountInfo"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Enable Isolated Margin Account (TRADE)
         * @description Enable isolated margin account for a specific symbol.
         *
         *     Weight(UID): 300
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Isolated Margin Account status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            /** @example BTCUSDT */
                            symbol: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        /**
         * Disable Isolated Margin Account (TRADE)
         * @description Disable isolated margin account for a specific symbol. Each trading pair can only be deactivated once every 24 hours .
         *
         *     Weight(UID): 300
         */
        delete: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Isolated Margin Account status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            /** @example BTCUSDT */
                            symbol: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/isolated/accountLimit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Enabled Isolated Margin Account Limit (USER_DATA)
         * @description Query enabled isolated margin account limit.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Number of enabled Isolated Margin Account and its limit */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 5
                             */
                            enabledAccount: number;
                            /**
                             * Format: int64
                             * @example 20
                             */
                            maxAccount: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/isolated/allPairs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Isolated Margin Symbol(USER_DATA)
         * @description Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All Isolated Margin Symbols */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTCUSDT */
                            symbol: string;
                            /** @example BTC */
                            base: string;
                            /** @example USDT */
                            quote: string;
                            isMarginTrade: boolean;
                            isBuyAllowed: boolean;
                            isSellAllowed: boolean;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/bnbBurn": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get BNB Burn Status(USER_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Status on BNB to pay for trading fees */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["bnbBurnStatus"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)
         * @description - "spotBNBBurn" and "interestBNBBurn" should be sent at least one.
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Determines whether to use BNB to pay for trading fees on SPOT */
                    spotBNBBurn?: "true" | "false";
                    /** @description Determines whether to use BNB to pay for margin loan's interest */
                    interestBNBBurn?: "true" | "false";
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Status on BNB to pay for trading fees */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["bnbBurnStatus"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/interestRateHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Margin Interest Rate History (USER_DATA)
         * @description The max interval between startTime and endTime is 30 days.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    asset: components["parameters"]["asset"];
                    /** @description Defaults to user's vip level */
                    vipLevel?: components["parameters"]["vipLevel"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin Interest Rate History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTC */
                            asset: string;
                            /** @example 0.00025000 */
                            dailyInterestRate: string;
                            /**
                             * Format: int64
                             * @example 1611544731000
                             */
                            timestamp: number;
                            /**
                             * Format: int32
                             * @example 1
                             */
                            vipLevel: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/crossMarginData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Cross Margin Fee Data (USER_DATA)
         * @description Get cross margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee
         *
         *     Weight(IP): 1 when coin is specified; 5 when the coin parameter is omitted
         */
        get: {
            parameters: {
                query: {
                    /** @description Defaults to user's vip level */
                    vipLevel?: components["parameters"]["vipLevel"];
                    /** @description Coin name */
                    coin?: components["parameters"]["optionalCoin"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cross Margin Fee Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 0
                             */
                            vipLevel: number;
                            /** @example BTC */
                            coin: string;
                            transferIn: boolean;
                            borrowable: boolean;
                            /** @example 0.00026125 */
                            dailyInterest: string;
                            /** @example 0.0953 */
                            yearlyInterest: string;
                            /** @example 180 */
                            borrowLimit: string;
                            /** @example [
                             *       "BNBBTC",
                             *       "TRXBTC",
                             *       "ETHBTC",
                             *       "BTCUSDT"
                             *     ] */
                            marginablePairs: string[];
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/isolatedMarginData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Isolated Margin Fee Data (USER_DATA)
         * @description Get isolated margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee
         *
         *     Weight(IP): 1 when a single is specified; 10 when the symbol parameter is omitted
         */
        get: {
            parameters: {
                query: {
                    /** @description Defaults to user's vip level */
                    vipLevel?: components["parameters"]["vipLevel"];
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol?: components["parameters"]["optionalSymbol"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Isolated Margin Fee Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 0
                             */
                            vipLevel?: number;
                            /** @example BTCUSDT */
                            symbol?: string;
                            /** @example 10 */
                            leverage?: string;
                            /** @example [
                             *       {
                             *         "coin": "BTC",
                             *         "dailyInterest": "0.00026125",
                             *         "borrowLimit": "270"
                             *       },
                             *       {
                             *         "coin": "USDT",
                             *         "dailyInterest": "0.000475",
                             *         "borrowLimit": "2100000"
                             *       }
                             *     ] */
                            data?: {
                                coin?: string;
                                dailyInterest?: string;
                                borrowLimit?: string;
                            }[];
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/isolatedMarginTier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Isolated Margin Tier Data (USER_DATA)
         * @description Get isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description All margin tier data will be returned if tier is omitted */
                    tier?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Isolated Margin Tier Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTCUSDT */
                            symbol?: string;
                            /**
                             * Format: int32
                             * @example 1
                             */
                            tier?: number;
                            /** @example 10 */
                            effectiveMultiple?: string;
                            /** @example 1.111 */
                            initialRiskRatio?: string;
                            /** @example 1.05 */
                            liquidationRiskRatio?: string;
                            /** @example 9 */
                            baseAssetMaxBorrowable?: string;
                            /** @example 70000 */
                            quoteAssetMaxBorrowable?: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/rateLimit/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Current Margin Order Count Usage (TRADE)
         * @description Displays the user's current margin order count usage for all intervals.
         *
         *     Weight(IP): 20
         */
        get: {
            parameters: {
                query: {
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["optionalIsIsolated"];
                    /** @description isolated symbol, mandatory for isolated margin */
                    symbol?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Usage. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ORDERS */
                            rateLimitType: string;
                            /** @example SECOND */
                            interval: string;
                            /**
                             * Format: int64
                             * @example 10
                             */
                            intervalNum: number;
                            /**
                             * Format: int64
                             * @example 10000
                             */
                            limit: number;
                            /**
                             * Format: int64
                             * @example 0
                             */
                            count: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/crossMarginCollateralRatio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Cross margin collateral ratio (MARKET_DATA)
         * @description
         *     Weight(IP): 100
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin collateral ratio */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            collaterals: {
                                /** @example 0 */
                                minUsdValue: string;
                                /** @example 13000000 */
                                maxUsdValue: string;
                                /** @example 1 */
                                discountRate: string;
                            }[];
                            assetNames: string[];
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/exchange-small-liability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Small Liability Exchange Coin List (USER_DATA)
         * @description Query the coins which can be small liability exchange
         *
         *     Weight(UID): 100
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description coin list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ETH */
                            asset: string;
                            /** @example 0.00083334 */
                            interest: string;
                            /** @example 0.001 */
                            principal: string;
                            /** @example USDT */
                            liabilityAsset: string;
                            /**
                             * Format: float
                             * @example 0.3552
                             */
                            liabilityQty: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/exchange-small-liability-history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Small Liability Exchange History (USER_DATA)
         * @description Get Small liability Exchange History
         *
         *     Weight(UID): 100
         */
        get: {
            parameters: {
                query: {
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description coin list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            total: number;
                            rows: {
                                /** @example ETH */
                                asset: string;
                                /** @example 0.00083434 */
                                amount: string;
                                /** @example BUSD */
                                targetAsset: string;
                                /** @example 1.37576819 */
                                targetAmount: string;
                                /** @example EXCHANGE_SMALL_LIABILITY */
                                bizType: string;
                                /**
                                 * Format: int64
                                 * @example 1672801339253
                                 */
                                timestamp: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/next-hourly-interest-rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a future hourly interest rate (USER_DATA)
         * @description Get user the next hourly estimate interest
         *
         *     Weight(UID): 100
         */
        get: {
            parameters: {
                query: {
                    /** @description List of assets, separated by commas, up to 20 */
                    assets?: string;
                    /** @description for isolated margin or not, "TRUE", "FALSE" */
                    isIsolated?: "TRUE" | "FALSE";
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description hourly interest */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTC */
                            asset: string;
                            /** @example 0.00000571 */
                            nextHourlyInterestRate: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/capital-flow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cross or isolated margin capital flow(USER_DATA)
         * @description Get cross or isolated margin capital flow
         *
         *     Weight(IP): 100
         */
        get: {
            parameters: {
                query: {
                    asset?: components["parameters"]["optionalAsset"];
                    /** @description Required when querying isolated data */
                    symbol?: string;
                    type?: "TRANSFER" | "BORROW" | "REPAY" | "BUY_INCOME" | "BUY_EXPENSE" | "SELL_INCOME" | "SELL_EXPENSE" | "TRADING_COMMISSION" | "BUY_LIQUIDATION" | "SELL_LIQUIDATION" | "REPAY_LIQUIDATION" | "OTHER_LIQUIDATION" | "LIQUIDATION_FEE" | "SMALL_BALANCE_CONVERT" | "COMMISSION_RETURN" | "SMALL_CONVERT";
                    /** @description Only supports querying the data of the last 90 days */
                    startTime?: number;
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description If fromId is set, the data with id > fromId will be returned. Otherwise the latest data will be returned */
                    fromId?: number;
                    /** @description The number of data items returned each time is limited. Default 500; Max 1000. */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin capital flow */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 123456
                             */
                            id: number;
                            /**
                             * Format: int64
                             * @example 123123
                             */
                            tranId: number;
                            /**
                             * Format: int64
                             * @example 1691116657000
                             */
                            timestamp: number;
                            /** @example USDT */
                            asset: string;
                            /** @example BTCUSDT */
                            symbol: string;
                            /** @example BORROW */
                            type: string;
                            /** @example 101 */
                            amount: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/delist-schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tokens or symbols delist schedule for cross margin and isolated margin (MARKET_DATA)
         * @description Get tokens or symbols delist schedule for cross margin and isolated margin
         *
         *     Weight(IP): 100
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description tokens or symbols delist schedule */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1686161202000
                             */
                            delistTime?: number;
                            crossMarginAssets?: string[];
                            isolatedMarginSymbols?: string[];
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/available-inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Margin Available Inventory (USER_DATA)
         * @description Margin available Inventory query
         *
         *     Weight(UID): 50
         */
        get: {
            parameters: {
                query: {
                    type: "MARGIN" | "ISOLATED";
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin available Inventory */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            assets: {
                                /** @example 100000000 */
                                MATIC: string;
                                /** @example 100000000 */
                                STPT: string;
                                /** @example 100000000 */
                                TVK: string;
                                /** @example 97409653 */
                                SHIB: string;
                            };
                            /**
                             * Format: int64
                             * @example 1699272487
                             */
                            updateTime: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/manual-liquidation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Margin manual liquidation(MARGIN)
         * @description Margin manual liquidation
         *
         *     Weight(UID): 3000
         */
        post: {
            parameters: {
                query: {
                    type: "MARGIN" | "ISOLATED";
                    symbol?: string;
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin manual liquidation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ETH */
                            asset: string;
                            /** @example 0.00083334 */
                            interest: string;
                            /** @example 0.001 */
                            principal: string;
                            /** @example USDT */
                            liabilityAsset: string;
                            /**
                             * Format: float
                             * @example 0.3552
                             */
                            liabilityQty: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/order/oto": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Margin Account New OTO (TRADE)
         * @description Post a new `OTO` order for margin account:
         *     - An `OTO` (One-Triggers-the-Other) is an order list comprised of 2 orders
         *     - The first order is called the working order and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
         *     - The second order is called the pending order. It can be any order type except for `MARKET` orders using parameter `quoteOrderQty`. The pending order is only placed on the order book when the working order gets fully filled.
         *     - If either the working order or the pending order is cancelled individually, the other order in the order list will also be canceled or expired.
         *     - When the order list is placed, if the working order gets immediately fully filled, the placement response will show the working order as `FILLED` but the pending order will still appear as `PENDING_NEW`. You need to query the status of the pending order again to see its updated status.
         *     - OTOs add 2 orders to the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter and `MAX_NUM_ORDERS` filter.
         *
         *     Weight(UID): 6
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description Arbitrary unique ID among open order lists. Automatically generated if not sent.
                     *     A new order list with the same `listClientOrderId` is accepted only when the previous one is filled or completely expired.
                     *     `listClientOrderId` is distinct from the `workingClientOrderId` and the `pendingClientOrderId`. */
                    listClientOrderId?: string;
                    /** @description Set the response JSON. */
                    newOrderRespType?: components["parameters"]["ocoNewOrderRespType"];
                    /** @description Default `NO_SIDE_EFFECT` */
                    sideEffectType?: "NO_SIDE_EFFECT" | "MARGIN_BUY";
                    /** @description The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. */
                    selfTradePreventionMode?: components["parameters"]["selfTradePreventionMode"];
                    /** @description Only when MARGIN_BUY order takes effect, true means that the debt generated by the order needs to be repay after the order is cancelled. The default is true */
                    autoRepayAtCancel?: boolean;
                    /** @description Supported values: LIMIT,LIMIT_MAKER */
                    workingType: components["parameters"]["workingType"];
                    /** @description BUY,SELL */
                    workingSide: components["parameters"]["workingSide"];
                    /** @description Arbitrary unique ID among open orders for the working order. Automatically generated if not sent. */
                    workingClientOrderId?: components["parameters"]["workingClientOrderId"];
                    workingPrice: components["parameters"]["workingPrice"];
                    /** @description Sets the quantity for the working order. */
                    workingQuantity: components["parameters"]["workingQuantity"];
                    /** @description This can only be used if workingTimeInForce is GTC. */
                    workingIcebergQty: components["parameters"]["workingIcebergQty"];
                    /** @description GTC, IOC, FOK */
                    workingTimeInForce?: components["parameters"]["workingTimeInForce"];
                    /** @description Supported values: Order Types Note that MARKET orders using quoteOrderQty are not supported. */
                    pendingType: components["parameters"]["pendingType"];
                    /** @description BUY,SELL */
                    pendingSide: components["parameters"]["pendingSide"];
                    /** @description Arbitrary unique ID among open orders for the pending order. Automatically generated if not sent. */
                    pendingClientOrderId?: components["parameters"]["pendingClientOrderId"];
                    pendingPrice?: components["parameters"]["pendingPrice"];
                    pendingStopPrice?: components["parameters"]["pendingStopPrice"];
                    pendingTrailingDelta?: components["parameters"]["pendingTrailingDelta"];
                    /** @description Sets the quantity for the pending order. */
                    pendingQuantity: components["parameters"]["pendingQuantity"];
                    /** @description This can only be used if pendingTimeInForce is GTC. */
                    pendingIcebergQty?: components["parameters"]["pendingIcebergQty"];
                    /** @description GTC, IOC, FOK */
                    pendingTimeInForce?: components["parameters"]["pendingTimeInForce"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OTO order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 13551
                             */
                            orderListId: number;
                            /** @example OTO */
                            contingencyType: string;
                            /** @example EXEC_STARTED */
                            listStatusType: string;
                            /** @example EXECUTING */
                            listOrderStatus: string;
                            /** @example JDuOrsu0Ge8GTyvx8J7VTD */
                            listClientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1725521998054
                             */
                            transactionTime: number;
                            /** @example BTCUSDT */
                            symbol: string;
                            /** @example false */
                            isIsolated: boolean;
                            orders: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                clientOrderId: string;
                            }[];
                            orderReports: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                /** Format: int64 */
                                orderListId: number;
                                clientOrderId: string;
                                /** Format: int64 */
                                transactTime: number;
                                price: string;
                                origQty: string;
                                executedQty: string;
                                cummulativeQuoteQty: string;
                                status: string;
                                timeInForce: string;
                                type: string;
                                side: string;
                                selfTradePreventionMode: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/order/otoco": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Margin Account New OTOCO (TRADE)
         * @description Post a new `OTOCO` order for margin account:
         *     - An `OTOCO` (One-Triggers-the-Other-Cancel-the-Other) is an order list comprised of 3 orders
         *     - The first order is called the working order and must be `LIMIT` or `LIMIT_MAKER`. Initially, only the working order goes on the order book.
         *       - The behavior of the working order is the same as the `OTO`.
         *     - `OTOCO` has 2 pending orders (pending above and pending below), forming an `OCO` pair. The pending orders are only placed on the order book when the working order gets fully filled.
         *       - The rules of the pending above and pending below follow the same rules as the Order List `OCO`.
         *     - OTOCOs add 3 orders to the unfilled order count, `EXCHANGE_MAX_NUM_ORDERS` filter and `MAX_NUM_ORDERS` filter.
         *
         *     Weight(UID): 6
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    /** @description * `TRUE` - For isolated margin
                     *     * `FALSE` - Default, not for isolated margin */
                    isIsolated?: components["parameters"]["isIsolatedMargin"];
                    /** @description Default `NO_SIDE_EFFECT` */
                    sideEffectType?: "NO_SIDE_EFFECT" | "MARGIN_BUY";
                    /** @description Only when MARGIN_BUY order takes effect, true means that the debt generated by the order needs to be repay after the order is cancelled. The default is true */
                    autoRepayAtCancel?: boolean;
                    /** @description Arbitrary unique ID among open order lists. Automatically generated if not sent.
                     *     A new order list with the same `listClientOrderId` is accepted only when the previous one is filled or completely expired.
                     *     `listClientOrderId` is distinct from the `workingClientOrderId` and the `pendingClientOrderId`. */
                    listClientOrderId?: string;
                    /** @description Set the response JSON. */
                    newOrderRespType?: components["parameters"]["ocoNewOrderRespType"];
                    /** @description The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. */
                    selfTradePreventionMode?: components["parameters"]["selfTradePreventionMode"];
                    /** @description Supported values: LIMIT,LIMIT_MAKER */
                    workingType: components["parameters"]["workingType"];
                    /** @description BUY,SELL */
                    workingSide: components["parameters"]["workingSide"];
                    /** @description Arbitrary unique ID among open orders for the working order. Automatically generated if not sent. */
                    workingClientOrderId?: components["parameters"]["workingClientOrderId"];
                    workingPrice: components["parameters"]["workingPrice"];
                    /** @description Sets the quantity for the working order. */
                    workingQuantity: components["parameters"]["workingQuantity"];
                    /** @description This can only be used if workingTimeInForce is GTC. */
                    workingIcebergQty: components["parameters"]["workingIcebergQty"];
                    /** @description GTC, IOC, FOK */
                    workingTimeInForce?: components["parameters"]["workingTimeInForce"];
                    /** @description BUY,SELL */
                    pendingSide: components["parameters"]["pendingSide"];
                    /** @description Sets the quantity for the pending order. */
                    pendingQuantity: components["parameters"]["pendingQuantity"];
                    /** @description Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT */
                    pendingAboveType: components["parameters"]["pendingAboveType"];
                    /** @description Arbitrary unique ID among open orders for the pending above order. Automatically generated if not sent. */
                    pendingAboveClientOrderId?: components["parameters"]["pendingAboveClientOrderId"];
                    pendingAbovePrice?: components["parameters"]["pendingAbovePrice"];
                    pendingAboveStopPrice?: components["parameters"]["pendingAboveStopPrice"];
                    pendingAboveTrailingDelta?: components["parameters"]["pendingAboveTrailingDelta"];
                    /** @description This can only be used if pendingAboveTimeInForce is GTC. */
                    pendingAboveIcebergQty?: components["parameters"]["pendingAboveIcebergQty"];
                    pendingAboveTimeInForce?: components["parameters"]["pendingAboveTimeInForce"];
                    /** @description Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT */
                    pendingBelowType?: components["parameters"]["pendingBelowType"];
                    /** @description Arbitrary unique ID among open orders for the pending below order. Automatically generated if not sent. */
                    pendingBelowClientOrderId?: components["parameters"]["pendingBelowClientOrderId"];
                    pendingBelowPrice?: components["parameters"]["pendingBelowPrice"];
                    pendingBelowStopPrice?: components["parameters"]["pendingBelowStopPrice"];
                    pendingBelowTrailingDelta?: components["parameters"]["pendingBelowTrailingDelta"];
                    /** @description This can only be used if pendingBelowTimeInForce is GTC. */
                    pendingBelowIcebergQty?: components["parameters"]["pendingBelowIcebergQty"];
                    pendingBelowTimeInForce?: components["parameters"]["pendingBelowTimeInForce"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OTOCO order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 13551
                             */
                            orderListId: number;
                            /** @example OTOCO */
                            contingencyType: string;
                            /** @example EXEC_STARTED */
                            listStatusType: string;
                            /** @example EXECUTING */
                            listOrderStatus: string;
                            /** @example u2AUo48LLef5qVenRtwJZy */
                            listClientOrderId: string;
                            /**
                             * Format: int64
                             * @example 1725521881300
                             */
                            transactionTime: number;
                            /** @example BNBUSDT */
                            symbol: string;
                            /** @example false */
                            isIsolated: boolean;
                            orders: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                clientOrderId: string;
                            }[];
                            orderReports: {
                                symbol: string;
                                /** Format: int64 */
                                orderId: number;
                                /** Format: int64 */
                                orderListId: number;
                                clientOrderId: string;
                                /** Format: int64 */
                                transactTime: number;
                                price: string;
                                origQty: string;
                                executedQty: string;
                                cummulativeQuoteQty: string;
                                status: string;
                                timeInForce: string;
                                type: string;
                                side: string;
                                selfTradePreventionMode: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/max-leverage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Adjust cross margin max leverage (USER_DATA)
         * @description Adjust cross margin max leverage
         *
         *     Weight(UID): 3000
         */
        post: {
            parameters: {
                query: {
                    /** @description Can only adjust 3 or 5 */
                    maxLeverage: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Adjust result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/margin/leverageBracket": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Liability Coin Leverage Bracket in Cross Margin Pro Mode (MARKET_DATA)
         * @description Liability Coin Leverage Bracket in Cross Margin Pro Mode
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Leverage info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            assetNames: string[];
                            /** @example 1 */
                            rank: number;
                            brackets: {
                                /** @example 10 */
                                leverage?: number;
                                /**
                                 * Format: double
                                 * @example 1000000
                                 */
                                maxDebt?: number;
                                /**
                                 * Format: double
                                 * @example 0.02
                                 */
                                maintenanceMarginRate?: number;
                                /**
                                 * Format: double
                                 * @example 0.1112
                                 */
                                initialMarginRate?: number;
                                /**
                                 * Format: double
                                 * @example 60000
                                 */
                                fastNum?: number;
                            }[];
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/system/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * System Status (System)
         * @description Fetch system status.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @description 0: normal, 1：system maintenance
                             * @example 0
                             */
                            status: number;
                            /**
                             * @description "normal", "system_maintenance"
                             * @example normal
                             */
                            msg: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/capital/config/getall": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * All Coins' Information (USER_DATA)
         * @description Get information of coins (available for deposit and withdraw) for user.
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All coins details information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTC */
                            coin: string;
                            depositAllEnable: boolean;
                            /** @example 0.00000000 */
                            free: string;
                            /** @example 0.00000000 */
                            freeze: string;
                            /** @example 0.00000000 */
                            ipoable: string;
                            /** @example 0.00000000 */
                            ipoing: string;
                            /** @example false */
                            isLegalMoney: boolean;
                            /** @example 0.00000000 */
                            locked: string;
                            /** @example Bitcoin */
                            name: string;
                            networkList: {
                                /** @example ^(bnb1)[0-9a-z]{38}$ */
                                addressRegex: string;
                                /** @example BTC */
                                coin: string;
                                /**
                                 * @description shown only when "depositEnable" is false.
                                 * @example Wallet Maintenance, Deposit Suspended
                                 */
                                depositDesc: string;
                                /** @example false */
                                depositEnable: boolean;
                                /** @example false */
                                isDefault: boolean;
                                /** @example ^[0-9A-Za-z\-_]{1,120}$ */
                                memoRegex: string;
                                /**
                                 * Format: int64
                                 * @description min number for balance confirmation.
                                 * @example 1
                                 */
                                minConfirm: number;
                                /** @example BEP2 */
                                name: string;
                                /** @example ETH */
                                network: string;
                                /** @example Both a MEMO and an Address are required to successfully deposit your BEP2-BTCB tokens to Binance. */
                                specialTips: string;
                                /**
                                 * Format: int64
                                 * @description confirmation number for balance unlock.
                                 * @example 0
                                 */
                                unLockConfirm: number;
                                /**
                                 * @description shown only when "withdrawEnable" is false
                                 * @example Wallet Maintenance, Withdrawal Suspended
                                 */
                                withdrawDesc: string;
                                /** @example false */
                                withdrawEnable: boolean;
                                /** @example 0.00000220 */
                                withdrawFee: string;
                                /** @example 0.00000001 */
                                withdrawIntegerMultiple: string;
                                /** @example 9999999999.99999999 */
                                withdrawMax: string;
                                /** @example 0.00000440 */
                                withdrawMin: string;
                                sameAddress: boolean;
                            }[];
                            /** @example 0.00000000 */
                            storage: string;
                            trading: boolean;
                            withdrawAllEnable: boolean;
                            /** @example 0.00000000 */
                            withdrawing: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/accountSnapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Daily Account Snapshot (USER_DATA)
         * @description - The query time period must be less than 30 days
         *     - Support query within the last one month only
         *     - If startTimeand endTime not sent, return records of the last 7 days by default
         *
         *     Weight(IP): 2400
         */
        get: {
            parameters: {
                query: {
                    type: "SPOT" | "MARGIN" | "FUTURES";
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Account Snapshot */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["snapshotSpot"] | components["schemas"]["snapshotMargin"] | components["schemas"]["snapshotFutures"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/account/disableFastWithdrawSwitch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable Fast Withdraw Switch (USER_DATA)
         * @description - This request will disable fastwithdraw switch under your account.
         *     - You need to enable "trade" option for the api key which requests this endpoint.
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/account/enableFastWithdrawSwitch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable Fast Withdraw Switch (USER_DATA)
         * @description - This request will enable fastwithdraw switch under your account. You need to enable "trade" option for the api key which requests this endpoint.
         *     - When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/capital/withdraw/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdraw (USER_DATA)
         * @description Submit a withdraw request.
         *
         *     - If `network` not send, return with default network of the coin.
         *     - You can get `network` and `isDefault` in `networkList` of a coin in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Coin name */
                    coin: components["parameters"]["coin"];
                    /** @description Client id for withdraw */
                    withdrawOrderId?: string;
                    network?: components["parameters"]["network"];
                    address: string;
                    /** @description Secondary address identifier for coins like XRP,XMR etc. */
                    addressTag?: string;
                    amount: components["parameters"]["amount"];
                    /** @description When making internal transfer
                     *     - `true` ->  returning the fee to the destination account;
                     *     - `false` -> returning the fee back to the departure account. */
                    transactionFeeFlag?: boolean;
                    name?: string;
                    /** @description The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet */
                    walletType?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transafer Id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 7213fea8e94b4a5593d507237e5a555b */
                            id: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/capital/deposit/hisrec": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Deposit History(supporting network) (USER_DATA)
         * @description Fetch deposit history.
         *
         *     - Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.
         *     - If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 90 days.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin name */
                    coin?: components["parameters"]["optionalCoin"];
                    /** @description * `0` - pending
                     *     * `6` - credited but cannot withdraw
                     *     * `1` - success */
                    status?: number;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    offset?: components["parameters"]["offset"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of deposits */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 0.00999800 */
                            amount: string;
                            /** @example PAXG */
                            coin: string;
                            /** @example ETH */
                            network: string;
                            /**
                             * Format: int32
                             * @example 1
                             */
                            status: number;
                            /** @example 0x788cabe9236ce061e5a892e1a59395a81fc8d62c */
                            address: string;
                            /** @example  */
                            addressTag: string;
                            /** @example 0xaad4654a3234aa6118af9b4b335f5ae81c360b2394721c019b5d1e75328b09f3 */
                            txId: string;
                            /**
                             * Format: int64
                             * @example 1599621997000
                             */
                            insertTime: number;
                            /**
                             * Format: int32
                             * @example 0
                             */
                            transferType: number;
                            /**
                             * @description confirm times for unlocking
                             * @example 12/12
                             */
                            unlockConfirm: string;
                            /** @example 12/12 */
                            confirmTimes: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/capital/withdraw/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Withdraw History (supporting network) (USER_DATA)
         * @description Fetch withdraw history.
         *
         *     This endpoint specifically uses per second UID rate limit, user's total second level IP rate limit is 180000/second. Response from the endpoint contains header key X-SAPI-USED-UID-WEIGHT-1S, which defines weight used by the current IP.
         *
         *     - `network` may not be in the response for old withdraw.
         *     - Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.
         *     - If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 90 days
         *     - If withdrawOrderId is sent, time between startTime and endTime must be less than 7 days.
         *     - If withdrawOrderId is sent, startTime and endTime are not sent, will return last 7 days records by default.
         *
         *     Weight(UID): 18000
         *     Request Limit: 10 requests per second
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin name */
                    coin?: components["parameters"]["optionalCoin"];
                    withdrawOrderId?: string;
                    /** @description * `0` - Email Sent
                     *     * `1` - Cancelled
                     *     * `2` - Awaiting Approval
                     *     * `3` - Rejected
                     *     * `4` - Processing
                     *     * `5` - Failure
                     *     * `6` - Completed */
                    status?: number;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    offset?: components["parameters"]["offset"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of withdraw history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 0x94df8b352de7f46f64b01d3666bf6e936e44ce60 */
                            address: string;
                            /** @example 8.91000000 */
                            amount: string;
                            /** @example 2019-10-12 11:12:02 */
                            applyTime: string;
                            /** @example USDT */
                            coin: string;
                            /** @example b6ae22b3aa844210a7041aee7589627c */
                            id: string;
                            /**
                             * @description will not be returned if there's no withdrawOrderId for this withdraw.
                             * @example WITHDRAWtest123
                             */
                            withdrawOrderId: string;
                            /** @example ETH */
                            network: string;
                            /**
                             * Format: int32
                             * @description 1 for internal transfer, 0 for external transfer
                             * @example 0
                             */
                            transferType: number;
                            /**
                             * Format: int32
                             * @example 6
                             */
                            status: number;
                            /** @example 0.004 */
                            transactionFee: string;
                            /**
                             * Format: int32
                             * @example 3
                             */
                            confirmNo?: number;
                            /**
                             * @description Reason for withdrawal failure
                             * @example The address is not valid. Please confirm with the recipient
                             */
                            info?: string;
                            /** @example 0xb5ef8c13b968a406cc62a93a8bd80f9e9a906ef1b3fcf20a2e48573c17659268 */
                            txId: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/capital/deposit/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Deposit Address (supporting network) (USER_DATA)
         * @description Fetch deposit address with network.
         *
         *     - If network is not send, return with default network of the coin.
         *     - You can get network and isDefault in networkList in the response of Get /sapi/v1/capital/config/getall (HMAC SHA256).
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin name */
                    coin: components["parameters"]["coin"];
                    network?: components["parameters"]["network"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deposit address info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv */
                            address: string;
                            /** @example BTC */
                            coin: string;
                            /** @example  */
                            tag: string;
                            /** @example https://btc.com/1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv */
                            url: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/account/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Account Status (USER_DATA)
         * @description Fetch account status detail.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Normal */
                            data: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/account/apiTradingStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Account API Trading Status (USER_DATA)
         * @description Fetch account API trading status with details.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Account API trading status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                /**
                                 * @description API trading function is locked or not
                                 * @example false
                                 */
                                isLocked: boolean;
                                /**
                                 * Format: int64
                                 * @description If API trading function is locked, this is the planned recover time
                                 * @example 0
                                 */
                                plannedRecoverTime: number;
                                triggerCondition: {
                                    /**
                                     * Format: int64
                                     * @description Number of GTC orders
                                     * @example 150
                                     */
                                    GCR: number;
                                    /**
                                     * Format: int64
                                     * @description Number of FOK/IOC orders
                                     * @example 150
                                     */
                                    IFER: number;
                                    /**
                                     * Format: int64
                                     * @description Number of orders
                                     * @example 300
                                     */
                                    UFR: number;
                                };
                                /** @description The indicators updated every 30 seconds */
                                indicators: {
                                    BTCUSDT: {
                                        /**
                                         * @description Unfilled Ratio (UFR)
                                         * @example UFR
                                         */
                                        i: string;
                                        /**
                                         * Format: int64
                                         * @description Count of all orders
                                         * @example 20
                                         */
                                        c: number;
                                        /**
                                         * Format: float
                                         * @description Current UFR value
                                         * @example 0.05
                                         */
                                        v: number;
                                        /**
                                         * Format: float
                                         * @description Trigger UFR value
                                         * @example 0.99
                                         */
                                        t: number;
                                    }[];
                                };
                                /**
                                 * Format: int64
                                 * @example 1547630471725
                                 */
                                updateTime: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/dribblet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * DustLog(USER_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description SPOT or MARGIN, default SPOT */
                    accountType?: "SPOT" | "MARGIN";
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dust log records */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @description Total counts of exchange
                             * @example 8
                             */
                            total: number;
                            userAssetDribblets: {
                                /**
                                 * Format: int64
                                 * @example 1615985535000
                                 */
                                operateTime: number;
                                /**
                                 * @description Total transfered BNB amount for this exchange.
                                 * @example 0.00132256
                                 */
                                totalTransferedAmount: string;
                                /**
                                 * @description Total service charge amount for this exchange.
                                 * @example 0.00002699
                                 */
                                totalServiceChargeAmount: string;
                                /**
                                 * Format: int64
                                 * @example 45178372831
                                 */
                                transId: number;
                                userAssetDribbletDetails: {
                                    /**
                                     * Format: int64
                                     * @example 4359321
                                     */
                                    transId: number;
                                    /** @example 0.000009 */
                                    serviceChargeAmount: string;
                                    /** @example 0.0009 */
                                    amount: string;
                                    /**
                                     * Format: int64
                                     * @example 1615985535000
                                     */
                                    operateTime: number;
                                    /** @example 0.000441 */
                                    transferedAmount: string;
                                    /** @example USDT */
                                    fromAsset: string;
                                }[];
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/dust-btc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Assets That Can Be Converted Into BNB (USER_DATA)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description SPOT or MARGIN, default SPOT */
                    accountType?: "SPOT" | "MARGIN";
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Account assets available to be converted to BNB */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            details: {
                                /** @example ADA */
                                asset: string;
                                /** @example ADA */
                                assetFullName: string;
                                /**
                                 * @description Convertible amount
                                 * @example 6.21
                                 */
                                amountFree: string;
                                /**
                                 * @description BTC amount
                                 * @example 0.00016848
                                 */
                                toBTC: string;
                                /**
                                 * @description BNB amount(Not deducted commission fee
                                 * @example 0.01777302
                                 */
                                toBNB: string;
                                /**
                                 * @description BNB amount(Deducted commission fee
                                 * @example 0.01741756
                                 */
                                toBNBOffExchange: string;
                                /**
                                 * @description Commission fee
                                 * @example 0.00035546
                                 */
                                exchange: string;
                            }[];
                            /** @example 0.00016848 */
                            totalTransferBtc: string;
                            /** @example 0.01777302 */
                            totalTransferBNB: string;
                            /**
                             * @description Commission fee
                             * @example 0.02
                             */
                            dribbletPercentage: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/dust": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Dust Transfer (USER_DATA)
         * @description Convert dust assets to BNB.
         *
         *     Weight(UID): 10
         */
        post: {
            parameters: {
                query: {
                    /** @description The asset being converted. For example, asset=BTC&asset=USDT */
                    asset: string[];
                    /** @description SPOT or MARGIN, default SPOT */
                    accountType?: "SPOT" | "MARGIN";
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dust log records */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 0.02102542 */
                            totalServiceCharge: string;
                            /** @example 1.05127099 */
                            totalTransfered: string;
                            transferResult: {
                                /** @example 0.03000000 */
                                amount: string;
                                /** @example ETH */
                                fromAsset: string;
                                /**
                                 * Format: int64
                                 * @example 1563368549307
                                 */
                                operateTime: number;
                                /** @example 0.00500000 */
                                serviceChargeAmount: string;
                                /**
                                 * Format: int64
                                 * @example 2970932918
                                 */
                                tranId: number;
                                /** @example 0.25000000 */
                                transferedAmount: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/assetDividend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Asset Dividend Record (USER_DATA)
         * @description Query asset Dividend Record
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    asset?: components["parameters"]["optionalAsset"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Records of asset devidend */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /**
                                 * Format: int64
                                 * @example 242006910
                                 */
                                id: number;
                                /** @example 10.00000000 */
                                amount: string;
                                /** @example BHFT */
                                asset: string;
                                /**
                                 * Format: int64
                                 * @example 1563189166000
                                 */
                                divTime: number;
                                /** @example BHFT distribution */
                                enInfo: string;
                                /**
                                 * Format: int64
                                 * @example 2968885920
                                 */
                                tranId: number;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/assetDetail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Asset Detail (USER_DATA)
         * @description Fetch details of assets supported on Binance.
         *
         *     - Please get network and other deposit or withdraw details from `GET /sapi/v1/capital/config/getall`.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    asset?: components["parameters"]["optionalAsset"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Asset detail */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            CTR: {
                                /** @example 70.00000000 */
                                minWithdrawAmount: string;
                                /**
                                 * @description deposit status (false if ALL of networks' are false)
                                 * @example false
                                 */
                                depositStatus: boolean;
                                /**
                                 * Format: int64
                                 * @example 35
                                 */
                                withdrawFee: number;
                                /** @description withdrawStatus status (false if ALL of networks' are false) */
                                withdrawStatus: boolean;
                                /** @example Delisted, Deposit Suspended */
                                depositTip: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/tradeFee": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Trade Fee (USER_DATA)
         * @description Fetch trade fee
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol?: components["parameters"]["optionalSymbol"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Trade fee info per symbol */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ADABNB */
                            symbol: string;
                            /** @example 0.001 */
                            makerCommission: string;
                            /** @example 0.001 */
                            takerCommission: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query User Universal Transfer History (USER_DATA)
         * @description - `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
         *     - `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
         *     - Support query within the last 6 months only
         *     - If `startTime` and `endTime` not sent, return records of the last 7 days by default
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Universal transfer type */
                    type: components["parameters"]["univTransferType"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN */
                    fromSymbol?: components["parameters"]["fromSymbol"];
                    /** @description Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN */
                    toSymbol?: components["parameters"]["toSymbol"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Universal transfer history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                            rows: {
                                /** @example USDT */
                                asset: string;
                                /** @example 1 */
                                amount: string;
                                /** @example MAIN_UMFUTUR */
                                type: string;
                                /** @example CONFIRMED */
                                status: string;
                                /**
                                 * Format: int64
                                 * @example 11415955596
                                 */
                                tranId: number;
                                /**
                                 * Format: int64
                                 * @example 1544433328000
                                 */
                                timestamp: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * User Universal Transfer (USER_DATA)
         * @description You need to enable `Permits Universal Transfer` option for the api key which requests this endpoint.
         *
         *     - `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
         *     - `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
         *
         *     ENUM of transfer types:
         *       - MAIN_UMFUTURE Spot account transfer to USDⓈ-M Futures account
         *       - MAIN_CMFUTURE Spot account transfer to COIN-M Futures account
         *       - MAIN_MARGIN Spot account transfer to Margin(cross)account
         *       - UMFUTURE_MAIN USDⓈ-M Futures account transfer to Spot account
         *       - UMFUTURE_MARGIN USDⓈ-M Futures account transfer to Margin(cross)account
         *       - CMFUTURE_MAIN COIN-M Futures account transfer to Spot account
         *       - CMFUTURE_MARGIN COIN-M Futures account transfer to Margin(cross) account
         *       - MARGIN_MAIN Margin(cross)account transfer to Spot account
         *       - MARGIN_UMFUTURE Margin(cross)account transfer to USDⓈ-M Futures
         *       - MARGIN_CMFUTURE Margin(cross)account transfer to COIN-M Futures
         *       - ISOLATEDMARGIN_MARGIN Isolated margin account transfer to Margin(cross) account
         *       - MARGIN_ISOLATEDMARGIN Margin(cross) account transfer to Isolated margin account
         *       - ISOLATEDMARGIN_ISOLATEDMARGIN Isolated margin account transfer to Isolated margin account
         *       - MAIN_FUNDING Spot account transfer to Funding account
         *       - FUNDING_MAIN Funding account transfer to Spot account
         *       - FUNDING_UMFUTURE Funding account transfer to UMFUTURE account
         *       - UMFUTURE_FUNDING UMFUTURE account transfer to Funding account
         *       - MARGIN_FUNDING MARGIN account transfer to Funding account
         *       - FUNDING_MARGIN Funding account transfer to Margin account
         *       - FUNDING_CMFUTURE Funding account transfer to CMFUTURE account
         *       - CMFUTURE_FUNDING CMFUTURE account transfer to Funding account
         *       - MAIN_OPTION Spot account transfer to Options account
         *       - OPTION_MAIN Options account transfer to Spot account
         *       - UMFUTURE_OPTION USDⓈ-M Futures account transfer to Options account
         *       - OPTION_UMFUTURE Options account transfer to USDⓈ-M Futures account
         *       - MARGIN_OPTION Margin(cross)account transfer to Options account
         *       - OPTION_MARGIN Options account transfer to Margin(cross)account
         *       - FUNDING_OPTION Funding account transfer to Options account
         *       - OPTION_FUNDING Options account transfer to Funding account
         *       - MAIN_PORTFOLIO_MARGIN Spot account transfer to Portfolio Margin account
         *       - PORTFOLIO_MARGIN_MAIN Portfolio Margin account transfer to Spot account
         *       - MAIN_ISOLATED_MARGIN Spot account transfer to Isolated margin account
         *       - ISOLATED_MARGIN_MAIN Isolated margin account transfer to Spot account
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Universal transfer type */
                    type: components["parameters"]["univTransferType"];
                    asset: components["parameters"]["asset"];
                    amount: components["parameters"]["amount"];
                    /** @description Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN */
                    fromSymbol?: components["parameters"]["fromSymbol"];
                    /** @description Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN */
                    toSymbol?: components["parameters"]["toSymbol"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transfer id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 13526853623
                             */
                            tranId: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/get-funding-asset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Funding Wallet (USER_DATA)
         * @description - Currently supports querying the following business assets：Binance Pay, Binance Card, Binance Gift Card, Stock Token
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    asset?: components["parameters"]["optionalAsset"];
                    needBtcValuation?: components["parameters"]["needBtcValuation"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Funding asset detail */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example USDT */
                            asset: string;
                            /** @example 1 */
                            free: string;
                            /** @example 0 */
                            locked: string;
                            /** @example 0 */
                            freeze: string;
                            /** @example 0 */
                            withdrawing: string;
                            /** @example 0.00000091 */
                            btcValuation: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v3/asset/getUserAsset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User Asset (USER_DATA)
         * @description Get user assets, just for positive data.
         *
         *     Weight(IP): 5
         */
        post: {
            parameters: {
                query: {
                    asset?: components["parameters"]["optionalAsset"];
                    needBtcValuation?: components["parameters"]["needBtcValuation"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User assets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example AVAX */
                            asset: string;
                            /** @example 1 */
                            free: string;
                            /** @example 0 */
                            locked: string;
                            /** @example 0 */
                            freeze: string;
                            /** @example 0 */
                            withdrawing: string;
                            /** @example 0 */
                            ipoable: string;
                            /** @example 0 */
                            btcValuation: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/convert-transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Convert Transfer (USER_DATA)
         * @description Convert transfer, convert between BUSD and stablecoins.
         *     If the clientId has been used before, will not do the convert transfer, the original transfer will be returned.
         *
         *     Weight(UID): 5
         */
        post: {
            parameters: {
                query: {
                    /** @description The unique flag, the min length is 20 */
                    clientTranId: string;
                    asset: components["parameters"]["asset"];
                    amount: components["parameters"]["amount"];
                    /** @description Target asset you want to convert */
                    targetAsset: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Conversion Information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 118263407119
                             */
                            tranId: number;
                            /** @example S */
                            status: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/convert-transfer/queryByPage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Convert Transfer (USER_DATA)
         * @description Weight(UID): 5
         */
        get: {
            parameters: {
                query: {
                    /** @description The transaction id */
                    tranId?: number;
                    /** @description If it is blank, we will match deducted asset and target asset. */
                    asset?: string;
                    /** @description UTC timestamp in ms */
                    startTime: number;
                    /** @description UTC timestamp in ms */
                    endTime: number;
                    /** @description MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet */
                    accountType?: "MAIN" | "CARD";
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Query Convert Transfer */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                            rows: {
                                /**
                                 * Format: int64
                                 * @example 118263407119
                                 */
                                tranId: number;
                                /**
                                 * Format: int64
                                 * @example 244
                                 */
                                type: number;
                                /**
                                 * Format: int64
                                 * @example 1664442078000
                                 */
                                time: number;
                                /** @example BUSD */
                                deductedAsset: string;
                                /** @example 1 */
                                deductedAmount: string;
                                /** @example USDC */
                                targetAsset: string;
                                /** @example 1 */
                                targetAmount: string;
                                /** @example S */
                                status: string;
                                /** @example MAIN */
                                accountType: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Cloud-Mining payment and refund history (USER_DATA)
         * @description The query of Cloud-Mining payment and refund history
         *
         *     Weight(UID): 600
         */
        get: {
            parameters: {
                query: {
                    /** @description The transaction id */
                    tranId?: number;
                    /** @description The unique flag */
                    clientTranId?: string;
                    /** @description If it is blank, we will query all assets */
                    asset?: string;
                    /** @description UTC timestamp in ms */
                    startTime: number;
                    /** @description UTC timestamp in ms */
                    endTime: number;
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cloud Mining Payment and Refund History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                            rows: {
                                /**
                                 * Format: int64
                                 * @example 1667880112000
                                 */
                                createTime: number;
                                /**
                                 * Format: int64
                                 * @example 121230610120
                                 */
                                tranId: number;
                                /**
                                 * Format: int64
                                 * @example 248
                                 */
                                type: number;
                                /** @example USDT */
                                asset: string;
                                /** @example 1 */
                                amount: string;
                                /** @example S */
                                status: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/account/apiRestrictions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API Key Permission (USER_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description API Key permissions */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example false */
                            ipRestrict: boolean;
                            /**
                             * Format: int64
                             * @example 1623840271000
                             */
                            createTime: number;
                            /** @description This option authorizes this key to transfer funds between your master account and your sub account instantly */
                            enableInternalTransfer: boolean;
                            /**
                             * @description API Key created before your futures account opened does not support futures API service
                             * @example false
                             */
                            enableFutures: boolean;
                            /**
                             * @description API Key created before your activate portfolio margin does not support portfolio margin API service
                             * @example false
                             */
                            enablePortfolioMarginTrading?: boolean;
                            /**
                             * @description Authorizes this key to Vanilla options trading
                             * @example false
                             */
                            enableVanillaOptions: boolean;
                            /** @description Authorizes this key to be used for a dedicated universal transfer API to transfer multiple supported currencies. Each business's own transfer API rights are not affected by this authorization */
                            permitsUniversalTransfer: boolean;
                            /** @example true */
                            enableReading: boolean;
                            /** @example false */
                            enableSpotAndMarginTrading: boolean;
                            /**
                             * @description This option allows you to withdraw via API. You must apply the IP Access Restriction filter in order to enable withdrawals
                             * @example false
                             */
                            enableWithdrawals: boolean;
                            /**
                             * @description This option can be adjusted after the Cross Margin account transfer is completed
                             * @example false
                             */
                            enableMargin: boolean;
                            /**
                             * Format: int64
                             * @description Expiration time for spot and margin trading permission
                             * @example 1628985600000
                             */
                            tradingAuthorityExpirationTime: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/capital/contract/convertible-coins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query auto-converting stable coins (USER_DATA)
         * @description Get a user's auto-conversion settings in deposit/withdrawal
         *
         *     Weight(UID): 600'
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User's auto-conversion settings i */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            convertEnabled: boolean;
                            coins: string[];
                            exchangeRates: {
                                /** @example 1 */
                                USDC: string;
                                /** @example 1 */
                                TUSD: string;
                                /** @example 1 */
                                USDP: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Switch on/off BUSD and stable coins conversion (USER_DATA) (USER_DATA)
         * @description User can use it to turn on or turn off the BUSD auto-conversion from/to a specific stable coin.
         *
         *     Weight(UID): 600'
         */
        post: {
            parameters: {
                query: {
                    /** @description Must be USDC, USDP or TUSD */
                    coin: string;
                    /** @description true: turn on the auto-conversion. false: turn off the auto-conversion */
                    enable: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/virtualSubAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Virtual Sub-account(For Master Account)
         * @description - This request will generate a virtual sub account under your master account.
         *     - You need to enable "trade" option for the api key which requests this endpoint.
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Please input a string. We will create a virtual email using that string for you to register */
                    subAccountString: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Return the created virtual email */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example addsdd_virtual@aasaixwqnoemail.com */
                            email: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Sub-account List (For Master Account)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email?: components["parameters"]["optionalSubAccountEmail"];
                    isFreeze?: "true" | "false";
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description Default 1; max 200 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of sub-accounts */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            subAccounts: {
                                /** @example testsub@gmail.com */
                                email: string;
                                /** @example false */
                                isFreeze: boolean;
                                /**
                                 * Format: int64
                                 * @example 1544433328000
                                 */
                                createTime: number;
                                /** @example false */
                                isManagedSubAccount: boolean;
                                /** @example false */
                                isAssetManagementSubAccount: boolean;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/sub/transfer/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sub-account Spot Asset Transfer History (For Master Account)
         * @description - fromEmail and toEmail cannot be sent at the same time.
         *     - Return fromEmail equal master account email by default.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    fromEmail?: components["parameters"]["optionalSubAccountFromEmail"];
                    /** @description Sub-account email */
                    toEmail?: components["parameters"]["optionalSubAccountToEmail"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description Default 1 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sub-account Spot Asset Transfer History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example aaa@test.com */
                            from: string;
                            /** @example bbb@test.com */
                            to: string;
                            /** @example BTC */
                            asset: string;
                            /** @example 10 */
                            qty: string;
                            /** @example SUCCESS */
                            status: string;
                            /**
                             * Format: int64
                             * @example 6489943656
                             */
                            tranId: number;
                            /**
                             * Format: int64
                             * @example 1544433328000
                             */
                            time: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/futures/internalTransfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sub-account Futures Asset Transfer History (For Master Account)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description 1:USDT-margined Futures, 2: Coin-margined Futures */
                    futuresType: number;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description Default value: 50, Max value: 500 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sub-account Futures Asset Transfer History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            /**
                             * Format: int32
                             * @example 2
                             */
                            futuresType: number;
                            transfers: {
                                /** @example aaa@test.com */
                                from: string;
                                /** @example bbb@test.com */
                                to: string;
                                /** @example BTC */
                                asset: string;
                                /** @example 1 */
                                qty: string;
                                /**
                                 * Format: int64
                                 * @example 11897001102
                                 */
                                tranId: number;
                                /**
                                 * Format: int64
                                 * @example 1544433328000
                                 */
                                time: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Sub-account Futures Asset Transfer (For Master Account)
         * @description - Master account can transfer max 2000 times a minute
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Sender email */
                    fromEmail: components["parameters"]["subAccountFromEmail"];
                    /** @description Recipient email */
                    toEmail: components["parameters"]["subAccountToEmail"];
                    /** @description 1:USDT-margined Futures,2: Coin-margined Futures */
                    futuresType: number;
                    asset: components["parameters"]["asset"];
                    amount: components["parameters"]["amount"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Futures Asset Transfer Info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            /** @example 2934662589 */
                            txnId: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v3/sub-account/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sub-account Assets (For Master Account)
         * @description Fetch sub-account assets
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of assets balances */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            balances: {
                                /** @example ADA */
                                asset: string;
                                /**
                                 * Format: int64
                                 * @example 10000
                                 */
                                free: number;
                                /**
                                 * Format: int64
                                 * @example 0
                                 */
                                locked: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/spotSummary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sub-account Spot Assets Summary (For Master Account)
         * @description Get BTC valued asset summary of subaccounts.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email?: components["parameters"]["optionalSubAccountEmail"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description Default:10 Max:20 */
                    size?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Summary of Sub-account Spot Assets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            totalCount: number;
                            /** @example 0.23231201 */
                            masterAccountTotalAsset: string;
                            spotSubUserAssetBtcVoList: {
                                /** @example sub123@test.com */
                                email: string;
                                /** @example 9999.00000000 */
                                totalAsset: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/capital/deposit/subAddress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sub-account Spot Assets Summary (For Master Account)
         * @description Fetch sub-account deposit address
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description Coin name */
                    coin: components["parameters"]["coin"];
                    network?: components["parameters"]["network"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deposit address info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example TDunhSa7jkTNuKrusUTU1MUHtqXoBPKETV */
                            address: string;
                            /** @example USDT */
                            coin: string;
                            /** @example  */
                            tag: string;
                            /** @example https://tronscan.org/#/address/TDunhSa7jkTNuKrusUTU1MUHtqXoBPKETV */
                            url: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/capital/deposit/subHisrec": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sub-account Deposit History (For Master Account)
         * @description Fetch sub-account deposit history
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description Coin name */
                    coin?: components["parameters"]["optionalCoin"];
                    /** @description 0(0:pending,6: credited but cannot withdraw, 1:success) */
                    status?: number;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    limit?: number;
                    offset?: components["parameters"]["offset"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sub-account deposit history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 0.00999800 */
                            amount: string;
                            /** @example PAXG */
                            coin: string;
                            /** @example ETH */
                            network: string;
                            /**
                             * Format: int32
                             * @example 1
                             */
                            status: number;
                            /** @example 0x788cabe9236ce061e5a892e1a59395a81fc8d62c */
                            address: string;
                            /** @example  */
                            addressTag: string;
                            /** @example 0xaad4654a3234aa6118af9b4b335f5ae81c360b2394721c019b5d1e75328b09f3 */
                            txId: string;
                            /**
                             * Format: int64
                             * @example 1599621997000
                             */
                            insertTime: number;
                            /**
                             * Format: int32
                             * @example 0
                             */
                            transferType: number;
                            /** @example 12/12 */
                            confirmTimes: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/capital/deposit/credit-apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * One click arrival deposit apply (USER_DATA)
         * @description Apply deposit credit for expired address (One click arrival)
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Deposit record Id, priority use */
                    depositId?: number;
                    /** @description Deposit txId, used when depositId is not specified */
                    txId?: string;
                    subAccountId?: number;
                    subUserId?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description deposit result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            /** @example true */
                            data: boolean;
                            /** @example true */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/wallet/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query User Wallet Balance (USER_DATA)
         * @description Query User Wallet Balance
         *
         *     Weight(IP): 60
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description wallet balance */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            activate: boolean;
                            /** @example 0 */
                            balance: string;
                            /** @example Spot */
                            walletName: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/asset/custody/transfer-history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query User Delegation History(For Master Account) (USER_DATA)
         * @description Query User Delegation History
         *
         *     Weight(IP): 60
         */
        get: {
            parameters: {
                query: {
                    email: string;
                    startTime: number;
                    endTime: number;
                    type?: string;
                    asset: components["parameters"]["asset"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Delegation History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 3316 */
                            total: number;
                            rows: {
                                /** @example 293915932290879488 */
                                clientTranId: string;
                                /** @example Undelegate */
                                transferType: string;
                                /** @example ETH */
                                asset: string;
                                /** @example 1 */
                                amount: string;
                                /**
                                 * Format: int64
                                 * @example 1695205406000
                                 */
                                time: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/capital/deposit/address/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch deposit address list with network (USER_DATA)
         * @description Fetch deposit address list with network.
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    coin: string;
                    network?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Coin address */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example ETH */
                            coin: string;
                            /** @example 0xD316E95Fd9E8E237Cb11f8200Babbc5D8D177BA4 */
                            address: string;
                            /**
                             * Format: int32
                             * @example 1
                             */
                            isDefault: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/spot/delist-schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get symbols delist schedule for spot (MARKET_DATA)
         * @description Get symbols delist schedule for spot
         *
         *     Weight(IP): 100
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Symbols delist schedule */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1686161202000
                             */
                            delistTime: number;
                            /** @example [
                             *       "ADAUSDT",
                             *       "BNBUSDT"
                             *     ] */
                            symbol: string[];
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/capital/withdraw/address/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch withdraw address list (USER_DATA)
         * @description Fetch withdraw address list
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Withdraw address list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 0xD316E95Fd9E8E237Cb11f8200Babbc5D8D177BA4 */
                            address: string;
                            /** @example 101764890 */
                            addressTag: string;
                            /** @example BNB */
                            coin: string;
                            /** @example  */
                            name: string;
                            /** @example BNB */
                            network: string;
                            /** @example  */
                            origin: string;
                            /** @example  */
                            originType: string;
                            /** @example true */
                            whiteStatus: boolean;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/account/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Account info (USER_DATA)
         * @description Fetch account info detail.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Account info detail */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 0
                             */
                            vipLevel: number;
                            /**
                             * @description true or false for margin.
                             * @example true
                             */
                            isMarginEnabled: boolean;
                            /**
                             * @description true or false for futures.
                             * @example true
                             */
                            isFutureEnabled: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sub-account's Status on Margin/Futures (For Master Account)
         * @description - If no `email` sent, all sub-accounts' information will be returned.
         *
         *     Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email?: components["parameters"]["optionalSubAccountEmail"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Status on Margin/Futures */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 123@test.com */
                            email: string;
                            isSubUserEnabled: boolean;
                            isUserActive: boolean;
                            /**
                             * Format: int64
                             * @description sub account create time
                             * @example 1570791523523
                             */
                            insertTime: number;
                            isMarginEnabled: boolean;
                            isFutureEnabled: boolean;
                            /**
                             * Format: int64
                             * @description user mobile number
                             * @example 1570791523523
                             */
                            mobile: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/margin/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable Margin for Sub-account (For Master Account)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 123@test.com */
                            email: string;
                            isMarginEnabled: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/margin/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Detail on Sub-account's Margin Account (For Master Account)
         * @description Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin sub-account details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 123@test.com */
                            email: string;
                            /** @example 11.64405625 */
                            marginLevel: string;
                            /** @example 6.82728457 */
                            totalAssetOfBtc: string;
                            /** @example 0.58633215 */
                            totalLiabilityOfBtc: string;
                            /** @example 6.24095242 */
                            totalNetAssetOfBtc: string;
                            marginTradeCoeffVo: {
                                /**
                                 * @description Liquidation margin ratio
                                 * @example 1.10000000
                                 */
                                forceLiquidationBar: string;
                                /**
                                 * @description Margin call margin ratio
                                 * @example 1.50000000
                                 */
                                marginCallBar: string;
                                /**
                                 * @description Initial margin ratio
                                 * @example 2.00000000
                                 */
                                normalBar: string;
                            };
                            marginUserAssetVoList: {
                                /** @example BTC */
                                asset: string;
                                /** @example 0.00000000 */
                                borrowed: string;
                                /** @example 0.00499500 */
                                free: string;
                                /** @example 0.00000000 */
                                interest: string;
                                /** @example 0.00000000 */
                                locked: string;
                                /** @example 0.00499500 */
                                netAsset: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/margin/accountSummary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Summary of Sub-account's Margin Account (For Master Account)
         * @description Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin sub-account details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 4.33333333 */
                            totalAssetOfBtc: string;
                            /** @example 2.11111112 */
                            totalLiabilityOfBtc: string;
                            /** @example 2.22222221 */
                            totalNetAssetOfBtc: string;
                            subAccountList: {
                                /** @example 123@test.com */
                                email: string;
                                /** @example 2.11111111 */
                                totalAssetOfBtc: string;
                                /** @example 1.11111111 */
                                totalLiabilityOfBtc: string;
                                /** @example 1.00000000 */
                                totalNetAssetOfBtc: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/futures/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable Futures for Sub-account (For Master Account)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Futures status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 123@test.com */
                            email: string;
                            isFuturesEnabled: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/futures/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Detail on Sub-account's Futures Account (For Master Account)
         * @description Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    email: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Futures account details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example abc@test.com */
                            email: string;
                            /** @example USDT */
                            asset: string;
                            assets: {
                                /** @example USDT */
                                asset: string;
                                /** @example 0.00000000 */
                                initialMargin: string;
                                /** @example 0.00000000 */
                                maintenanceMargin: string;
                                /** @example 0.88308000 */
                                marginBalance: string;
                                /** @example 0.88308000 */
                                maxWithdrawAmount: string;
                                /** @example 0.00000000 */
                                openOrderInitialMargin: string;
                                /** @example 0.00000000 */
                                positionInitialMargin: string;
                                /** @example 0.00000000 */
                                unrealizedProfit: string;
                                /** @example 0.88308000 */
                                walletBalance: string;
                            }[];
                            canDeposit: boolean;
                            canTrade: boolean;
                            canWithdraw: boolean;
                            /**
                             * Format: int64
                             * @example 2
                             */
                            feeTier: number;
                            /** @example 0.88308000 */
                            maxWithdrawAmount: string;
                            /** @example 0.00000000 */
                            totalInitialMargin: string;
                            /** @example 0.00000000 */
                            totalMaintenanceMargin: string;
                            /** @example 0.88308000 */
                            totalMarginBalance: string;
                            /** @example 0.00000000 */
                            totalOpenOrderInitialMargin: string;
                            /** @example 0.00000000 */
                            totalPositionInitialMargin: string;
                            /** @example 0.00000000 */
                            totalUnrealizedProfit: string;
                            /** @example 0.88308000 */
                            totalWalletBalance: string;
                            /**
                             * Format: int64
                             * @example 1576756674610
                             */
                            updateTime: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/futures/accountSummary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Summary of Sub-account's Futures Account (For Master Account)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Futures account summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 9.83137400 */
                            totalInitialMargin: string;
                            /** @example 0.41568700 */
                            totalMaintenanceMargin: string;
                            /** @example 23.03235621 */
                            totalMarginBalance: string;
                            /** @example 9.00000000 */
                            totalOpenOrderInitialMargin: string;
                            /** @example 0.83137400 */
                            totalPositionInitialMargin: string;
                            /** @example 0.03219710 */
                            totalUnrealizedProfit: string;
                            /** @example 22.15879444 */
                            totalWalletBalance: string;
                            /** @example USD */
                            asset: string;
                            subAccountList: {
                                /** @example 123@test.com */
                                email: string;
                                /** @example 9.00000000 */
                                totalInitialMargin: string;
                                /** @example 0.00000000 */
                                totalMaintenanceMargin: string;
                                /** @example 22.12659734 */
                                totalMarginBalance: string;
                                /** @example 9.00000000 */
                                totalOpenOrderInitialMargin: string;
                                /** @example 0.00000000 */
                                totalPositionInitialMargin: string;
                                /** @example 0.00000000 */
                                totalUnrealizedProfit: string;
                                /** @example 22.12659734 */
                                totalWalletBalance: string;
                                /** @example USD */
                                asset: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/futures/positionRisk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Futures Position-Risk of Sub-account (For Master Account)
         * @description Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Futures account summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 9975.12000 */
                            entryPrice: string;
                            /**
                             * @description current initial leverage
                             * @example 50
                             */
                            leverage: string;
                            /**
                             * @description notional value limit of current initial leverage
                             * @example 1000000
                             */
                            maxNotional: string;
                            /** @example 7963.54 */
                            liquidationPrice: string;
                            /** @example 9973.50770517 */
                            markPrice: string;
                            /** @example 0.010 */
                            positionAmount: string;
                            /** @example BTCUSDT */
                            symbol: string;
                            /** @example -0.01612295 */
                            unrealizedProfit: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/futures/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer for Sub-account (For Master Account)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    asset: components["parameters"]["asset"];
                    amount: components["parameters"]["amount"];
                    /** @description * `1` - transfer from subaccount's spot account to its USDT-margined futures account
                     *     * `2` - transfer from subaccount's USDT-margined futures account to its spot account
                     *     * `3` - transfer from subaccount's spot account to its COIN-margined futures account
                     *     * `4` - transfer from subaccount's COIN-margined futures account to its spot account */
                    type: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transfer id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 2966662589 */
                            txnId: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/margin/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Margin Transfer for Sub-account (For Master Account)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    asset: components["parameters"]["asset"];
                    amount: components["parameters"]["amount"];
                    /** @description * `1` - transfer from subaccount's spot account to margin account
                     *     * `2` - transfer from subaccount's margin account to its spot account */
                    type: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transfer id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 2966662589 */
                            txnId: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/transfer/subToSub": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer to Sub-account of Same Master (For Sub-account)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Recipient email */
                    toEmail: components["parameters"]["subAccountToEmail"];
                    asset: components["parameters"]["asset"];
                    amount: components["parameters"]["amount"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transfer id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 2966662589 */
                            txnId: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/transfer/subToMaster": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer to Master (For Sub-account)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    asset: components["parameters"]["asset"];
                    amount: components["parameters"]["amount"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transfer id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 2966662589 */
                            txnId: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/transfer/subUserHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sub-account Transfer History (For Sub-account)
         * @description - If `type` is not sent, the records of type 2: transfer out will be returned by default.
         *     - If `startTime` and `endTime` are not sent, the recent 30-day data will be returned.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    asset?: components["parameters"]["optionalAsset"];
                    /** @description * `1` - transfer in
                     *     * `2` - transfer out */
                    type?: number;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transfer id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example master */
                            counterParty: string;
                            /** @example master@test.com */
                            email: string;
                            /**
                             * Format: int32
                             * @description 1 for transfer in, 2 for transfer out
                             * @example 1
                             */
                            type: number;
                            /** @example BTC */
                            asset: string;
                            /** @example 1 */
                            qty: string;
                            /** @example SPOT */
                            fromAccountType: string;
                            /** @example SPOT */
                            toAccountType: string;
                            /** @example SUCCESS */
                            status: string;
                            /**
                             * Format: int64
                             * @example 11798835829
                             */
                            tranId: number;
                            /**
                             * Format: int64
                             * @example 1544433325000
                             */
                            time: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/universalTransfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Universal Transfer History (For Master Account)
         * @description - `fromEmail` and `toEmail` cannot be sent at the same time.
         *     - Return `fromEmail` equal master account email by default.
         *     - The query time period must be less then 30 days.
         *     - If startTime and endTime not sent, return records of the last 30 days by default.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    fromEmail?: components["parameters"]["optionalSubAccountFromEmail"];
                    /** @description Sub-account email */
                    toEmail?: components["parameters"]["optionalSubAccountToEmail"];
                    clientTranId?: components["parameters"]["clientTranId"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description Default 500, Max 500 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transfer History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 11945860693
                             */
                            tranId: number;
                            /** @example master@test.com */
                            fromEmail: string;
                            /** @example subaccount1@test.com */
                            toEmail: string;
                            /** @example BTC */
                            asset: string;
                            /** @example 0.1 */
                            amount: string;
                            /** @example SPOT */
                            fromAccountType: string;
                            /** @example COIN_FUTURE */
                            toAccountType: string;
                            /** @example SUCCESS */
                            status: string;
                            /**
                             * Format: int64
                             * @example 1544433325000
                             */
                            createTimeStamp: number;
                            /** @example 11945860694 */
                            clientTranId: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Universal Transfer (For Master Account)
         * @description - You need to enable "internal transfer" option for the api key which requests this endpoint.
         *     - Transfer from master account by default if fromEmail is not sent.
         *     - Transfer to master account by default if toEmail is not sent.
         *     - Supported transfer scenarios:
         *       - Master account SPOT transfer to sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN
         *       - Sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN transfer to master account SPOT
         *       - Transfer between two sub-account SPOT accounts
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    fromEmail?: components["parameters"]["optionalSubAccountFromEmail"];
                    /** @description Sub-account email */
                    toEmail?: components["parameters"]["optionalSubAccountToEmail"];
                    fromAccountType: "SPOT" | "USDT_FUTURE" | "COIN_FUTURE" | "MARGIN" | "ISOLATED_MARGIN";
                    toAccountType: "SPOT" | "USDT_FUTURE" | "COIN_FUTURE" | "MARGIN" | "ISOLATED_MARGIN";
                    clientTranId?: components["parameters"]["clientTranId"];
                    /** @description Only supported under ISOLATED_MARGIN type */
                    symbol?: string;
                    asset: components["parameters"]["asset"];
                    amount: components["parameters"]["amount"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transfer id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 11945860693
                             */
                            tranId: number;
                            /** @example 11945860694 */
                            clientTranId: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/sub-account/futures/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Detail on Sub-account's Futures Account V2 (For Master Account)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description * `1` - USDT Margined Futures
                     *     * `2` - COIN Margined Futures */
                    futuresType: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description USDT or COIN Margined Futures Details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["subAccountUSDTFuturesDetails"] | components["schemas"]["subAccountCOINFuturesDetails"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/sub-account/futures/accountSummary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Summary of Sub-account's Futures Account V2 (For Master Account)
         * @description Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    /** @description * `1` - USDT Margined Futures
                     *     * `2` - COIN Margined Futures */
                    futuresType: number;
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description Default 10, Max 20 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description USDT or COIN Margined Futures Summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["subAccountUSDTFuturesSummary"] | components["schemas"]["subAccountCOINFuturesSummary"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/sub-account/futures/positionRisk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Futures Position-Risk of Sub-account V2 (For Master Account)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description * `1` - USDT Margined Futures
                     *     * `2` - COIN Margined Futures */
                    futuresType: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description USDT or COIN Margined Futures Position Risk */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["subAccountUSDTFuturesPositionRisk"] | components["schemas"]["subAccountCOINFuturesPositionRisk"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/blvt/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable Leverage Token for Sub-account (For Master Account)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description Only true for now */
                    enableBlvt: boolean;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description BLVT status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 123@test.com */
                            email: string;
                            enableBlvt: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/managed-subaccount/deposit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deposit assets into the managed sub-account(For Investor Master Account)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Recipient email */
                    toEmail: components["parameters"]["subAccountToEmail"];
                    asset: components["parameters"]["asset"];
                    amount: components["parameters"]["amount"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transfer id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 66157362489
                             */
                            tranId: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/managed-subaccount/asset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Managed sub-account asset details(For Investor Master Account)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of asset details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example INJ */
                            coin: string;
                            /** @example Injective Protocol */
                            name: string;
                            /** @example 0 */
                            totalBalance: string;
                            /** @example 0 */
                            availableBalance: string;
                            /** @example 0 */
                            inOrder: string;
                            /** @example 0 */
                            btcValue: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/managed-subaccount/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Withdrawl assets from the managed sub-account(For Investor Master Account)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Sender email */
                    fromEmail: components["parameters"]["subAccountFromEmail"];
                    asset: components["parameters"]["asset"];
                    amount: components["parameters"]["amount"];
                    /** @description Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now */
                    transferDate?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transfer id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 66157362489
                             */
                            tranId: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/managed-subaccount/accountSnapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Managed sub-account snapshot (For Investor Master Account)
         * @description - The query time period must be less then 30 days
         *     - Support query within the last one month only
         *     - If `startTime` and `endTime` not sent, return records of the last 7 days by default
         *
         *     Weight(IP): 2400
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    /** @description "SPOT", "MARGIN"(cross), "FUTURES"(UM) */
                    type: string;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description min 7, max 30, default 7 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sub-account spot snapshot */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 200
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            snapshotVos: {
                                data: {
                                    balances: {
                                        /** @example BTC */
                                        asset: string;
                                        /** @example 0.09905021 */
                                        free: string;
                                        /** @example 0.00000000 */
                                        locked: string;
                                    }[];
                                    /** @example 0.09942700 */
                                    totalAssetOfBtc: string;
                                };
                                /** @example spot */
                                type: string;
                                /**
                                 * Format: int64
                                 * @example 1576281599000
                                 */
                                updateTime: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/managed-subaccount/queryTransLogForInvestor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Managed Sub Account Transfer Log (For Investor Master Account)
         * @description Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    email: components["parameters"]["email"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description Transfer Direction (FROM/TO) */
                    transfers?: string;
                    /** @description Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE) */
                    transferFunctionAccountType?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Managed sub account transfer logs (for invest account) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 2
                             */
                            count: number;
                            managerSubTransferHistoryVos: {
                                /** @example test_0_virtual@kq3kno9imanagedsub.com */
                                fromEmail: string;
                                /** @example SPOT */
                                fromAccountType: string;
                                /** @example wdywl0lddakh@test.com */
                                toEmail: string;
                                /** @example SPOT */
                                toAccountType: string;
                                /** @example BNB */
                                asset: string;
                                /** @example 0.01 */
                                amount: string;
                                /**
                                 * Format: int64
                                 * @example 1626144956000
                                 */
                                scheduledData: number;
                                /**
                                 * Format: int64
                                 * @example 1626144956000
                                 */
                                createTime: number;
                                /** @example SUCCESS */
                                status: string;
                                /** @example 91077779 */
                                tranId: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/managed-subaccount/queryTransLogForTradeParent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Managed Sub Account Transfer Log (For Trading Team Master Account)
         * @description Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team
         *
         *     Weight(IP): 60
         */
        get: {
            parameters: {
                query: {
                    email: components["parameters"]["email"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description Transfer Direction (FROM/TO) */
                    transfers?: string;
                    /** @description Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE) */
                    transferFunctionAccountType?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Managed sub account transfer logs (for trading team) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 2
                             */
                            count: number;
                            managerSubTransferHistoryVos: {
                                /** @example test_0_virtual@kq3kno9imanagedsub.com */
                                fromEmail: string;
                                /** @example SPOT */
                                fromAccountType: string;
                                /** @example wdywl0lddakh@test.com */
                                toEmail: string;
                                /** @example SPOT */
                                toAccountType: string;
                                /** @example BNB */
                                asset: string;
                                /** @example 0.01 */
                                amount: string;
                                /**
                                 * Format: int64
                                 * @example 1626144956000
                                 */
                                scheduledData: number;
                                /**
                                 * Format: int64
                                 * @example 1626144956000
                                 */
                                createTime: number;
                                /** @example SUCCESS */
                                status: string;
                                /** @example 91077779 */
                                tranId: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/managed-subaccount/fetch-future-asset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Managed Sub-account Futures Asset Details (For Investor Master Account)
         * @description Investor can use this api to query managed sub account futures asset details
         */
        get: {
            parameters: {
                query: {
                    email: components["parameters"]["email"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sub account futures assset details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 200
                             */
                            code: number;
                            /** @example OK */
                            message: string;
                            snapshotVos: {
                                /** @example FUTURES */
                                type: string;
                                /**
                                 * Format: int64
                                 * @example 1626400907000
                                 */
                                updateTime: number;
                                data: {
                                    assets: {
                                        /** @example USDT */
                                        asset: string;
                                        /**
                                         * Format: float
                                         * @example 100
                                         */
                                        marginBalance: number;
                                        /**
                                         * Format: float
                                         * @example 100
                                         */
                                        walletBalance: number;
                                    }[];
                                    position: {
                                        /** @example BTCUSDT */
                                        symbol: string;
                                        /**
                                         * Format: float
                                         * @example 17000
                                         */
                                        entryPrice: number;
                                        /**
                                         * Format: float
                                         * @example 17000
                                         */
                                        markPrice: number;
                                        /**
                                         * Format: float
                                         * @example 0.1
                                         */
                                        positionAmt: number;
                                    }[];
                                };
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/managed-subaccount/marginAsset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Managed Sub-account Margin Asset Details (For Investor Master Account)
         * @description Investor can use this api to query managed sub account margin asset details
         */
        get: {
            parameters: {
                query: {
                    email: components["parameters"]["email"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sub account margin assset details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 999 */
                            marginLevel: string;
                            /** @example 0 */
                            totalAssetOfBtc: string;
                            /** @example 0 */
                            totalLiabilityOfBtc: string;
                            /** @example 0 */
                            totalNetAssetOfBtc: string;
                            userAssets: {
                                /** @example BTC */
                                asset: string;
                                /** @example 0 */
                                borrowed: string;
                                /** @example 0 */
                                free: string;
                                /** @example 0 */
                                interest: string;
                                /** @example 0 */
                                locked: string;
                                /** @example 0 */
                                netAsset: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/managed-subaccount/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Managed Sub-account List (For Investor)
         * @description Get investor's managed sub-account list.
         *
         *     Weight(UID): 60
         */
        get: {
            parameters: {
                query: {
                    email: components["parameters"]["email"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Managed sub account list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 3 */
                            total: number;
                            managerSubUserInfoVoList: {
                                /**
                                 * Format: int64
                                 * @example 1000138475670
                                 */
                                rootUserId: number;
                                /**
                                 * Format: int64
                                 * @example 1000137842513
                                 */
                                managersubUserId: number;
                                /**
                                 * Format: int64
                                 * @example 1000138475669
                                 */
                                bindParentUserId: number;
                                /** @example test_0_virtual@kq3kno9imanagedsub.com */
                                email?: string;
                                /**
                                 * Format: int64
                                 * @example 1678435149000
                                 */
                                insertTimeStamp: number;
                                /** @example wdyw8xsh8pey@test.com */
                                bindParentEmail: string;
                                /** @example true */
                                isSubUserEnabled: boolean;
                                /** @example true */
                                isUserActive: boolean;
                                /** @example true */
                                isMarginEnabled: boolean;
                                /** @example true */
                                isFutureEnabled: boolean;
                                /** @example true */
                                isSignedLVTRiskAgreement: boolean;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/managed-subaccount/deposit/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Managed Sub-account Deposit Address (For Investor Master Account)
         * @description Get investor's managed sub-account deposit address
         *
         *     Weight(UID): 1
         */
        get: {
            parameters: {
                query: {
                    email: components["parameters"]["email"];
                    /** @description Coin name */
                    coin: components["parameters"]["coin"];
                    network?: components["parameters"]["network"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Managed sub deposit address */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example USDT */
                            coin: string;
                            /** @example 0x206c22d833bb0bb2102da6b7c7d4c3eb14bcf73d */
                            address: string;
                            tag: string;
                            /** @example https://etherscan.io/address/0x206c22d833bb0bb2102da6b7c7d4c3eb14bcf73d */
                            url: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/managed-subaccount/query-trans-log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
         * @description Query Managed Sub Account Transfer Log (For Trading Team Sub Account)
         *
         *     Weight(UID): 60
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description Transfer Direction */
                    transfers: "FROM" | "TO";
                    /** @description Transfer function account type */
                    transferFunctionAccountType: "SPOT" | "MARGIN" | "ISOLATED_MARGIN" | "USDT_FUTURE" | "COIN_FUTURE";
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Managed sub deposit address */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 2 */
                            count: number;
                            managerSubTransferHistoryVos: {
                                /** @example test_0_virtual@kq3kno9imanagedsub.com */
                                fromEmail: string;
                                /** @example SPOT */
                                fromAccountType: string;
                                /** @example wdywl0lddakh@test.com */
                                toEmail: string;
                                /** @example SPOT */
                                toAccountType: string;
                                /** @example BNB */
                                asset: string;
                                /** @example 0.01 */
                                amount: string;
                                /**
                                 * Format: int64
                                 * @example 1679416673000
                                 */
                                scheduledData: number;
                                /**
                                 * Format: int64
                                 * @example 1679416673000
                                 */
                                createTime: number;
                                /** @example SUCCESS */
                                status: string;
                                /**
                                 * Format: int64
                                 * @example 91077779
                                 */
                                tranId: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/subAccountApi/ipRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get IP Restriction for a Sub-account API Key (For Master Account)
         * @description Weight(UID): 3000
         */
        get: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    subAccountApiKey: components["parameters"]["subAccountApiKey"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description IP Restriction information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ipRestrict: string;
                            /** @example [
                             *       "69.210.67.14",
                             *       "8.34.21.10"
                             *     ] */
                            ipList: string[];
                            /**
                             * Format: int64
                             * @example 1636369557189
                             */
                            updateTime: number;
                            /** @example k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf */
                            apiKey: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete IP List for a Sub-account API Key (For Master Account)
         * @description Weight(UID): 3000
         */
        delete: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    subAccountApiKey: components["parameters"]["subAccountApiKey"];
                    /** @description Can be added in batches, separated by commas */
                    ipAddress?: components["parameters"]["optionalIpAddress"];
                    /** @description third party IP list name */
                    thirdPartyName?: components["parameters"]["thirdPartyName"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Delete IP information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            ipRestrict: string;
                            /** @example [
                             *       "69.210.67.14",
                             *       "thirdPartyName"
                             *     ] */
                            ipList: string[];
                            /**
                             * Format: int64
                             * @example 1636369557189
                             */
                            updateTime: number;
                            /** @example k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf */
                            apiKey: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/transaction-statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Sub-account Transaction Statistics (For Master Account)
         * @description Query Sub-account Transaction statistics (For Master Account).
         *
         *     Weight(UID): 60
         */
        get: {
            parameters: {
                query: {
                    email: components["parameters"]["email"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sub account transaction statistics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 0 */
                            recent30BtcTotal: string;
                            /** @example 0 */
                            recent30BtcFuturesTotal: string;
                            /** @example 0 */
                            recent30BtcMarginTotal: string;
                            /** @example 0 */
                            recent30BusdTotal: string;
                            /** @example 0 */
                            recent30BusdFuturesTotal: string;
                            /** @example 0 */
                            recent30BusdMarginTotal: string;
                            tradeInfoVos: {
                                /**
                                 * Format: int64
                                 * @example 1000138138384
                                 */
                                userId?: number;
                                /**
                                 * Format: float
                                 * @example 0
                                 */
                                btc?: number;
                                /**
                                 * Format: float
                                 * @example 0
                                 */
                                btcFutures?: number;
                                /**
                                 * Format: float
                                 * @example 0
                                 */
                                btcMargin?: number;
                                /**
                                 * Format: float
                                 * @example 0
                                 */
                                busd?: number;
                                /**
                                 * Format: float
                                 * @example 0
                                 */
                                busdFutures?: number;
                                /**
                                 * Format: float
                                 * @example 0
                                 */
                                busdMargin?: number;
                                /**
                                 * Format: int64
                                 * @example 1676851200000
                                 */
                                date?: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/sub-account/eoptions/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable Options for Sub-account (For Master Account)(USER_DATA)
         * @description Enable Options for Sub-account (For Master Account).
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    email: components["parameters"]["email"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sub account EOptions status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example alice@test.com */
                            email: string;
                            /** @example true */
                            isEOptionsEnabled: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/sub-account/subAccountApi/ipRestriction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update IP Restriction for Sub-Account API key (For Master Account)
         * @description Update IP Restriction for Sub-Account API key
         *
         *     Weight(UID): 3000
         */
        post: {
            parameters: {
                query: {
                    /** @description Sub-account email */
                    email: components["parameters"]["subAccountEmail"];
                    subAccountApiKey: components["parameters"]["subAccountApiKey"];
                    /** @description IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only. 3 = Restrict access to users' trusted third party IPs only */
                    status: string;
                    /** @description third party IP list name */
                    thirdPartyName?: components["parameters"]["thirdPartyName"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Update IP Restriction */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 2 */
                            status: string;
                            /** @example [
                             *       "69.210.67.14",
                             *       "8.34.21.10",
                             *       "thirdPartyName"
                             *     ] */
                            ipList: string[];
                            /**
                             * Format: int64
                             * @example 1636369557189
                             */
                            updateTime: number;
                            /** @example k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf */
                            apiKey: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v4/sub-account/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Sub-account Assets (For Master Account)
         * @description Fetch sub-account assets
         *
         *     Weight(UID): 60
         */
        get: {
            parameters: {
                query: {
                    email: components["parameters"]["email"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sub account balances */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            balances: {
                                /** @example BNB */
                                asset: string;
                                /** @example 10000 */
                                free: string;
                                /** @example 0 */
                                locked: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/userDataStream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Ping/Keep-alive a ListenKey (USER_STREAM)
         * @description Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.
         *
         *     Weight: 2
         */
        put: {
            parameters: {
                query?: {
                    /** @description User websocket listen key */
                    listenKey?: components["parameters"]["listenKey"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        /**
         * Create a ListenKey (USER_STREAM)
         * @description Start a new user data stream.
         *     The stream will close after 60 minutes unless a keepalive is sent. If the account has an active `listenKey`, that `listenKey` will be returned and its validity will be extended for 60 minutes.
         *
         *     Weight: 2
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Listen key */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1 */
                            listenKey: string;
                        };
                    };
                };
            };
        };
        /**
         * Close a ListenKey (USER_STREAM)
         * @description Close out a user data stream.
         *
         *     Weight: 2
         */
        delete: {
            parameters: {
                query?: {
                    /** @description User websocket listen key */
                    listenKey?: components["parameters"]["listenKey"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/userDataStream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Ping/Keep-alive a ListenKey (USER_STREAM)
         * @description Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.
         *
         *     Weight: 1
         */
        put: {
            parameters: {
                query?: {
                    /** @description User websocket listen key */
                    listenKey?: components["parameters"]["listenKey"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        /**
         * Create a ListenKey (USER_STREAM)
         * @description Start a new user data stream.
         *     The stream will close after 60 minutes unless a keepalive is sent. If the account has an active `listenKey`, that `listenKey` will be returned and its validity will be extended for 60 minutes.
         *
         *     Weight: 1
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Margin listen key */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1 */
                            listenKey: string;
                        };
                    };
                };
            };
        };
        /**
         * Close a ListenKey (USER_STREAM)
         * @description Close out a user data stream.
         *
         *     Weight: 1
         */
        delete: {
            parameters: {
                query?: {
                    /** @description User websocket listen key */
                    listenKey?: components["parameters"]["listenKey"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/userDataStream/isolated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Ping/Keep-alive a Listen Key (USER_STREAM)
         * @description Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.
         *
         *     Weight: 1
         */
        put: {
            parameters: {
                query?: {
                    /** @description User websocket listen key */
                    listenKey?: components["parameters"]["listenKey"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        /**
         * Generate a Listen Key (USER_STREAM)
         * @description Start a new user data stream.
         *     The stream will close after 60 minutes unless a keepalive is sent. If the account has an active `listenKey`, that `listenKey` will be returned and its validity will be extended for 60 minutes.
         *
         *     Weight: 1
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Isolated margin listen key */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example T3ee22BIYuWqmvne0HNq2A2WsFlEtLhvWCtItw6ffhhdmjifQ2tRbuKkTHhr */
                            listenKey: string;
                        };
                    };
                };
            };
        };
        /**
         * Close a ListenKey (USER_STREAM)
         * @description Close out a user data stream.
         *
         *     Weight: 1
         */
        delete: {
            parameters: {
                query?: {
                    /** @description User websocket listen key */
                    listenKey?: components["parameters"]["listenKey"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/fiat/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fiat Deposit/Withdraw History (USER_DATA)
         * @description - If beginTime and endTime are not sent, the recent 30-day data will be returned.
         *
         *     Weight(UID): 90000
         */
        get: {
            parameters: {
                query: {
                    /** @description * `0` - deposit
                     *     * `1` - withdraw */
                    transactionType: components["parameters"]["transactionType"];
                    beginTime?: components["parameters"]["beginTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description Default 100, max 500 */
                    rows?: components["parameters"]["rows"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description History of deposit/withdraw orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            data: {
                                /** @example 7d76d611-0568-4f43-afb6-24cac7767365 */
                                orderNo: string;
                                /** @example BRL */
                                fiatCurrency: string;
                                /** @example 10.00 */
                                indicatedAmount: string;
                                /** @example 10.00 */
                                amount: string;
                                /** @example 0.00 */
                                totalFee: string;
                                /** @example BankAccount */
                                method: string;
                                /**
                                 * @description Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
                                 * @example Expired
                                 */
                                status: string;
                                /**
                                 * Format: int64
                                 * @example 1626144956000
                                 */
                                createTime: number;
                                /**
                                 * Format: int64
                                 * @example 1626400907000
                                 */
                                updateTime: number;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/fiat/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fiat Payments History (USER_DATA)
         * @description - If beginTime and endTime are not sent, the recent 30-day data will be returned.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description * `0` - deposit
                     *     * `1` - withdraw */
                    transactionType: components["parameters"]["transactionType"];
                    beginTime?: components["parameters"]["beginTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description Default 100, max 500 */
                    rows?: components["parameters"]["rows"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description History of fiat payments */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            data: {
                                /** @example 353fca443f06466db0c4dc89f94f027a */
                                orderNo: string;
                                /**
                                 * @description Fiat trade amount
                                 * @example 20.00
                                 */
                                sourceAmount: string;
                                /**
                                 * @description Fiat token
                                 * @example EUR
                                 */
                                fiatCurrency: string;
                                /**
                                 * @description Crypto trade amount
                                 * @example 4.462
                                 */
                                obtainAmount: string;
                                /**
                                 * @description Crypto token
                                 * @example LUNA
                                 */
                                cryptoCurrency: string;
                                /**
                                 * @description Trade fee
                                 * @example 0.2
                                 */
                                totalFee: string;
                                /** @example 4.437472 */
                                price: string;
                                /**
                                 * @description Processing, Completed, Failed, Refunded
                                 * @example Failed
                                 */
                                status: string;
                                /**
                                 * Format: int64
                                 * @example 1624529919000
                                 */
                                createTime: number;
                                /**
                                 * Format: int64
                                 * @example 1624529919000
                                 */
                                updateTime: number;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/project/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Fixed/Activity Project List(USER_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    asset?: components["parameters"]["optionalAsset"];
                    type: components["parameters"]["fixedAndActivityProductType"];
                    /** @description Default `ALL` */
                    status?: components["parameters"]["optionalFixedAndActivityProductStatus"];
                    /** @description default "true" */
                    isSortAsc?: components["parameters"]["isSortAsc"];
                    /** @description Default `START_TIME` */
                    sortBy?: components["parameters"]["sortBy"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of fixed projects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example USDT */
                            asset: string;
                            /**
                             * Format: int64
                             * @example 1
                             */
                            displayPriority: number;
                            /**
                             * Format: int64
                             * @example 90
                             */
                            duration: number;
                            /** @example 1.35810000 */
                            interestPerLot: string;
                            /** @example 0.05510000 */
                            interestRate: string;
                            /** @example 100.00000000 */
                            lotSize: string;
                            /**
                             * Format: int64
                             * @example 1
                             */
                            lotsLowLimit: number;
                            /**
                             * Format: int64
                             * @example 74155
                             */
                            lotsPurchased: number;
                            /**
                             * Format: int64
                             * @example 80000
                             */
                            lotsUpLimit: number;
                            /**
                             * Format: int64
                             * @example 2000
                             */
                            maxLotsPerUser: number;
                            needKyc: boolean;
                            /** @example CUSDT90DAYSS001 */
                            projectId: string;
                            /** @example USDT */
                            projectName: string;
                            /** @example PURCHASING */
                            status: string;
                            /** @example CUSTOMIZED_FIXED */
                            type: string;
                            withAreaLimitation: boolean;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/customizedFixed/purchase": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Purchase Fixed/Activity Project (USER_DATA)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    projectId: components["parameters"]["projectId"];
                    lot: components["parameters"]["lot"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Generated Purchase Id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 18356 */
                            purchaseId: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/project/position/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Fixed/Activity Project Position (USER_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    asset: components["parameters"]["asset"];
                    projectId?: components["parameters"]["fixedAndActivityProjectId"];
                    /** @description Default `ALL` */
                    status?: components["parameters"]["optionalFixedAndActivityProductStatus"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of fixed project positions */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example USDT */
                            asset: string;
                            canTransfer: boolean;
                            /**
                             * Format: int64
                             * @example 1587010770000
                             */
                            createTimestamp: number;
                            /**
                             * Format: int64
                             * @example 14
                             */
                            duration: number;
                            /**
                             * Format: int64
                             * @example 1588291200000
                             */
                            endTime: number;
                            /** @example 0.19950000 */
                            interest: string;
                            /** @example 0.05201250 */
                            interestRate: string;
                            /**
                             * Format: int64
                             * @example 1
                             */
                            lot: number;
                            /**
                             * Format: int64
                             * @example 51724
                             */
                            positionId: number;
                            /** @example 100.00000000 */
                            principal: string;
                            /** @example CUSDT14DAYSS001 */
                            projectId: string;
                            /** @example USDT */
                            projectName: string;
                            /**
                             * Format: int64
                             * @example 1587010771000
                             */
                            purchaseTime: number;
                            /**
                             * Format: date
                             * @example 2020-05-01
                             */
                            redeemDate: string;
                            /**
                             * Format: int64
                             * @example 1587081600000
                             */
                            startTime: number;
                            /** @example HOLDING */
                            status: string;
                            /** @example CUSTOMIZED_FIXED */
                            type: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/positionChanged": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Fixed/Activity Position to Daily Position (USER_DATA)
         * @description - PositionId is mandatory parameter for fixed position.
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    projectId: components["parameters"]["projectId"];
                    lot: components["parameters"]["lot"];
                    positionId?: components["parameters"]["optionalPositionId"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Purchase information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 862290
                             */
                            dailyPurchaseId: number;
                            success: boolean;
                            /**
                             * Format: int64
                             * @example 1577233578000
                             */
                            time: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/pub/algoList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Acquiring Algorithm (MARKET_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Algorithm information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            data: {
                                /** @example sha256 */
                                algoName: string;
                                /**
                                 * Format: int64
                                 * @example 1
                                 */
                                algoId: number;
                                /**
                                 * Format: int64
                                 * @example 0
                                 */
                                poolIndex: number;
                                /** @example h/s */
                                unit: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/pub/coinList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Acquiring CoinName (MARKET_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Coin information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            data: {
                                /** @example BTC */
                                coinName: string;
                                /**
                                 * Format: int64
                                 * @example 1
                                 */
                                coinId: number;
                                /**
                                 * Format: int64
                                 * @example 0
                                 */
                                poolIndex: number;
                                /**
                                 * Format: int64
                                 * @example 1
                                 */
                                algoId: number;
                                /** @example sha256 */
                                algoName: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/worker/detail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Request for Detail Miner List (USER_DATA)
         * @description Weight(IP): 5
         */
        get: {
            parameters: {
                query: {
                    /** @description Algorithm(sha256) */
                    algo: components["parameters"]["algo"];
                    /** @description Mining Account */
                    userName: components["parameters"]["userName"];
                    /** @description Miner’s name */
                    workerName: components["parameters"]["workerName"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of workers' hashrates' */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            data: {
                                /**
                                 * @description Mining Account name
                                 * @example bhdc1.16A10404B
                                 */
                                workerName: string;
                                /**
                                 * @description Type of hourly hashrate
                                 * @example H_hashrate
                                 */
                                type: string;
                                hashrateDatas: {
                                    /**
                                     * Format: int64
                                     * @example 1587902400000
                                     */
                                    time: number;
                                    /** @example 0 */
                                    hashrate: string;
                                    /**
                                     * Format: int64
                                     * @description Rejection Rate
                                     * @example 0
                                     */
                                    reject: number;
                                }[];
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/worker/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Request for Miner List (USER_DATA)
         * @description Weight(IP): 5
         */
        get: {
            parameters: {
                query: {
                    /** @description Algorithm(sha256) */
                    algo: components["parameters"]["algo"];
                    /** @description Mining Account */
                    userName: components["parameters"]["userName"];
                    /** @description Page number, default is first page, start form 1 */
                    pageIndex?: components["parameters"]["pageIndex"];
                    /** @description sort sequence(default=0)0 positive sequence, 1 negative sequence */
                    sort?: components["parameters"]["sort"];
                    /** @description Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time */
                    sortColumn?: components["parameters"]["sortColumn"];
                    /** @description miners status(default=0)0 all, 1 valid, 2 invalid, 3 failure */
                    workerStatus?: components["parameters"]["workerStatus"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of workers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            data: {
                                workerDatas: {
                                    /** @example 1420554439452400131 */
                                    workerId: string;
                                    /** @example 2X73 */
                                    workerName: string;
                                    /**
                                     * Format: int64
                                     * @description Status：1 valid, 2 invalid, 3 no longer valid
                                     * @example 3
                                     */
                                    status: number;
                                    /**
                                     * Format: int64
                                     * @description Real-time rate
                                     * @example 0
                                     */
                                    hashRate: number;
                                    /**
                                     * Format: int64
                                     * @description 24H Hashrate
                                     * @example 0
                                     */
                                    dayHashRate: number;
                                    /**
                                     * Format: int64
                                     * @description Real-time Rejection Rate
                                     * @example 0
                                     */
                                    rejectRate: number;
                                    /**
                                     * Format: int64
                                     * @description Last submission time
                                     * @example 1587712919000
                                     */
                                    lastShareTime: number;
                                }[];
                                /**
                                 * Format: int64
                                 * @example 18530
                                 */
                                totalNum: number;
                                /**
                                 * Format: int64
                                 * @example 20
                                 */
                                pageSize: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/payment/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Earnings List (USER_DATA)
         * @description Weight(IP): 5
         */
        get: {
            parameters: {
                query: {
                    /** @description Algorithm(sha256) */
                    algo: components["parameters"]["algo"];
                    /** @description Mining Account */
                    userName: components["parameters"]["userName"];
                    /** @description Coin name */
                    coin?: components["parameters"]["optionalCoin"];
                    /** @description Search date, millisecond timestamp, while empty query all */
                    startDate?: components["parameters"]["startDate"];
                    /** @description Search date, millisecond timestamp, while empty query all */
                    endDate?: components["parameters"]["endDate"];
                    /** @description Page number, default is first page, start form 1 */
                    pageIndex?: components["parameters"]["pageIndex"];
                    /** @description Number of pages, minimum 10, maximum 200 */
                    pageSize?: components["parameters"]["pageSize"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of earnings */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            data: {
                                accountProfits: {
                                    /**
                                     * Format: int64
                                     * @description Mining date
                                     * @example 1586188800000
                                     */
                                    time: number;
                                    /**
                                     * Format: int64
                                     * @description 0:Mining Wallet,5:Mining Address,7:Pool Savings,8:Transferred,31:Income Transfer ,32:Hashrate Resale-Mining Wallet 33:Hashrate Resale-Pool Savings
                                     * @example 31
                                     */
                                    type: number;
                                    /**
                                     * Format: nullable
                                     * @description Transferred Hashrate
                                     * @example null
                                     */
                                    hashTransfer: number;
                                    /**
                                     * Format: nullable
                                     * @description Transferred Income
                                     * @example null
                                     */
                                    transferAmount: number;
                                    /**
                                     * Format: int64
                                     * @description Daily Hashrate
                                     * @example 129129903378244
                                     */
                                    dayHashRate: number;
                                    /**
                                     * Format: double
                                     * @description Earnings Amount
                                     * @example 8.6083060304
                                     */
                                    profitAmount: number;
                                    /**
                                     * @description Coin Type
                                     * @example BTC
                                     */
                                    coinName: string;
                                    /**
                                     * Format: int32
                                     * @description Status：0:Unpaid, 1:Paying  2：Paid
                                     * @example 2
                                     */
                                    status: number;
                                }[];
                                /**
                                 * Format: int64
                                 * @description Total Rows
                                 * @example 3
                                 */
                                totalNum: number;
                                /**
                                 * Format: int64
                                 * @description Rows per page
                                 * @example 20
                                 */
                                pageSize: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/payment/other": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Extra Bonus List (USER_DATA)
         * @description Weight(IP): 5
         */
        get: {
            parameters: {
                query: {
                    /** @description Algorithm(sha256) */
                    algo: components["parameters"]["algo"];
                    /** @description Mining Account */
                    userName: components["parameters"]["userName"];
                    /** @description Coin name */
                    coin?: components["parameters"]["optionalCoin"];
                    /** @description Search date, millisecond timestamp, while empty query all */
                    startDate?: components["parameters"]["startDate"];
                    /** @description Search date, millisecond timestamp, while empty query all */
                    endDate?: components["parameters"]["endDate"];
                    /** @description Page number, default is first page, start form 1 */
                    pageIndex?: components["parameters"]["pageIndex"];
                    /** @description Number of pages, minimum 10, maximum 200 */
                    pageSize?: components["parameters"]["pageSize"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of extra bonuses */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            data: {
                                otherProfits: {
                                    /**
                                     * Format: int64
                                     * @description Mining date
                                     * @example 1607443200000
                                     */
                                    time: number;
                                    /**
                                     * @description Coin Name
                                     * @example BTC
                                     */
                                    coinName: string;
                                    /**
                                     * Format: int32
                                     * @description 1: Merged Mining, 2: Activity Bonus, 3:Rebate 4:Smart Pool 6:Income Transfer 7:Pool Savings
                                     * @example 4
                                     */
                                    type: number;
                                    /**
                                     * Format: double
                                     * @example 0.0011859
                                     */
                                    profitAmount: number;
                                    /**
                                     * Format: int32
                                     * @description 0:Unpaid, 1:Paying  2：Paid
                                     * @example 2
                                     */
                                    status: number;
                                }[];
                                /**
                                 * Format: int64
                                 * @description Total Rows
                                 * @example 3
                                 */
                                totalNum: number;
                                /**
                                 * Format: int64
                                 * @description Rows per page
                                 * @example 20
                                 */
                                pageSize: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/hash-transfer/config/details/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Hashrate Resale List (USER_DATA)
         * @description Weight(IP): 5
         */
        get: {
            parameters: {
                query: {
                    /** @description Page number, default is first page, start form 1 */
                    pageIndex?: components["parameters"]["pageIndex"];
                    /** @description Number of pages, minimum 10, maximum 200 */
                    pageSize?: components["parameters"]["pageSize"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of hashrate resales */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            data: {
                                configDetails: {
                                    /**
                                     * Format: int64
                                     * @description Mining ID
                                     * @example 168
                                     */
                                    configId: number;
                                    /**
                                     * @description Transfer out of subaccount
                                     * @example 123
                                     */
                                    poolUsername: string;
                                    /**
                                     * @description Transfer into subaccount
                                     * @example user1
                                     */
                                    toPoolUsername: string;
                                    /**
                                     * @description Transfer algorithm
                                     * @example Ethash
                                     */
                                    algoName: string;
                                    /**
                                     * Format: int64
                                     * @description Transferred Hashrate quantity
                                     * @example 5000000
                                     */
                                    hashRate: number;
                                    /**
                                     * Format: int64
                                     * @description Start date
                                     * @example 20201210
                                     */
                                    startDay: number;
                                    /**
                                     * Format: int64
                                     * @description End date
                                     * @example 20210405
                                     */
                                    endDay: number;
                                    /**
                                     * Format: int32
                                     * @description 0 Processing, 1：Cancelled, 2：Terminated
                                     * @example 1
                                     */
                                    status: number;
                                }[];
                                /**
                                 * Format: int64
                                 * @example 21
                                 */
                                totalNum: number;
                                /**
                                 * Format: int64
                                 * @example 200
                                 */
                                pageSize: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/hash-transfer/profit/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Hashrate Resale Details (USER_DATA)
         * @description Weight(IP): 5
         */
        get: {
            parameters: {
                query: {
                    /** @description Mining ID */
                    configId: components["parameters"]["configId"];
                    /** @description Mining Account */
                    userName: components["parameters"]["userName"];
                    /** @description Page number, default is first page, start form 1 */
                    pageIndex?: components["parameters"]["pageIndex"];
                    /** @description Number of pages, minimum 10, maximum 200 */
                    pageSize?: components["parameters"]["pageSize"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of hashrate resale details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            data: {
                                profitTransferDetails: {
                                    /**
                                     * @description Transfer out of sub-account
                                     * @example test4001
                                     */
                                    poolUsername: string;
                                    /**
                                     * @description Transfer into subaccount
                                     * @example pop
                                     */
                                    toPoolUsername: string;
                                    /**
                                     * @description Transfer algorithm
                                     * @example sha256
                                     */
                                    algoName: string;
                                    /**
                                     * Format: int64
                                     * @description Transferred Hashrate quantity
                                     * @example 200000000000
                                     */
                                    hashRate: number;
                                    /**
                                     * Format: int64
                                     * @description Transfer date
                                     * @example 20201213
                                     */
                                    day: number;
                                    /**
                                     * Format: double
                                     * @description Transfer income
                                     * @example 0.2256872
                                     */
                                    amount: number;
                                    /** @example BTC */
                                    coinName: string;
                                }[];
                                /**
                                 * Format: int64
                                 * @example 8
                                 */
                                totalNum: number;
                                /**
                                 * Format: int64
                                 * @example 200
                                 */
                                pageSize: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/hash-transfer/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Hashrate Resale Request (USER_DATA)
         * @description Weight(IP): 5
         */
        post: {
            parameters: {
                query: {
                    /** @description Mining Account */
                    userName: components["parameters"]["userName"];
                    /** @description Algorithm(sha256) */
                    algo: components["parameters"]["algo"];
                    /** @description Search date, millisecond timestamp, while empty query all */
                    startDate?: components["parameters"]["startDate"];
                    /** @description Search date, millisecond timestamp, while empty query all */
                    endDate?: components["parameters"]["endDate"];
                    /** @description Mining Account */
                    toPoolUser: components["parameters"]["toPoolUser"];
                    /** @description Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000) */
                    hashRate: components["parameters"]["hashRate"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Mining Account Id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            /**
                             * Format: int64
                             * @description Mining Account
                             * @example 171
                             */
                            data: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/hash-transfer/config/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Hashrate Resale configuration (USER_DATA)
         * @description Weight(IP): 5
         */
        post: {
            parameters: {
                query: {
                    /** @description Mining ID */
                    configId: components["parameters"]["configId"];
                    /** @description Mining Account */
                    userName: components["parameters"]["userName"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success flag */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            data: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/statistics/user/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Statistic List (USER_DATA)
         * @description Weight(IP): 5
         */
        get: {
            parameters: {
                query: {
                    /** @description Algorithm(sha256) */
                    algo: components["parameters"]["algo"];
                    /** @description Mining Account */
                    userName: components["parameters"]["userName"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Mining account statistics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            data: {
                                /** @example 457835490067496409.00000000 */
                                fifteenMinHashRate: string;
                                /** @example 214289268068874127.65000000 */
                                dayHashRate: string;
                                /**
                                 * Format: int64
                                 * @example 0
                                 */
                                validNum: number;
                                /**
                                 * Format: int64
                                 * @example 17562
                                 */
                                invalidNum: number;
                                profitToday: {
                                    /** @example 0.00314332 */
                                    BTC: string;
                                    /** @example 56.17055953 */
                                    BSV: string;
                                    /** @example 106.61586001 */
                                    BCH: string;
                                };
                                profitYesterday: {
                                    /** @example 0.00314332 */
                                    BTC: string;
                                    /** @example 56.17055953 */
                                    BSV: string;
                                    /** @example 106.61586001 */
                                    BCH: string;
                                };
                                /** @example test */
                                userName: string;
                                /** @example h/s */
                                unit: string;
                                /** @example sha256 */
                                algo: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/statistics/user/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Account List (USER_DATA)
         * @description Weight(IP): 5
         */
        get: {
            parameters: {
                query: {
                    /** @description Algorithm(sha256) */
                    algo: components["parameters"]["algo"];
                    /** @description Mining Account */
                    userName: components["parameters"]["userName"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of mining accounts */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            data: {
                                /** @example H_hashrate */
                                type: string;
                                /** @example test */
                                userName: string;
                                list: {
                                    /**
                                     * Format: int64
                                     * @example 1585267200000
                                     */
                                    time: number;
                                    /** @example 0.00000000 */
                                    hashrate: string;
                                    /** @example 0.00000000 */
                                    reject: string;
                                }[];
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/mining/payment/uid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Mining Account Earning (USER_DATA)
         * @description Weight(IP): 5
         */
        get: {
            parameters: {
                query: {
                    /** @description Algorithm(sha256) */
                    algo: components["parameters"]["algo"];
                    /** @description Search date, millisecond timestamp, while empty query all */
                    startDate?: components["parameters"]["startDate"];
                    /** @description Search date, millisecond timestamp, while empty query all */
                    endDate?: components["parameters"]["endDate"];
                    /** @description Page number, default is first page, start form 1 */
                    pageIndex?: components["parameters"]["pageIndex"];
                    /** @description Number of pages, minimum 10, maximum 200 */
                    pageSize?: components["parameters"]["pageSize"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Mining account earnings */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 0
                             */
                            code: number;
                            /** @example  */
                            msg: string;
                            data: {
                                accountProfits: {
                                    /**
                                     * Format: int64
                                     * @example 1607443200000
                                     */
                                    time: number;
                                    /** @example BTC */
                                    coinName: string;
                                    /**
                                     * Format: int32
                                     * @description 0:Referral 1:Refund 2:Rebate
                                     * @example 2
                                     */
                                    type: number;
                                    /**
                                     * Format: int32
                                     * @description puid
                                     * @example 59985472
                                     */
                                    puid: number;
                                    /**
                                     * @description Mining account
                                     * @example vdvaghani
                                     */
                                    subName: string;
                                    /** @example 0.09186957 */
                                    amount: number;
                                }[];
                                /**
                                 * Format: int32
                                 * @example 3
                                 */
                                totalNum: number;
                                /**
                                 * Format: int32
                                 * @example 20
                                 */
                                pageSize: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/futures/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Future Account Transaction History List (USER_DATA)
         * @description Weight(IP): 10
         */
        get: {
            parameters: {
                query: {
                    asset: components["parameters"]["asset"];
                    /** @description UTC timestamp in ms */
                    startTime: components["parameters"]["startTimeReq"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Futures Transfer Query */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example USDT */
                                asset: string;
                                /**
                                 * Format: int64
                                 * @example 100000001
                                 */
                                tranId: number;
                                /** @example 40.84624400 */
                                amount: string;
                                /** @example 1 */
                                type: string;
                                /**
                                 * Format: int64
                                 * @example 1555056425000
                                 */
                                timestamp: number;
                                /**
                                 * @description one of PENDING (pending to execution), CONFIRMED (successfully transfered), FAILED (execution failed, nothing happened to your account);
                                 * @example CONFIRMED
                                 */
                                status: string;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * New Future Account Transfer (USER_DATA)
         * @description Execute transfer between spot account and futures account.
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    asset: components["parameters"]["asset"];
                    amount: components["parameters"]["amount"];
                    /** @description 1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account. */
                    type: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Futures Transfer */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 100000001
                             */
                            tranId: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/futures/histDataLink": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Future TickLevel Orderbook Historical Data Download Link (USER_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    symbol: string;
                    dataType: "T_DEPTH" | "S_DEPTH";
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description data link */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: {
                                /** @example 2023-06-30 */
                                day: string;
                                /** @example https://bin-prod-user-rebate-bucket.s3.ap-northeast-1.amazonaws.com/xxx */
                                url: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/algo/futures/newOrderVp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Volume Participation(VP) New Order (TRADE)
         * @description Send in a VP new order. Only support on USDⓈ-M Contracts.
         *
         *     - You need to enable `Futures Trading Permission` for the api key which requests this endpoint.
         *     - Base URL: https://api.binance.com
         *
         *     - Total Algo open orders max allowed: 10 orders.
         *     - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi.
         *     - Receiving "success": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive "success": true, but the order status will be expired after we check it.
         *
         *     Weight(UID): 3000
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    side: components["parameters"]["side"];
                    /** @description Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. */
                    positionSide?: components["parameters"]["positionSide"];
                    /** @description Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT */
                    quantity: number;
                    /** @description Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH */
                    urgency: "LOW" | "MEDIUM" | "HIGH";
                    /** @description A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value */
                    clientAlgoId?: string;
                    /** @description 'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position */
                    reduceOnly?: boolean;
                    /** @description Limit price of the order; If it is not sent, will place order by market price by default */
                    limitPrice?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Volume Participation(VP) Order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 00358ce6a268403398bd34eaa36dffe7 */
                            clientAlgoId: string;
                            /** @example true */
                            success: boolean;
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example OK */
                            msg: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/algo/futures/newOrderTwap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Time-Weighted Average Price(Twap) New Order (TRADE)
         * @description Send in a Twap new order. Only support on USDⓈ-M Contracts.
         *
         *     You need to enable Futures Trading Permission for the api key which requests this endpoint.
         *     Base URL: https://api.binance.com
         *
         *     - Total Algo open orders max allowed: 10 orders.
         *     - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi.
         *     - Receiving "success": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive "success": true, but the order status will be expired after we check it.
         *     - quantity * 60 / duration should be larger than minQty
         *     - duration cannot be less than 5 mins or more than 24 hours.
         *     - For delivery contracts, TWAP end time should be one hour earlier than the delivery time of the symbol.
         *
         *     Weight(UID): 3000
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    side: components["parameters"]["side"];
                    /** @description Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. */
                    positionSide?: components["parameters"]["positionSide"];
                    /** @description Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT */
                    quantity: number;
                    /** @description Duration for TWAP orders in seconds. [300, 86400];Less than 5min => defaults to 5 min; Greater than 24h => defaults to 24h */
                    duration: number;
                    /** @description A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value */
                    clientAlgoId?: string;
                    /** @description 'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position */
                    reduceOnly?: boolean;
                    /** @description Limit price of the order; If it is not sent, will place order by market price by default */
                    limitPrice?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Time-Weighted Average Price(Twap) New Order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 00358ce6a268403398bd34eaa36dffe7 */
                            clientAlgoId: string;
                            /** @example true */
                            success: boolean;
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example OK */
                            msg: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/algo/futures/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Cancel Algo Order(TRADE)
         * @description Cancel an active order.
         *     - You need to enable Futures Trading Permission for the api key which requests this endpoint.
         *     - Base URL: https://api.binance.com
         *
         *     Weight(IP): 1
         */
        delete: {
            parameters: {
                query: {
                    /** @description Eg. 14511 */
                    algoId: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cancelled order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 14511
                             */
                            algoId: number;
                            /** @example true */
                            success: boolean;
                            /**
                             * Format: int64
                             * @example 0
                             */
                            code: number;
                            /** @example OK */
                            msg: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/algo/futures/openOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Current Algo Open Orders (USER_DATA)
         * @description - You need to enable Futures Trading Permission for the api key which requests this endpoint.
         *     - Base URL: https://api.binance.com
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Open Algo Orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                            orders?: {
                                /**
                                 * Format: int64
                                 * @example 14517
                                 */
                                algoId: number;
                                /** @example ETHUSDT */
                                symbol: string;
                                /** @example SELL */
                                side: string;
                                /** @example SHORT */
                                positionSide: string;
                                /** @example 5.00 */
                                totalQty: string;
                                /** @example 0.000 */
                                executedQty: string;
                                /** @example 0.00000000 */
                                executedAmt: string;
                                /** @example 0.00 */
                                avgPrice: string;
                                /** @example d7096549481642f8a0bb69e9e2e31f2e */
                                clientAlgoId: string;
                                /**
                                 * Format: int64
                                 * @example 1649756817004
                                 */
                                bookTime: number;
                                /**
                                 * Format: int64
                                 * @example 0
                                 */
                                endTime: number;
                                /** @example WORKING */
                                algoStatus: string;
                                /** @example VP */
                                algoType: string;
                                /** @example LOW */
                                urgency: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/algo/futures/historicalOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Historical Algo Orders (USER_DATA)
         * @description - You need to enable Futures Trading Permission for the api key which requests this endpoint.
         *     - Base URL: https://api.binance.com
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol?: components["parameters"]["optionalSymbol"];
                    side?: components["parameters"]["optionalSide"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description MIN 1, MAX 100; Default 100 */
                    pageSize?: components["parameters"]["smallPageSize"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Historical Algo Orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                            orders: {
                                /**
                                 * Format: int64
                                 * @example 14517
                                 */
                                algoId: number;
                                /** @example ETHUSDT */
                                symbol: string;
                                /** @example SELL */
                                side: string;
                                /** @example SHORT */
                                positionSide: string;
                                /** @example 5.00 */
                                totalQty: string;
                                /** @example 0.000 */
                                executedQty: string;
                                /** @example 0.00000000 */
                                executedAmt: string;
                                /** @example 0.00 */
                                avgPrice: string;
                                /** @example d7096549481642f8a0bb69e9e2e31f2e */
                                clientAlgoId: string;
                                /**
                                 * Format: int64
                                 * @example 1649756817004
                                 */
                                bookTime: number;
                                /**
                                 * Format: int64
                                 * @example 1649757088101
                                 */
                                endTime: number;
                                /** @example WORKING */
                                algoStatus: string;
                                /** @example VP */
                                algoType: string;
                                /** @example LOW */
                                urgency: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/algo/futures/subOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Sub Orders (USER_DATA)
         * @description - You need to enable Futures Trading Permission for the api key which requests this endpoint.
         *     - Base URL: https://api.binance.com
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    algoId: number;
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description MIN 1, MAX 100; Default 100 */
                    pageSize?: components["parameters"]["smallPageSize"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sub orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                            /** @example 1.000 */
                            executedQty: string;
                            /** @example 3229.44000000 */
                            executedAmt: string;
                            subOrders: {
                                /**
                                 * Format: int64
                                 * @example 13723
                                 */
                                algoId: number;
                                /**
                                 * Format: int64
                                 * @example 8389765519993909000
                                 */
                                orderId: number;
                                /** @example FILLED */
                                orderStatus: string;
                                /** @example 1.000 */
                                executedQty?: string;
                                /** @example 3229.44000000 */
                                executedAmt: string;
                                /** @example -1.61471999 */
                                feeAmt: string;
                                /** @example USDT */
                                feeAsset: string;
                                /**
                                 * Format: int64
                                 * @example 1649756817004
                                 */
                                bookTime: number;
                                /** @example 3229.44 */
                                avgPrice: string;
                                /** @example SELL */
                                side: string;
                                /** @example ETHUSDT */
                                symbol: string;
                                /**
                                 * Format: int64
                                 * @example 1
                                 */
                                subId: number;
                                /** @example IMMEDIATE_OR_CANCEL */
                                timeInForce: string;
                                /** @example 1.000 */
                                origQty: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/algo/spot/newOrderTwap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Time-Weighted Average Price (Twap) New Order
         * @description Place a new spot TWAP order with Algo service.
         *
         *     Weight(UID): 3000
         */
        post: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    side: components["parameters"]["side"];
                    quantity: components["parameters"]["quantity"];
                    duration: number;
                    clientAlgoId?: string;
                    limitPrice?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description twap order response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 65ce1630101a480b85915d7e11fd5078 */
                            clientAlgoId: string;
                            /** @example true */
                            success: boolean;
                            /** @example 0 */
                            code: number;
                            /** @example OK */
                            msg: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/algo/spot/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Cancel Algo Order
         * @description Cancel an open TWAP order
         *
         *     Weight(IP): 1
         */
        delete: {
            parameters: {
                query: {
                    algoId: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cancelled twap order response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 14511
                             */
                            algoId: number;
                            /** @example true */
                            success: boolean;
                            /** @example 0 */
                            code: number;
                            /** @example OK */
                            msg: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/algo/spot/openOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Current Algo Open Orders
         * @description Get all open SPOT TWAP orders
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description twap open orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                            orders: {
                                /** @example 14517 */
                                algoId: number;
                                /** @example ETHUSDT */
                                symbol: string;
                                /** @example SELL */
                                side: string;
                                /** @example 5.000 */
                                totalQty: string;
                                /** @example 0.000 */
                                executedQty: string;
                                /** @example 0.000 */
                                executedAmt: string;
                                /** @example 0.00 */
                                avgPrice: string;
                                /** @example d7096549481642f8a0bb69e9e2e31f2e */
                                clientAlgoId: string;
                                /**
                                 * Format: int64
                                 * @example 1649756817004
                                 */
                                bookTime: number;
                                /**
                                 * Format: int64
                                 * @example 1649756817004
                                 */
                                endTime: number;
                                /** @example WORKING */
                                algoStatus: string;
                                /** @example TWAP */
                                algoType: string;
                                /** @example LOW */
                                urgency: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/algo/spot/historicalOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Historical Algo Orders
         * @description Get all historical SPOT TWAP orders
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Trading symbol, e.g. BNBUSDT */
                    symbol: components["parameters"]["symbol"];
                    side: components["parameters"]["side"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description MIN 1, MAX 100; Default 100 */
                    pageSize?: components["parameters"]["smallPageSize"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description twap historical orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                            orders: {
                                /** @example 14517 */
                                algoId: number;
                                /** @example ETHUSDT */
                                symbol: string;
                                /** @example SELL */
                                side: string;
                                /** @example 5.000 */
                                totalQty: string;
                                /** @example 0.000 */
                                executedQty: string;
                                /** @example 0.000 */
                                executedAmt: string;
                                /** @example 0.00 */
                                avgPrice: string;
                                /** @example d7096549481642f8a0bb69e9e2e31f2e */
                                clientAlgoId: string;
                                /**
                                 * Format: int64
                                 * @example 1649756817004
                                 */
                                bookTime: number;
                                /**
                                 * Format: int64
                                 * @example 1649756817004
                                 */
                                endTime: number;
                                /** @example WORKING */
                                algoStatus: string;
                                /** @example VP */
                                algoType: string;
                                /** @example LOW */
                                urgency: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/algo/spot/subOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Sub Orders
         * @description Get respective sub orders for a specified algoId
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    algoId: number;
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description MIN 1, MAX 100; Default 100 */
                    pageSize?: components["parameters"]["smallPageSize"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description twap sub orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                            /** @example 1.000 */
                            executedQty: string;
                            /** @example 3229.44000000 */
                            executedAmt: string;
                            subOrders: {
                                /** @example 14517 */
                                algoId: number;
                                /**
                                 * Format: int64
                                 * @example 8389765519993909000
                                 */
                                orderId: number;
                                /** @example FILLED */
                                orderStatus: string;
                                /** @example 0.000 */
                                executedQty: string;
                                /** @example 0.000 */
                                executedAmt: string;
                                /** @example -1.61471999 */
                                feeAmt: string;
                                /** @example USDT */
                                feeAsset: string;
                                /**
                                 * Format: int64
                                 * @example 1649319001964
                                 */
                                bookTime: number;
                                /** @example 3229.44 */
                                avgPrice: string;
                                /** @example SELL */
                                side: string;
                                /** @example ETHUSDT */
                                symbol: string;
                                /** @example 1 */
                                subId: number;
                                /** @example IMMEDIATE_OR_CANCEL */
                                timeInForce: string;
                                /** @example 1.000 */
                                origQty: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/portfolio/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Portfolio Margin Account (USER_DATA)
         * @description Get the account info
         *
         *     'Weight(IP): 1'
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Portfolio account. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Classic Portfolio margin account maintenance margin rate
                             * @example 1.87987800
                             */
                            uniMMR: string;
                            /**
                             * @description Account equity, unit is USD
                             * @example 122607.35137903
                             */
                            accountEquity: string;
                            /**
                             * @description Actual equity, unit is USD
                             * @example 142607.35137903
                             */
                            actualEquity: string;
                            /**
                             * @description Classic Portfolio margin account maintenance margin, unit is USD
                             * @example 23.72469206
                             */
                            accountMaintMargin: string;
                            /**
                             * @description Classic Portfolio margin account status:"NORMAL", "MARGIN_CALL", "SUPPLY_MARGIN", "REDUCE_ONLY", "ACTIVE_LIQUIDATION", "FORCE_LIQUIDATION", "BANKRUPTED"
                             * @example NORMAL
                             */
                            accountStatus: string;
                            /**
                             * @description PM_1 for classic PM, PM_2 for PM
                             * @example PM_1
                             */
                            accountType: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/portfolio/collateralRate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Portfolio Margin Collateral Rate (MARKET_DATA)
         * @description Portfolio Margin Collateral Rate.
         *
         *     Weight(IP): 50
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Portfolio Margin Collateral Rate. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example USDC */
                            asset: string;
                            /** @example 1.0000 */
                            collateralRate: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/portfolio/collateralRate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Portfolio Margin Pro Tiered Collateral Rate(USER_DATA)
         * @description Portfolio Margin PRO Tiered Collateral Rate
         *
         *     Weight(IP): 50
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Portfolio Margin Collateral Rate. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BNB */
                            asset: string;
                            collateralInfo: {
                                /** @example 0.0000 */
                                tierFloor: string;
                                /** @example 1000.0000 */
                                tierCap: string;
                                /** @example 1.0000 */
                                collateralRate: string;
                            }[];
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/portfolio/pmLoan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Portfolio Margin Bankruptcy Loan Amount (USER_DATA)
         * @description Query Portfolio Margin Bankruptcy Loan Amount.
         *
         *     Weight(UID): 500
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Portfolio Margin Bankruptcy Loan Amount. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BUSD */
                            asset: string;
                            /** @example 579.45 */
                            amount: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/portfolio/repay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Portfolio Margin Bankruptcy Loan Repay (USER_DATA)
         * @description Repay Portfolio Margin Bankruptcy Loan.
         *
         *     Weight(UID): 3000
         */
        post: {
            parameters: {
                query: {
                    from?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Transaction. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 58203331886213500
                             */
                            tranId: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/portfolio/interest-history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Classic Portfolio Margin Negative Balance Interest History (USER_DATA)
         * @description Query interest history of negative balance for portfolio margin.
         *
         *     Weight(IP): 50
         */
        get: {
            parameters: {
                query: {
                    asset: components["parameters"]["asset"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Balance interest history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example USDT */
                            asset: string;
                            /** @example 24.4440 */
                            interest: string;
                            /**
                             * Format: int64
                             * @example 1672801339253
                             */
                            interestAccruedTime: number;
                            /** @example 0.0001164 */
                            interestRate: string;
                            /** @example 210000 */
                            principal: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/portfolio/asset-index-price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Portfolio Margin Asset Index Price (MARKET_DATA)
         * @description Query Portfolio Margin Asset Index Price
         *
         *     Weight(IP):
         *     - 1 if send asset
         *     - 50 if not send asset
         */
        get: {
            parameters: {
                query?: {
                    asset?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description asset price index */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example USDT */
                            asset: string;
                            /** @example 28251.9136906 */
                            assetIndexPrice: string;
                            /**
                             * Format: int64
                             * @example 1683518338121
                             */
                            time: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/portfolio/auto-collection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fund Auto-collection (USER_DATA)
         * @description Transfers all assets from Futures Account to Margin account
         *
         *     Weight(IP): 1500
         */
        post: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            msg: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/portfolio/bnb-transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * BNB Transfer (USER_DATA)
         * @description BNB transfer can be between Margin Account and USDM Account
         *
         *     Weight(IP): 1500
         */
        post: {
            parameters: {
                query: {
                    transferSide: "TO_UM" | "FROM_UM";
                    amount: components["parameters"]["amount"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 100000001
                             */
                            tranId: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/portfolio/repay-futures-switch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Auto-repay-futures Status (USER_DATA)
         * @description Query Auto-repay-futures Status
         *
         *     Weight(IP): 30
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            autoRepay: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Change Auto-repay-futures Status (USER_DATA)
         * @description Change Auto-repay-futures Status
         *
         *     Weight(IP): 1500
         */
        post: {
            parameters: {
                query: {
                    autoRepay: components["parameters"]["autoRepay"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            msg: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/portfolio/repay-futures-negative-balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Repay futures Negative Balance (USER_DATA)
         * @description Repay futures Negative Balance
         *
         *     Weight(IP): 1500
         */
        post: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            msg: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/portfolio/margin-asset-leverage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Portfolio Margin Asset Leverage (USER_DATA)
         * @description Weight(IP): 50
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Classic Portfolio Margin Collateral Rate */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example USDC */
                            asset?: string;
                            /** @example 1.0000 */
                            collateralRate?: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/portfolio/asset-collection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fund Collection by Asset (USER_DATA)
         * @description Transfers specific asset from Futures Account to Margin account
         *
         *     Weight(IP): 60
         */
        post: {
            parameters: {
                query: {
                    asset: components["parameters"]["asset"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            msg: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/blvt/tokenInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * BLVT Info (MARKET_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query?: {
                    /** @description BTCDOWN, BTCUP */
                    tokenName?: components["parameters"]["optionalBlvtTokenName"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of token information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTCDOWN */
                            tokenName: string;
                            /** @example 3X Short Bitcoin Token */
                            description: string;
                            /** @example BTC */
                            underlying: string;
                            /** @example 717953.95 */
                            tokenIssued: string;
                            /** @example -821.474 BTCUSDT Futures */
                            basket: string;
                            currentBaskets: {
                                /** @example BTCUSDT */
                                symbol: string;
                                /** @example -1183.984 */
                                amount: string;
                                /** @example -22871089.96704 */
                                notionalValue: string;
                            }[];
                            /** @example 4.79 */
                            nav: string;
                            /** @example -2.316 */
                            realLeverage: string;
                            /** @example 0.001020 */
                            fundingRate: string;
                            /** @example 0.0001 */
                            dailyManagementFee: string;
                            /** @example 0.0010 */
                            purchaseFeePct: string;
                            /** @example 100000.00 */
                            dailyPurchaseLimit: string;
                            /** @example 0.0010 */
                            redeemFeePct: string;
                            /** @example 1000000.00 */
                            dailyRedeemLimit: string;
                            /**
                             * Format: int64
                             * @example 1583127900000
                             */
                            timestamp: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/blvt/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Subscribe BLVT (USER_DATA)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description BTCDOWN, BTCUP */
                    tokenName: components["parameters"]["blvtTokenName"];
                    /** @description Spot balance */
                    cost: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Subscription Info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 123
                             */
                            id: number;
                            /**
                             * @description S, P, and F for "success", "pending", and "failure"
                             * @example S
                             */
                            status: string;
                            /** @example LINKUP */
                            tokenName: string;
                            /**
                             * @description subscribed token amount
                             * @example 0.9559090500
                             */
                            amount: string;
                            /**
                             * @description subscription cost in usdt
                             * @example 9.99999995
                             */
                            cost: string;
                            /**
                             * Format: int64
                             * @example 1600249972899
                             */
                            timestamp: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/blvt/subscribe/record": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Subscription Record (USER_DATA)
         * @description - Only the data of the latest 90 days is available
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description BTCDOWN, BTCUP */
                    tokenName?: components["parameters"]["optionalBlvtTokenName"];
                    id?: number;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of subscription record */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            id: number;
                            /** @example LINKUP */
                            tokenName: string;
                            /**
                             * @description Subscription amount
                             * @example 0.54216292
                             */
                            amount: string;
                            /**
                             * @description NAV price of subscription
                             * @example 18.42621386
                             */
                            nav: string;
                            /**
                             * @description Subscription fee in usdt
                             * @example 0.00999000
                             */
                            fee: string;
                            /**
                             * @description Subscription cost in usdt
                             * @example 9.99999991
                             */
                            totalCharge: string;
                            /**
                             * Format: int64
                             * @example 1599127217916
                             */
                            timestamp: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/blvt/redeem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redeem BLVT (USER_DATA)
         * @description Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description BTCDOWN, BTCUP */
                    tokenName: components["parameters"]["blvtTokenName"];
                    amount: components["parameters"]["amount"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redemption record */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 123
                             */
                            id: number;
                            /**
                             * @description S, P, and F for "success", "pending", and "failure"
                             * @example S
                             */
                            status: string;
                            /** @example LINKUP */
                            tokenName: string;
                            /**
                             * @description Redemption token amount
                             * @example 0.95590905
                             */
                            redeemAmount: string;
                            /**
                             * @description Redemption value in usdt
                             * @example 10.05022099
                             */
                            amount: string;
                            /**
                             * Format: int64
                             * @example 1600250279614
                             */
                            timestamp: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/blvt/redeem/record": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Redemption Record (USER_DATA)
         * @description - Only the data of the latest 90 days is available
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description BTCDOWN, BTCUP */
                    tokenName?: components["parameters"]["optionalBlvtTokenName"];
                    id?: number;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description default 1000, max 1000 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of redemption record */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            id: number;
                            /** @example LINKUP */
                            tokenName: string;
                            /**
                             * @description Redemption amount
                             * @example 0.54216292
                             */
                            amount: string;
                            /**
                             * @description NAV of redemption
                             * @example 18.36345064
                             */
                            nav: string;
                            /**
                             * @description Reemption fee
                             * @example 0.00995598
                             */
                            fee: string;
                            /**
                             * @description Net redemption value in usdt
                             * @example 9.94602604
                             */
                            netProceed: string;
                            /**
                             * Format: int64
                             * @example 1599128003050
                             */
                            timestamp: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/blvt/userLimit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * BLVT User Limit Info (USER_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description BTCDOWN, BTCUP */
                    tokenName?: components["parameters"]["optionalBlvtTokenName"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of token limits */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example LINKUP */
                            tokenName: string;
                            /**
                             * @description USDT
                             * @example 1000
                             */
                            userDailyTotalPurchaseLimit: string;
                            /**
                             * @description USDT
                             * @example 1000
                             */
                            userDailyTotalRedeemLimit: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/c2c/orderMatch/listUserOrderHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get C2C Trade History (USER_DATA)
         * @description - If startTimestamp and endTimestamp are not sent, the recent 30-day data will be returned.
         *     - The max interval between startTimestamp and endTimestamp is 30 days.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    tradeType: "BUY" | "SELL";
                    /** @description UTC timestamp in ms */
                    startTimestamp?: number;
                    /** @description UTC timestamp in ms */
                    endTimestamp?: number;
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description default 100, max 100 */
                    rows?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Trades history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            data: {
                                /** @example 20219644646554779648 */
                                orderNumber: string;
                                /** @example 11218246497340923904 */
                                advNo: string;
                                /** @example SELL */
                                tradeType: string;
                                /** @example BUSD */
                                asset: string;
                                /** @example CNY */
                                fiat: string;
                                /** @example ￥ */
                                fiatSymbol: string;
                                /**
                                 * @description Quantity (in Crypto)
                                 * @example 5000.00000000
                                 */
                                amount: string;
                                /** @example 33400.00000000 */
                                totalPrice: string;
                                /**
                                 * @description Unit Price (in Fiat)
                                 * @example 6.68
                                 */
                                unitPrice: string;
                                /**
                                 * @description PENDING, TRADING, BUYER_PAYED, DISTRIBUTING, COMPLETED, IN_APPEAL, CANCELLED, CANCELLED_BY_SYSTEM
                                 * @example COMPLETED
                                 */
                                orderStatus: string;
                                /**
                                 * Format: int64
                                 * @example 1619361369000
                                 */
                                createTime: number;
                                /**
                                 * @description Transaction Fee (in Crypto)
                                 * @example 0
                                 */
                                commission: string;
                                /** @example ab*** */
                                counterPartNickName: string;
                                /** @example TAKER */
                                advertisementRole: string;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/vip/ongoing/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get VIP Loan Ongoing Orders (USER_DATA)
         * @description VIP loan is available for VIP users only.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    collateralAccountId?: number;
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default 10; max 100. */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ongoing VIP Loan Orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /**
                                 * Format: int64
                                 * @example 100000001
                                 */
                                orderId: number;
                                /** @example BUSD */
                                loanCoin: string;
                                /** @example 10000 */
                                totalDebt: string;
                                /** @example 10.27687923 */
                                residualInterest: string;
                                /** @example 12345678, 23456789 */
                                collateralAccountId: string;
                                /** @example BNB,BTC,ETH */
                                collateralCoin: string;
                                /**
                                 * @description locked collateral value shown in USD value
                                 * @example 25000.27565492
                                 */
                                collateralValue: string;
                                /** @example 25000.27565492 */
                                totalCollateralValueAfterHaircut?: string;
                                /** @example 25000.27565492 */
                                lockedCollateralValue?: string;
                                /** @example 0.57 */
                                currentLTV: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                expirationTime: number;
                                /** @example 1676851200000 */
                                loanDate: string;
                                /** @example 0.0123 */
                                loanRate: string;
                                /** @example 30days */
                                loanTerm: string;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/vip/repay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * VIP Loan Repay (TRADE)
         * @description VIP loan is available for VIP users only.
         *
         *     Weight(UID): 6000
         */
        post: {
            parameters: {
                query: {
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    amount: components["parameters"]["amount"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description VIP Loan Repayment */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BUSD */
                            loanCoin: string;
                            /** @example 200.5 */
                            repayAmount: string;
                            /** @example 100.5 */
                            remainingPrincipal: string;
                            /** @example 0 */
                            remainingInterest: string;
                            /** @example BNB,BTC,ETH */
                            collateralCoin: string;
                            /** @example 0.25 */
                            currentLTV: string;
                            /**
                             * @description Repaid, Repaying, Failed
                             * @example Repaid
                             */
                            repayStatus: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/vip/repay/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get VIP Loan Repayment History (USER_DATA)
         * @description VIP loan is available for VIP users only.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default 10; max 100. */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description VIP Loan Repayment History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BUSD */
                                loanCoin: string;
                                /** @example 10000 */
                                repayAmount: string;
                                /** @example BNB,BTC,ETH */
                                collateralCoin: string;
                                /**
                                 * @description Repaid, Repaying, Failed
                                 * @example Repaid
                                 */
                                repayStatus: string;
                                /** @example 1575018510000 */
                                repayTime: string;
                                /** @example 756783308056935434 */
                                orderId: string;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/vip/collateral/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Locked Value of VIP Collateral Account (USER_DATA)
         * @description VIP loan is available for VIP users only.
         *
         *     Weight(IP): 6000
         */
        get: {
            parameters: {
                query: {
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    collateralAccountId?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description VIP Locked Value */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example 12345678 */
                                collateralAccountId: string;
                                /** @example BNB,BTC,ETH */
                                collateralCoin: string;
                                /**
                                 * @description locked collateral value shown in USD value
                                 * @example 500.27565492
                                 */
                                collateralValue: string;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/vip/borrow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * VIP Loan Borrow
         * @description VIP loan is available for VIP users only.
         *
         *     Weight(UID): 6000
         */
        post: {
            parameters: {
                query: {
                    loanAccountId: number;
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    loanAmount: number;
                    collateralAccountId: string;
                    collateralCoin: string;
                    isFlexibleRate: "TRUE" | "FALSE";
                    loanTerm?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collateral Assets Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 12345678 */
                            loanAccountId: string;
                            /** @example 12345678 */
                            requestId: string;
                            /** @example BTC */
                            loanCoin: string;
                            /** @example No */
                            isFlexibleRate: string;
                            /** @example 100.55 */
                            loanAmount: string;
                            /** @example 12345678,12345678,12345678 */
                            collateralAccountId: string;
                            /** @example BUSD,USDT,ETH */
                            collateralCoin: string;
                            /** @example 30 */
                            loanTerm?: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/vip/loanable/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Loanable Assets Data
         * @description Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Defaults to user's vip level */
                    vipLevel?: components["parameters"]["vipLevel"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Loanable Assets Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            total: number;
                            rows: {
                                /** @example BUSD */
                                loanCoin: string;
                                /** @example 0.001503 */
                                _flexibleDailyInterestRate: string;
                                /** @example 0.548595 */
                                _flexibleYearlyInterestRate: string;
                                /** @example 0.000136 */
                                _30dDailyInterestRate: string;
                                /** @example 0.03450 */
                                _30dYearlyInterestRate: string;
                                /** @example 0.000145 */
                                _60dDailyInterestRate: string;
                                /** @example 0.04103 */
                                _60dYearlyInterestRate: string;
                                /** @example 100 */
                                minLimit: string;
                                /** @example 1000000 */
                                maxLimit: string;
                                /** @example 1 */
                                vipLevel: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/vip/collateral/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Collateral Asset Data (USER_DATA)
         * @description Get collateral asset data.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collateral Asset Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BUSD */
                                collateralCoin: string;
                                /** @example 100% */
                                _1stCollateralRatio: string;
                                /** @example 1-10000000 */
                                _1stCollateralRange: string;
                                /** @example 80% */
                                _2ndCollateralRatio: string;
                                /** @example 10000000-100000000 */
                                _2ndCollateralRange: string;
                                /** @example 60% */
                                _3rdCollateralRatio: string;
                                /** @example 100000000-1000000000 */
                                _3rdCollateralRange: string;
                                /** @example 0% */
                                _4thCollateralRatio: string;
                                /** @example >10000000000 */
                                _4thCollateralRange: string;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/vip/request/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Application Status (USER_DATA)
         * @description Get Application Status
         *
         *     Weight(UID): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Application Status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            total: number;
                            rows: {
                                /** @example 12345678 */
                                loanAccountId: string;
                                /** @example 12345678 */
                                orderId: string;
                                /** @example 12345678 */
                                requestId: string;
                                /** @example BTC */
                                loanCoin: string;
                                /** @example 100.5 */
                                loanAmount: string;
                                /** @example 12345678,12345678,12345678 */
                                collateralAccountId: string;
                                /** @example BUSD,USDT,ETH */
                                collateralCoin: string;
                                /** @example 30 */
                                loanTerm: number;
                                /** @example Repaid */
                                status: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/vip/request/interestRate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Borrow Interest Rate (USER_DATA)
         * @description Get borrow interest rate.
         *
         *     Weight(UID): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Max 10 assets, Multiple split by "," */
                    loanCoin?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Borrow interest rate */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BUSD */
                            asset: string;
                            /** @example 0.001503 */
                            flexibleDailyInterestRate: string;
                            /** @example 0.548595 */
                            flexibleYearlyInterestRate: string;
                            /**
                             * Format: int64
                             * @example 1577233578000
                             */
                            time: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/vip/renew": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * VIP Loan Renew
         * @description VIP loan is available for VIP users only.
         *
         *     Weight(UID): 6000
         */
        post: {
            parameters: {
                query: {
                    /** @description Order id */
                    orderId?: components["parameters"]["orderId"];
                    loanTerm?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Loan renew result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 12345678 */
                            loanAccountId: string;
                            /** @example BTC */
                            loanCoin: string;
                            /** @example 100.55 */
                            loanAmount: string;
                            /** @example 12345677,12345678,12345679 */
                            collateralAccountId: string;
                            /** @example BUSD,USDT,ETH */
                            collateralCoin: string;
                            /** @example 30 */
                            loanTerm: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/income": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Crypto Loans Income History (USER_DATA)
         * @description - If startTime and endTime are not sent, the recent 7-day data will be returned.
         *     - The max interval between startTime and endTime is 30 days.
         *
         *     Weight(UID): 6000
         */
        get: {
            parameters: {
                query: {
                    asset?: components["parameters"]["optionalAsset"];
                    /** @description All types will be returned by default.
                     *       * `borrowIn`
                     *       * `collateralSpent`
                     *       * `repayAmount`
                     *       * `collateralReturn` - Collateral return after repayment
                     *       * `addCollateral`
                     *       * `removeCollateral`
                     *       * `collateralReturnAfterLiquidation` */
                    type?: "borrowIn" | "collateralSpent" | "repayAmount" | "collateralReturn" | "addCollateral" | "removeCollateral" | "collateralReturnAfterLiquidation";
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description default 20, max 100 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Loan History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BUSD */
                            asset: string;
                            /** @example borrowIn */
                            type: string;
                            /** @example 100 */
                            amount: string;
                            /**
                             * Format: int64
                             * @example 1633771139847
                             */
                            timestamp: number;
                            /** @example 80423589583 */
                            tranId: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/borrow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crypto Loan Borrow (TRADE)
         * @description Weight(UID): 6000
         */
        post: {
            parameters: {
                query: {
                    /** @description Coin loaned */
                    loanCoin: components["parameters"]["loanCoinReq"];
                    /** @description Loan amount */
                    loanAmount?: components["parameters"]["loanAmount"];
                    /** @description Coin used as collateral */
                    collateralCoin: components["parameters"]["collateralCoinReq"];
                    collateralAmount?: components["parameters"]["collateralAmount"];
                    /** @description 7/14/30/90/180 days */
                    loanTerm: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Borrow Information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BUSD */
                            loanCoin: string;
                            /** @example 100.5 */
                            loanAmount: string;
                            /** @example BNB */
                            collateralCoin: string;
                            /** @example 50.5 */
                            collateralAmount: string;
                            /** @example 0.001234 */
                            hourlyInterestRate: string;
                            /** @example 100000001 */
                            orderId: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/borrow/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Crypto Loans Borrow History (USER_DATA)
         * @description - If startTime and endTime are not sent, the recent 90-day data will be returned.
         *     - The max interval between startTime and endTime is 180 days.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description orderId in POST /sapi/v1/loan/borrow */
                    orderId?: number;
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description default 10, max 100 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Borrow History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /**
                                 * Format: int64
                                 * @example 100000001
                                 */
                                orderId: number;
                                /** @example BUSD */
                                loanCoin: string;
                                /** @example 10000 */
                                initialLoanAmount: string;
                                /** @example 0.000057 */
                                hourlyInterestRate: string;
                                /** @example 7 */
                                loanTerm: string;
                                /** @example BNB */
                                collateralCoin: string;
                                /** @example 49.27565492 */
                                initialCollateralAmount: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                borrowTime: number;
                                /** @example Accruing_Interest, Overdue, Liquidating, Repaying, Repaid, Liquidated, Pending, Failed */
                                status: string;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/ongoing/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Loan Ongoing Orders (USER_DATA)
         * @description Weight(IP): 300
         */
        get: {
            parameters: {
                query: {
                    /** @description orderId in POST /sapi/v1/loan/borrow */
                    orderId?: number;
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description Current querying page. Start from 1; default:1, max:1000 */
                    current?: number;
                    /** @description default 10, max 100 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ongoing Orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /**
                                 * Format: int64
                                 * @example 100000001
                                 */
                                orderId: number;
                                /** @example BUSD */
                                loanCoin: string;
                                /** @example 10000 */
                                totalDebt: string;
                                /** @example 10.27687923 */
                                residualInterest: string;
                                /** @example BNB */
                                collateralCoin: string;
                                /** @example 49.27565492 */
                                collateralAmount: string;
                                /** @example 0.57 */
                                currentLTV: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                expirationTime: number;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/repay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crypto Loan Repay (TRADE)
         * @description Weight(UID): 6000
         */
        post: {
            parameters: {
                query: {
                    /** @description Order ID */
                    orderId: number;
                    /** @description Repayment Amount */
                    amount: number;
                    /** @description Default: 1. 1 for 'repay with borrowed coin'; 2 for 'repay with collateral'. */
                    type?: number;
                    /** @description Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order. */
                    collateralReturn?: boolean;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Repayment Information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["repaymentInfo"] | components["schemas"]["repaymentInfo2"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/repay/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Loan Repayment History (USER_DATA)
         * @description If startTime and endTime are not sent, the recent 90-day data will be returned.
         *     The max interval between startTime and endTime is 180 days.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Order ID */
                    orderId?: number;
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description default 10, max 100 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Loan Repayment History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BUSD */
                                loanCoin: string;
                                /** @example 10000 */
                                repayAmount: string;
                                /** @example BNB */
                                collateralCoin: string;
                                /** @example 0 */
                                collateralUsed: string;
                                /** @example 49.27565492 */
                                collateralReturn: string;
                                /** @example 1 */
                                repayType: string;
                                /**
                                 * @description 'repayType': '1' // 1 for 'repay with borrowed coin', 2 for 'repay with collateral' 'repayStatus': 'Repaid' // Repaid, Repaying, Failed
                                 * @example Repaid
                                 */
                                repayStatus: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                repayTime: number;
                                /**
                                 * Format: int64
                                 * @example 756783308056935400
                                 */
                                orderId: number;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/adjust/ltv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crypto Loan Adjust LTV (TRADE)
         * @description Weight(UID): 6000
         */
        post: {
            parameters: {
                query: {
                    /** @description Order ID */
                    orderId: number;
                    /** @description Amount */
                    amount: number;
                    /** @description 'ADDITIONAL', 'REDUCED' */
                    direction: "ADDITIONAL" | "REDUCED";
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description LTV Adjust */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BUSD */
                            loanCoin: string;
                            /** @example BNB */
                            collateralCoin: string;
                            /** @example ADDITIONAL */
                            direction: string;
                            /** @example 5.235 */
                            amount: string;
                            /** @example 0.52 */
                            currentLTV: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/ltv/adjustment/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Loan LTV Adjustment History (USER_DATA)
         * @description If startTime and endTime are not sent, the recent 90-day data will be returned.
         *     The max interval between startTime and endTime is 180 days.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Order ID */
                    orderId?: number;
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description default 10, max 100 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description LTV Adjustment History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BUSD */
                                loanCoin: string;
                                /** @example BNB */
                                collateralCoin: string;
                                /** @example ADDITIONAL */
                                direction: string;
                                /** @example 5.235 */
                                amount: string;
                                /** @example 0.78 */
                                preLTV: string;
                                /** @example 0.56 */
                                afterLTV: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                adjustTime: number;
                                /**
                                 * Format: int64
                                 * @example 756783308056935400
                                 */
                                orderId: number;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/loanable/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Loanable Assets Data (USER_DATA)
         * @description Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Defaults to user's vip level */
                    vipLevel?: components["parameters"]["vipLevel"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Loanable Assets Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BUSD */
                                loanCoin: string;
                                /** @example 0.00000491 */
                                _7dHourlyInterestRate: string;
                                /** @example 0.000118 */
                                _7dDailyInterestRate: string;
                                /** @example 0.00000491 */
                                _14dHourlyInterestRate: string;
                                /** @example 0.000118 */
                                _14dDailyInterestRate: string;
                                /** @example 0.00000567 */
                                _30dHourlyInterestRate: string;
                                /** @example 0.000136 */
                                _30dDailyInterestRate: string;
                                /** @example 0.00000596 */
                                _90dHourlyInterestRate: string;
                                /** @example 0.000143 */
                                _90dDailyInterestRate: string;
                                /** @example 0.00000631 */
                                _180dHourlyInterestRate: string;
                                /** @example 0.000151 */
                                _180dDailyInterestRate: string;
                                /** @example 100 */
                                minLimit: string;
                                /** @example 1000000 */
                                maxLimit: string;
                                /**
                                 * Format: int32
                                 * @example 1
                                 */
                                vipLevel: number;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/collateral/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Collateral Assets Data (USER_DATA)
         * @description Get LTV information and collateral limit of collateral assets. The collateral limit is shown in USD value.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description Defaults to user's vip level */
                    vipLevel?: components["parameters"]["vipLevel"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collateral Assets Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BNB */
                                collateralCoin: string;
                                /** @example 0.65 */
                                initialLTV: string;
                                /** @example 0.75 */
                                marginCallLTV: string;
                                /** @example 0.83 */
                                liquidationLTV: string;
                                /** @example 1000000 */
                                maxLimit: string;
                                /**
                                 * Format: int32
                                 * @example 1
                                 */
                                vipLevel: number;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/repay/collateral/rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Collateral Repay Rate (USER_DATA)
         * @description Get the the rate of collateral coin / loan coin when using collateral repay, the rate will be valid within 8 second.
         *
         *     Weight(IP): 6000
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin loaned */
                    loanCoin: components["parameters"]["loanCoinReq"];
                    /** @description Coin used as collateral */
                    collateralCoin: components["parameters"]["collateralCoinReq"];
                    /** @description repay amount of loanCoin */
                    repayAmount: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collateral Assets Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BUSD */
                            loanCoin: string;
                            /** @example BUSD */
                            collateralCoin: string;
                            /** @example 1000 */
                            repayAmount: string;
                            /**
                             * @description rate of collateral coin/loan coin
                             * @example 300.36781234
                             */
                            rate: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/loan/customize/margin_call": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crypto Loan Customize Margin Call (TRADE)
         * @description Customize margin call for ongoing orders only.
         *
         *     Weight(UID): 6000
         */
        post: {
            parameters: {
                query: {
                    /** @description Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only. */
                    orderId?: number;
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    marginCall: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collateral Assets Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example 100000001 */
                                orderId: string;
                                /** @example BNB */
                                collateralCoin: string;
                                /** @example 0.8 */
                                preMarginCall: string;
                                /** @example 0.7 */
                                afterMarginCall: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                customizeTime: number;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/loan/flexible/borrow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Borrow - Flexible Loan Borrow (TRADE)
         * @description - Only available for master account
         *
         *     Weight(UID): 6000
         */
        post: {
            parameters: {
                query: {
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Loan amount */
                    loanAmount?: components["parameters"]["loanAmount"];
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    collateralAmount?: components["parameters"]["collateralAmount"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collateral Assets Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BUSD */
                            loanCoin: string;
                            /** @example 100.5 */
                            loanAmount: string;
                            /** @example BNB */
                            collateralCoin?: string;
                            /** @example 50.5 */
                            collateralAmount: string;
                            /** @example Succeeds */
                            status: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/loan/flexible/ongoing/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Borrow - Get Flexible Loan Ongoing Orders (USER_DATA)
         * @description
         *     Weight(IP): 300
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collateral Assets Data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                            rows: {
                                /** @example BUSD */
                                loanCoin: string;
                                /** @example 10000 */
                                totalDebt: string;
                                /** @example BNB */
                                collateralCoin: string;
                                /** @example 49.27565492 */
                                collateralAmount: string;
                                /** @example 0.57 */
                                currentLTV: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/loan/flexible/borrow/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Borrow - Get Flexible Loan Borrow History (USER_DATA)
         * @description - If startTime and endTime are not sent, the recent 90-day data will be returned.
         *     - The max interval between startTime and endTime is 180 days.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Loan borrow histroy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1 */
                            total: number;
                            rows: {
                                /** @example BUSD */
                                loanCoin: string;
                                /** @example 10000 */
                                initialLoanAmount: string;
                                /** @example BNB */
                                collateralCoin: string;
                                /** @example 49.27565492 */
                                initialCollateralAmount: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                borrowTime: number;
                                /** @example Succeeds */
                                status: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/loan/flexible/repay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Repay - Flexible Loan Repay (TRADE)
         * @description - repayAmount is mandatory even fullRepayment = FALSE
         *
         *     Weight(IP): 6000
         */
        post: {
            parameters: {
                query: {
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description repay amount of loanCoin */
                    repayAmount: number;
                    /** @description Default: TRUE.
                     *     TRUE: Return extra collateral to earn account;
                     *     FALSE: Keep extra collateral in the order, and lower LTV. */
                    collateralReturn?: boolean;
                    /** @description Default: FALSE.
                     *     TRUE: Full repayment;
                     *     FALSE: Partial repayment, based on loanAmount */
                    fullRepayment?: boolean;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Loan repay */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BUSD */
                            loanCoin: string;
                            /** @example BNB */
                            collateralCoin: string;
                            /** @example 50.5 */
                            remainingDebt: string;
                            /** @example 50.5 */
                            remainingCollateral: string;
                            /** @example false */
                            fullRepayment: boolean;
                            /** @example 50.5 */
                            currentLTV: string;
                            /**
                             * @description Repaid, Repaying, Failed
                             * @example Repaid
                             */
                            repayStatus: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/loan/flexible/repay/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Repay - Get Flexible Loan Repayment History (USER_DATA)
         * @description - If startTime and endTime are not sent, the recent 90-day data will be returned.
         *     - The max interval between startTime and endTime is 180 days.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Loan repay history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BUSD */
                                loanCoin: string;
                                /** @example 10000 */
                                repayAmount: string;
                                /** @example BNB */
                                collateralCoin: string;
                                /** @example 100 */
                                collateralReturn: string;
                                /** @example Repaid */
                                repayStatus: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                repayTime: number;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/loan/flexible/adjust/ltv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Adjust LTV - Flexible Loan Adjust LTV (TRADE)
         * @description - API Key needs Spot & Margin Trading permission for this endpoint
         *
         *     Weight(UID): 6000
         */
        post: {
            parameters: {
                query: {
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    adjustmentAmount: number;
                    direction: "ADDITIONAL" | "REDUCED";
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description adjust LTV result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BUSD */
                            loanCoin: string;
                            /** @example BNB */
                            collateralCoin: string;
                            /** @example ADDITIONAL */
                            direction: string;
                            /** @example 5.235 */
                            adjustmentAmount: string;
                            /** @example 0.235 */
                            currentLTV: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/loan/flexible/ltv/adjustment/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Adjust LTV - Get Flexible Loan LTV Adjustment History (USER_DATA)
         * @description - If startTime and endTime are not sent, the recent 90-day data will be returned.
         *     - The max interval between startTime and endTime is 180 days.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default 500; max 1000. */
                    limit?: components["parameters"]["limit"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description LTV adjustment history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BNB */
                                loanCoin: string;
                                /** @example BNB */
                                collateralCoin: string;
                                /** @example ADDITIONAL */
                                direction: string;
                                /** @example 5.75 */
                                collateralAmount: string;
                                /** @example 0.83 */
                                preLTV: string;
                                /** @example 0.5 */
                                afterLTV: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                adjustTime: number;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/loan/flexible/loanable/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Flexible Loan Assets Data (USER_DATA)
         * @description Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin loaned */
                    loanCoin?: components["parameters"]["loanCoin"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Loan asset data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BNB */
                                loanCoin: string;
                                /** @example 0.01 */
                                flexibleInterestRate: string;
                                /** @example 100 */
                                flexibleMinLimit: string;
                                /** @example 1000000 */
                                flexibleMaxLimit: string;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/loan/flexible/collateral/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Flexible Loan Collateral Assets Data (USER_DATA)
         * @description Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.
         *
         *     Weight(IP): 400
         */
        get: {
            parameters: {
                query: {
                    /** @description Coin used as collateral */
                    collateralCoin?: components["parameters"]["collateralCoin"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Loan asset data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BNB */
                                collateralCoin: string;
                                /** @example 0.01 */
                                initialLTV: string;
                                /** @example 0.7 */
                                marginCallLTV: string;
                                /** @example 0.8 */
                                liquidationLTV: string;
                                /** @example 1000000 */
                                maxLimit: string;
                            }[];
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/pay/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Pay Trade History (USER_DATA)
         * @description - If startTime and endTime are not sent, the recent 90 days' data will be returned.
         *     - The max interval between startTime and endTime is 90 days.
         *     - Support for querying orders within the last 18 months.
         *
         *     Weight(UID): 3000
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description default 100, max 100 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Pay History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            data: {
                                /**
                                 * @description Enum：PAY(C2B Merchant Acquiring Payment), PAY_REFUND(C2B Merchant Acquiring Payment,refund), C2C(C2C Transfer Payment),CRYPTO_BOX(Crypto box), CRYPTO_BOX_RF(Crypto Box, refund), C2C_HOLDING(Transfer to new Binance user), C2C_HOLDING_RF(Transfer to new Binance user,refund), PAYOUT(B2C Disbursement Payment)
                                 * @example C2C
                                 */
                                orderType: string;
                                /** @example M_P_71505104267788288 */
                                transactionId: string;
                                /**
                                 * Format: int64
                                 * @example 1610090460133
                                 */
                                transactionTime: number;
                                /**
                                 * @description order amount(up to 8 decimal places), positive is income, negative is expenditure
                                 * @example 23.72469206
                                 */
                                amount: string;
                                /** @example BNB */
                                currency: string;
                                /** @example 1 */
                                walletType: number;
                                walletTypes: number[];
                                fundsDetail: {
                                    currency: string;
                                    amount: string;
                                }[];
                                payerInfo: {
                                    /** @example Jack */
                                    name: string;
                                    /** @example USER */
                                    type: string;
                                    /** @example 12345678 */
                                    binanceId: string;
                                    /** @example 67736251 */
                                    accountId: string;
                                };
                                receiverInfo: {
                                    /** @example Alan */
                                    name: string;
                                    /** @example MERCHANT */
                                    type: string;
                                    /** @example alan@test.com */
                                    email: string;
                                    /** @example 34355667 */
                                    binanceId: string;
                                    /** @example 21326891 */
                                    accountId: string;
                                    /** @example 1 */
                                    countryCode: string;
                                    /** @example 8057651210 */
                                    phoneNumber: string;
                                    /** @example US */
                                    mobileCode: string;
                                    extend?: {
                                        institutionName: string;
                                        cardNumber: string;
                                        digitalWalletId: string;
                                    }[];
                                };
                            }[];
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/convert/exchangeInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List All Convert Pairs
         * @description Query for all convertible token pairs and the tokens’ respective upper/lower limits
         *
         *     Weight(IP): 3000
         */
        get: {
            parameters: {
                query?: {
                    /** @description User spends coin */
                    fromAsset?: string;
                    /** @description User receives coin */
                    toAsset?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List Convert Pairs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTC */
                            fromAsset: string;
                            /** @example USDT */
                            toAsset: string;
                            /** @example 0.0004 */
                            fromAssetMinAmount: string;
                            /** @example 50 */
                            fromAssetMaxAmount: string;
                            /** @example 20 */
                            toAssetMinAmount: string;
                            /** @example 2500000 */
                            toAssetMaxAmount: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/convert/assetInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query order quantity precision per asset (USER_DATA)
         * @description Query for supported asset precision information
         *
         *     Weight(IP): 100
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Asset Precision Information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTC */
                            asset: string;
                            /**
                             * Format: int32
                             * @example 8
                             */
                            fraction: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/convert/getQuote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send quote request (USER_DATA)
         * @description Request a quote for the requested token pairs
         *
         *     Weight(UID): 200
         */
        post: {
            parameters: {
                query: {
                    fromAsset: string;
                    toAsset: string;
                    /** @description When specified, it is the amount you will be debited after the conversion */
                    fromAmount?: number;
                    /** @description When specified, it is the amount you will be debited after the conversion */
                    toAmount?: number;
                    /** @description 10s, 30s, 1m, 2m, default 10s */
                    validTime?: string;
                    /** @description SPOT or FUNDING. Default is SPOT */
                    walletType?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Quote Request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 12415572564 */
                            quoteId: string;
                            /** @example 38163.7 */
                            ratio: string;
                            /** @example 0.0000262 */
                            inverseRatio: string;
                            /**
                             * Format: int64
                             * @example 1623319461670
                             */
                            validTimestamp: number;
                            /** @example 3816.37 */
                            toAmount: string;
                            /** @example 0.1 */
                            fromAmount: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/convert/acceptQuote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept Quote (TRADE)
         * @description Accept the offered quote by quote ID.
         *
         *     Weight(UID): 500
         */
        post: {
            parameters: {
                query: {
                    quoteId: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Accept Quote */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 933256278426274426 */
                            orderId: string;
                            /**
                             * Format: int64
                             * @example 1623381330472
                             */
                            createTime: number;
                            /** @example PROCESS */
                            orderStatus: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/convert/orderStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Order status (USER_DATA)
         * @description Query order status by order ID.
         *
         *     Weight(UID): 100
         */
        get: {
            parameters: {
                query: {
                    orderId?: string;
                    quoteId?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order Status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 933256278426274400
                             */
                            orderId: number;
                            /** @example SUCCESS */
                            orderStatus: string;
                            /** @example BTC */
                            fromAsset: string;
                            /** @example 0.00054414 */
                            fromAmount: string;
                            /** @example USDT */
                            toAsset: string;
                            /** @example 20 */
                            toAmount: string;
                            /** @example 36755 */
                            ratio: string;
                            /** @example 0.00002721 */
                            inverseRatio: string;
                            /**
                             * Format: int64
                             * @example 1623381330472
                             */
                            createTime: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/convert/limit/placeOrder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Place limit order (USER_DATA)
         * @description Enable users to place a limit order
         *
         *     - baseAsset or quoteAsset can be determined via exchangeInfo endpoint.
         *     - Limit price is defined from baseAsset to quoteAsset.
         *     - Either baseAmount or quoteAmount is used.
         *
         *     Weight(UID): 500
         */
        post: {
            parameters: {
                query: {
                    baseAsset: components["parameters"]["baseAsset"];
                    quoteAsset: components["parameters"]["quoteAsset"];
                    /** @description Symbol limit price (from baseAsset to quoteAsset) */
                    limitPrice: number;
                    /** @description Base asset amount. (One of baseAmount or quoteAmount is required) */
                    baseAmount?: number;
                    /** @description Quote asset amount. (One of baseAmount or quoteAmount is required) */
                    quoteAmount?: number;
                    side: components["parameters"]["side"];
                    /** @description SPOT or FUNDING or SPOT_FUNDING. It is to use which type of assets. Default is SPOT. */
                    walletType?: "SPOT" | "FUNDING" | "SPOT_FUNDING";
                    /** @description 1_D, 3_D, 7_D, 30_D (D means day) */
                    expiredType?: "1_D" | "3_D" | "7_D" | "30_D";
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description null */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1603680255057330400
                             */
                            orderId: number;
                            /** @example PROCESS */
                            status: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/convert/limit/cancelOrder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel limit order (USER_DATA)
         * @description Enable users to cancel a limit order
         *
         *     Weight(UID): 200
         */
        post: {
            parameters: {
                query: {
                    orderId: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cancel Order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1603680255057330400
                             */
                            orderId: number;
                            /** @example CANCELED */
                            status: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/convert/limit/queryOpenOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query limit open orders (USER_DATA)
         * @description Enable users to query for all existing limit orders
         *
         *     Weight(UID): 3000
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All existing limit orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            list: {
                                /** @example 18sdf87kh9df */
                                quoteId: string;
                                /**
                                 * Format: int64
                                 * @example 1603680255057330400
                                 */
                                orderId: number;
                                /** @example SUCCESS */
                                orderStatus: string;
                                /** @example BNB */
                                fromAsset: string;
                                /** @example 10 */
                                fromAmount: string;
                                /** @example USDT */
                                toAsset: string;
                                /** @example 2317.89 */
                                toAmount: string;
                                /** @example 231.789 */
                                ratio: string;
                                /** @example 0.00431427 */
                                inverseRatio: string;
                                /**
                                 * Format: int64
                                 * @example 1614089498000
                                 */
                                createTime: number;
                                /**
                                 * Format: int64
                                 * @example 1614099498000
                                 */
                                expiredTimestamp: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/convert/tradeFlow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Convert Trade History (USER_DATA)
         * @description - The max interval between startTime and endTime is 30 days.
         *
         *     Weight(UID): 3000
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime: number;
                    /** @description UTC timestamp in ms */
                    endTime: number;
                    /** @description default 100, max 1000 */
                    limit?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Convert Trade History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            list: {
                                /** @example f3b91c525b2644c7bc1e1cd31b6e1aa6 */
                                quoteId: string;
                                /**
                                 * Format: int64
                                 * @example 940708407462087200
                                 */
                                orderId: number;
                                /** @example SUCCESS */
                                orderStatus: string;
                                /** @example USDT */
                                fromAsset: string;
                                /** @example 20 */
                                fromAmount: string;
                                /** @example BNB */
                                toAsset: string;
                                /** @example 0.06154036 */
                                toAmount: string;
                                /**
                                 * @description price ratio
                                 * @example 0.00307702
                                 */
                                ratio: string;
                                /**
                                 * @description inverse price
                                 * @example 324.99
                                 */
                                inverseRatio: string;
                                /**
                                 * Format: int64
                                 * @example 1624248872184
                                 */
                                createTime: number;
                            }[];
                            /**
                             * Format: int64
                             * @example 1623824139000
                             */
                            startTime: number;
                            /**
                             * Format: int64
                             * @example 1626416139000
                             */
                            endTime: number;
                            /**
                             * Format: int32
                             * @example 100
                             */
                            limit: number;
                            /** @example false */
                            moreData: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/rebate/taxQuery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Spot Rebate History Records (USER_DATA)
         * @description - The max interval between startTime and endTime is 90 days.
         *     - If startTime and endTime are not sent, the recent 7 days' data will be returned.
         *     - The earliest startTime is supported on June 10, 2020
         *
         *     Weight(UID): 3000
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: number;
                    /** @description UTC timestamp in ms */
                    endTime?: number;
                    /** @description default 1 */
                    page?: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Rebate History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example OK */
                            status: string;
                            /** @example GENERAL */
                            type: string;
                            /** @example 000000000 */
                            code: string;
                            data: {
                                /**
                                 * Format: int32
                                 * @example 1
                                 */
                                page: number;
                                /**
                                 * Format: int32
                                 * @example 2
                                 */
                                totalRecords: number;
                                /**
                                 * Format: int32
                                 * @example 1
                                 */
                                totalPageNum: number;
                                data: {
                                    /** @example USDT */
                                    asset: string;
                                    /**
                                     * Format: int32
                                     * @description rebate type：1 is commission rebate，2 is referral kickback
                                     * @example 1
                                     */
                                    type: number;
                                    /** @example 0.0001126 */
                                    amount: string;
                                    /**
                                     * Format: int64
                                     * @example 1637651320000
                                     */
                                    updateTime: number;
                                }[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/nft/history/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get NFT Transaction History (USER_DATA)
         * @description - The max interval between startTime and endTime is 90 days.
         *     - If startTime and endTime are not sent, the recent 7 days' data will be returned.
         *
         *     Weight(UID): 3000
         */
        get: {
            parameters: {
                query: {
                    /** @description 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee */
                    orderType: number;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 50, Max 50 */
                    limit?: components["parameters"]["limit50"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description NFT Transaction History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                            list: {
                                /**
                                 * @description 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
                                 * @example 1_470502070600699904
                                 */
                                orderNo: string;
                                tokens: {
                                    /** @example BSC */
                                    network: string;
                                    /** @example 216000000496 */
                                    tokenId: string;
                                    /** @example MYSTERY_BOX0000087 */
                                    contractAddress: string;
                                }[];
                                /**
                                 * Format: int64
                                 * @example 1626941236000
                                 */
                                tradeTime: number;
                                /** @example 19.60000000 */
                                tradeAmount: string;
                                /** @example BNB */
                                tradeCurrency: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/nft/history/deposit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get NFT Deposit History(USER_DATA)
         * @description - The max interval between startTime and endTime is 90 days.
         *     - If startTime and endTime are not sent, the recent 7 days' data will be returned.
         *
         *     Weight(UID): 3000
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 50, Max 50 */
                    limit?: components["parameters"]["limit50"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description NFT Deposit History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 1
                             */
                            total: number;
                            list: {
                                /** @example ETH */
                                network: string;
                                /** @example null */
                                txID: number | null;
                                /** @example 0xe507c961ee127d4439977a61af39c34eafee0dc6 */
                                contractAdrress: string;
                                /** @example 10014 */
                                tokenId: string;
                                /**
                                 * Format: int64
                                 * @example 1629986047000
                                 */
                                timestamp: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/nft/history/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get NFT Withdraw History (USER_DATA)
         * @description - The max interval between startTime and endTime is 90 days.
         *     - If startTime and endTime are not sent, the recent 7 days' data will be returned.
         *
         *     Weight(UID): 3000
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default 50, Max 50 */
                    limit?: components["parameters"]["limit50"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description NFT Withdraw History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 178
                             */
                            total: number;
                            list: {
                                /** @example ETH */
                                network: string;
                                /** @example 0x2be5eed31d787fdb4880bc631c8e76bdfb6150e137f5cf1732e0416ea206f57f */
                                txID: string;
                                /** @example 0xe507c961ee127d4439977a61af39c34eafee0dc6 */
                                contractAdrress: string;
                                /** @example 1000001247 */
                                tokenId: string;
                                /**
                                 * Format: int64
                                 * @example 1633674433000
                                 */
                                timestamp: number;
                                /** @example 0.1 */
                                fee: number;
                                /** @example ETH */
                                feeAsset: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/nft/user/getAsset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get NFT Asset (USER_DATA)
         * @description Weight(UID): 3000
         */
        get: {
            parameters: {
                query: {
                    /** @description Default 50, Max 50 */
                    limit?: components["parameters"]["limit50"];
                    /** @description Default 1 */
                    page?: components["parameters"]["page"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Asset Information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int32
                             * @example 347
                             */
                            total: number;
                            list: {
                                /** @example BSC */
                                network: string;
                                /** @example REGULAR11234567891779 */
                                contractAddress: string;
                                /** @example 100900000017 */
                                tokenId: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/giftcard/createCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Binance Code (USER_DATA)
         * @description This API is for creating a Binance Code. To get started with, please make sure:
         *
         *     - You have a Binance account
         *     - You have passed kyc
         *     - You have a sufficient balance in your Binance funding wallet
         *     - You need Enable Withdrawals for the API Key which requests this endpoint.
         *
         *     Daily creation volume: 2 BTC / 24H Daily creation times: 200 Codes / 24H
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description The coin type contained in the Binance Code */
                    token: string;
                    /** @description The amount of the coin */
                    amount: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Code creation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            data: {
                                /** @example 0033002327977405 */
                                referenceNo: string;
                                /** @example AOGANK3NB4GIT3C6 */
                                code: string;
                                /**
                                 * Format: int64
                                 * @example 1727417154000
                                 */
                                expiredTime: number;
                            };
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/giftcard/redeemCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redeem a Binance Code (USER_DATA)
         * @description This API is for redeeming the Binance Code. Once redeemed, the coins will be deposited in your funding wallet.
         *
         *     Please note that if you enter the wrong code 5 times within 24 hours, you will no longer be able to redeem any Binance Code that day.
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description Binance Code */
                    code: string;
                    /** @description Each external unique ID represents a unique user on the partner platform. The function helps you to identify the redemption behavior of different users, such as redemption frequency and amount. It also helps risk and limit control of a single account, such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner's daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance codes on your platform. To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters). */
                    externalUid?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redeemed Information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            data: {
                                /** @example BNB */
                                token: string;
                                /** @example 10 */
                                amount: string;
                                /** @example 0033002327977405 */
                                referenceNo: string;
                                /** @example 10316281761814589440 */
                                identityNo: string;
                            };
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/giftcard/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verify a Binance Code (USER_DATA)
         * @description This API is for verifying whether the Binance Code is valid or not by entering Binance Code or reference number.
         *
         *     Please note that if you enter the wrong binance code 5 times within an hour, you will no longer be able to verify any binance code for that hour.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description reference number */
                    referenceNo: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Code Verification */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            data: {
                                valid: boolean;
                                /** @example BNB */
                                token: string;
                                /** @example 0.00000001 */
                                amount: string;
                            };
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/giftcard/cryptography/rsa-public-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch RSA Public Key (USER_DATA)
         * @description This API is for fetching the RSA Public Key.
         *     This RSA Public key will be used to encrypt the card code.
         *     Please note that the RSA Public key fetched is valid only for the current day.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description RSA Public Key. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            /** @example MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCXBBVKLAc1GQ5FsIFFqOHrPTox5noBONIKr+IAedTR9FkVxq6e65updEbfdhRNkMOeYIO2i0UylrjGC0X8YSoIszmrVHeV0l06Zh1oJuZos1+7N+WLuz9JvlPaawof3GUakTxYWWCa9+8KIbLKsoKMdfS96VT+8iOXO3quMGKUmQIDAQAB */
                            data: string;
                            /** @example true */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/giftcard/buyCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Buy a Binance Code (TRADE)
         * @description This API is for buying a fixed-value Binance Code, which means your Binance Code will be redeemable to a token that is different to the token that you are paying in. If the token you’re paying and the redeemable token are the same, please use the Create Binance Code endpoint.
         *     You can use supported crypto currency or fiat token as baseToken to buy Binance Code that is redeemable to your chosen faceToken.
         *     Once successfully purchased, the amount of baseToken would be deducted from your funding wallet.
         *
         *     To get started with, please make sure:
         *     - You have a Binance account
         *     - You have passed kyc
         *     - You have a sufficient balance in your Binance funding wallet
         *     - You need Enable Withdrawals for the API Key which requests this endpoint.
         *
         *     Daily creation volume: 2 BTC / 24H Daily creation times: 200 Codes / 24H
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description The token you want to pay, example BUSD */
                    baseToken: string;
                    /** @description The token you want to buy, example BNB. If faceToken = baseToken, it's the same as createCode endpoint. */
                    faceToken: string;
                    /** @description The base token asset quantity, example  1.002 */
                    baseTokenAmount: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Code creation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            data: {
                                /** @example 0033002327977405 */
                                referenceNo: string;
                                /** @example AOGANK3NB4GIT3C6 */
                                code: string;
                                /**
                                 * Format: int64
                                 * @example 1727417154000
                                 */
                                expiredTime: number;
                            };
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/giftcard/buyCode/token-limit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Token Limit (USER_DATA)
         * @description This API is to help you verify which tokens are available for you to purchase fixed-value gift cards as mentioned in section 2 and it's limitation.
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The token you want to pay, example BUSD */
                    baseToken: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Token limit */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            data: {
                                /** @example BNB */
                                coin?: string;
                                /** @example 0.01 */
                                fromMin?: string;
                                /** @example 1 */
                                fromMax?: string;
                            };
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/target-asset/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get target asset list (USER_DATA)
         * @description Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    targetAsset?: string;
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Target asset list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example BTC */
                            targetAssets?: string;
                            autoInvestAssetList?: {
                                /** @example BTC */
                                targetAsset: string;
                                roiAndDimensionTypeList: {
                                    /** @example 5.004 */
                                    simulateRoi: string;
                                    /** @example 3 */
                                    dimensionValue: string;
                                    /** @example year */
                                    dimensionUnit: string;
                                }[];
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/target-asset/roi/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get target asset ROI data (USER_DATA)
         * @description ROI return list for target asset
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    targetAsset: components["parameters"]["targetAsset"];
                    hisRoiType: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Target asset list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1648378800000 */
                            date: string;
                            /** @example 1.75 */
                            simulateRoi: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/all/asset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query all source asset and target asset (USER_DATA)
         * @description Query all source assets and target assets
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Target asset */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            targetAssets: string[];
                            sourceAssets: string[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/source-asset/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query source asset list (USER_DATA)
         * @description Query Source Asset to be used for investment
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    targetAsset?: string;
                    indexId?: number;
                    usageType: string;
                    flexibleAllowedToUse?: boolean;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Asset list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 0.002 */
                            feeRate: string;
                            sourceAssets: {
                                /** @example USDT */
                                sourceAsset: string;
                                /** @example 0.1 */
                                assetMinAmount: string;
                                /** @example 1000000 */
                                assetMaxAmount: string;
                                /** @example 2 */
                                scale: string;
                                /** @example 1111 */
                                flexibleAmount: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/plan/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Investment plan creation (USER_DATA)
         * @description Post an investment plan creation
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    sourceType: "MAIN_SITE" | "TR";
                    requestId?: string;
                    planType: "SINGLE" | "PORTFOLIO" | "INDEX";
                    IndexId?: number;
                    subscriptionAmount: number;
                    subscriptionCycle: "H1" | "H4" | "H8" | "H12" | "WEEKLY" | "DAILY" | "MONTHLY" | "BI_WEEKLY";
                    subscriptionStartDay?: number;
                    subscriptionStartWeekday?: "MON" | "TUE" | "WED" | "THU" | "FRI" | "SAT" | "SUN";
                    subscriptionStartTime: number;
                    sourceAsset: string;
                    flexibleAllowedToUse?: boolean;
                    details: {
                        /** @example BTC */
                        targetAsset?: string;
                        /** Format: int64 */
                        percentage?: number;
                    }[];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Plan result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 12345 */
                            planId: number;
                            /**
                             * Format: int64
                             * @example 1648378800000
                             */
                            nextExecutionDateTime: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/plan/edit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Investment plan adjustment
         * @description Query Source Asset to be used for investment
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    planId: number;
                    subscriptionAmount: number;
                    subscriptionCycle: "H1" | "H4" | "H8" | "H12" | "WEEKLY" | "DAILY" | "MONTHLY" | "BI_WEEKLY";
                    subscriptionStartDay?: number;
                    subscriptionStartWeekday?: "MON" | "TUE" | "WED" | "THU" | "FRI" | "SAT" | "SUN";
                    subscriptionStartTime: number;
                    sourceAsset: string;
                    flexibleAllowedToUse?: boolean;
                    details?: {
                        /** @example BTC */
                        targetAsset?: string;
                        /** Format: int64 */
                        percentage?: number;
                    }[];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Plan result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 12345 */
                            planId: number;
                            /**
                             * Format: int64
                             * @example 1648378800000
                             */
                            nextExecutionDateTime: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/plan/edit-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Plan Status
         * @description Change Plan Status
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    planId: number;
                    status: "ONGOING" | "PAUSED" | "REMOVED";
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Plan result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 12345 */
                            planId: number;
                            /**
                             * Format: int64
                             * @example 1648378800000
                             */
                            nextExecutionDateTime: number;
                            /** @example ONGOING */
                            status: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/plan/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of plans
         * @description Query plan lists
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    planType: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Plan result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 123 */
                            planValueInUSD: string;
                            /** @example 0.1 */
                            planValueInBTC: string;
                            /** @example 120 */
                            pnlInUSD: string;
                            /** @example 2.3 */
                            roi: string;
                            plan: {
                                /** @example 12345 */
                                planId: number;
                                /** @example SINGLE */
                                planType: string;
                                /** @example true */
                                editAllowed: string;
                                /**
                                 * Format: int64
                                 * @example 1648378800000
                                 */
                                creationDateTime: number;
                                /**
                                 * Format: int64
                                 * @example 1648378800000
                                 */
                                firstExecutionDateTime: number;
                                /**
                                 * Format: int64
                                 * @example 1648378800000
                                 */
                                nextExecutionDateTime: number;
                                /** @example ONGOING */
                                status: string;
                                /**
                                 * Format: int64
                                 * @example 1648378800000
                                 */
                                lastUpdatedDateTime: number;
                                /** @example BTC */
                                targetAsset: string;
                                /** @example 0.111 */
                                totalTargetAmount: string;
                                /** @example BUSD */
                                sourceAsset: string;
                                /** @example 4.555 */
                                totalInvestedInUSD: string;
                                /** @example 0.1 */
                                subscriptionAmount: string;
                                /** @example WEEKLY */
                                subscriptionCycle: string;
                                /** @example 1 */
                                subscriptionStartDay: string;
                                /** @example MON */
                                subscriptionStartWeekday: string;
                                /** @example 1 */
                                subscriptionStartTime: string;
                                /** @example SPOT_WALLET */
                                sourceWallet: string;
                                /** @example false */
                                flexibleAllowedToUse: string;
                                /** @example 101.2 */
                                planValueInUSD: string;
                                /** @example 101.2 */
                                pnlInUSD: string;
                                /** @example 1.02 */
                                roi: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/plan/id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query holding details of the plan
         * @description Query holding details of the plan
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    planId?: number;
                    requestId?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Plan result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 123 */
                            planValueInUSD?: string;
                            /** @example 0.1 */
                            planValueInBTC?: string;
                            /** @example 120 */
                            pnlInUSD?: string;
                            /** @example 2.3 */
                            roi?: string;
                            plan?: {
                                /** @example 12345 */
                                planId: number;
                                /** @example SINGLE */
                                planType: string;
                                /** @example true */
                                editAllowed: string;
                                /** @example false */
                                flexibleAllowedToUse: string;
                                /**
                                 * Format: int64
                                 * @example 1648378800000
                                 */
                                creationDateTime: number;
                                /**
                                 * Format: int64
                                 * @example 1648378800000
                                 */
                                firstExecutionDateTime: number;
                                /**
                                 * Format: int64
                                 * @example 1648378800000
                                 */
                                nextExecutionDateTime: number;
                                /** @example ONGOING */
                                status: string;
                                /** @example BTC */
                                targetAsset: string;
                                /** @example BUSD */
                                sourceAsset: string;
                                /** @example 4.555 */
                                totalInvestedInUSD: string;
                                /** @example 101.2 */
                                planValueInUSD: string;
                                /** @example 101.2 */
                                pnlInUSD: string;
                                /** @example 1.02 */
                                roi: string;
                                details: {
                                    /** @example ADA */
                                    targetAsset: string;
                                    /** @example 3.4 */
                                    averagePriceInUSD: string;
                                    /** @example 222.21 */
                                    totalInvestedInUSD: string;
                                    /** @example 122.12345678 */
                                    purchasedAmount: string;
                                    /** @example ADA */
                                    purchasedAmountUnit: string;
                                    /** @example 109.2 */
                                    pnlInUSD: string;
                                    /** @example 0.1 */
                                    roi: string;
                                    /** @example 50 */
                                    percentage: string;
                                    /** @example ACTIVE */
                                    assetStatus: string;
                                    /** @example 122.12345678 */
                                    availableAmount: string;
                                    /** @example ADA */
                                    availableAmountUnit: string;
                                    /** @example 122.12345678 */
                                    redeemedAmout: string;
                                    /** @example ADA */
                                    redeemedAmoutUnit: string;
                                    /** @example 101.2 */
                                    assetValueInUSD: string;
                                }[];
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/history/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query subscription transaction history
         * @description Query subscription transaction history of a plan
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    planId?: number;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    targetAsset?: number;
                    planType?: "SINGLE" | "PORTFOLIO" | "INDEX" | "ALL";
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Plan result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 12345
                             */
                            id: number;
                            /** @example BTC */
                            targetAsset: string;
                            /** @example SINGLE */
                            planType: string;
                            /** @example BTC */
                            planName: string;
                            /**
                             * Format: int64
                             * @example 1234
                             */
                            planId: number;
                            /**
                             * Format: int64
                             * @example 1648378800000
                             */
                            transactionDateTime: number;
                            /** @example SUCCESS */
                            transactionStatus: string;
                            /** @example INSUFFICIENT_BALANCE */
                            failedType: string;
                            /** @example BUSD */
                            sourceAsset: string;
                            /** @example 297.12345 */
                            sourceAssetAmount: string;
                            /** @example 297.12345 */
                            targetAssetAmount: string;
                            /** @example SPOT_WALLET */
                            sourceWallet: string;
                            /** @example false */
                            flexibleUsed: string;
                            /** @example 0.002 */
                            transactionFee: string;
                            /** @example BUSD */
                            transactionFeeUnit: string;
                            /** @example 2342 */
                            executionPrice: string;
                            /** @example RECURRING */
                            executionType: string;
                            /** @example WEEKLY */
                            subscriptionCycle: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/index/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Index Details(USER_DATA)
         * @description Query index details
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    indexId: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Index result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            indexId: number;
                            /** @example BINANCE TOP 10 EW */
                            indexName: string;
                            /** @example RUNNING */
                            status: string;
                            assetAllocation: {
                                /** @example ADA */
                                targetAsset: string;
                                /** @example 10 */
                                allocation: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/index/user-summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Index Linked Plan Position Details(USER_DATA)
         * @description Details on users Index-Linked plan position details
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    indexId: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Position Details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            indexId: number;
                            /** @example 114.555 */
                            totalInvestedInUSD: string;
                            /**
                             * @description current invest
                             * @example 101.2
                             */
                            currentInvestedInUSD: string;
                            /**
                             * @description PNL of the plan in USD based on current amount
                             * @example 101.2
                             */
                            pnlInUSD: string;
                            /**
                             * @description ROI of the plan based on current amount
                             * @example 1.023
                             */
                            roi: string;
                            assetAllocation: {
                                /**
                                 * @description for pie chart
                                 * @example ADA
                                 */
                                targetAsset: string;
                                /** @example 10 */
                                allocation: string;
                            }[];
                            details: {
                                /** @example ADA */
                                targetAsset: string;
                                /**
                                 * @description average price of the asset in USD
                                 * @example 3.4
                                 */
                                averagePriceInUSD: string;
                                /**
                                 * @description total source asset invested for this target asset in equivilent of USD
                                 * @example 222.21
                                 */
                                totalInvestedInUSD: string;
                                /**
                                 * @description current invest
                                 * @example 101.2
                                 */
                                currentInvestedInUSD: string;
                                /**
                                 * @description purchased amount of target asset
                                 * @example 122.2
                                 */
                                purchasedAmount: string;
                                /**
                                 * @description PNL denominated in USD
                                 * @example 109.2
                                 */
                                pnlInUSD: string;
                                /**
                                 * @description ROI calculated in decimal
                                 * @example 0.2
                                 */
                                roi: string;
                                /**
                                 * @description asset allocation in the plan. If it's single plan, then it's 100
                                 * @example 10
                                 */
                                percentage: string;
                                /** @example 122.12345678 */
                                availableAmount: string;
                                /** @example 122 */
                                redeemedAmount: string;
                                /** @example 101 */
                                assetValueInUSD: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/one-off": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * One Time Transaction(TRADE)
         * @description One time transaction
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    sourceType: string;
                    requestId?: string;
                    subscriptionAmount: number;
                    sourceAsset: string;
                    flexibleAllowedToUse?: boolean;
                    planId?: number;
                    indexId?: number;
                    details?: {
                        /** @example BTC */
                        targetAsset?: string;
                        /** @example 40 */
                        percentage?: number;
                    }[];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description transaction result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 12345
                             */
                            transactionId: number;
                            /**
                             * Format: int32
                             * @example 5
                             */
                            waitSecond: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/one-off/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query One-Time Transaction Status (USER_DATA)
         * @description Transaction status for one-time transaction
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    transactionId: number;
                    requestId?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description transaction result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 12345
                             */
                            transactionId: number;
                            /** @example SUCCESS */
                            status: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/redeem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Index Linked Plan Redemption (TRADE)
         * @description To redeem index-Linked plan holdings
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description PORTFOLIO plan's Id */
                    indexId: number;
                    /** @description sourceType + unique, transactionId and requestId cannot be empty at the same time */
                    requestId?: string;
                    /** @description user redeem percentage,10/20/100. */
                    redemptionPercentage: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redemption result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 12345
                             */
                            redemptionId: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/redeem/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Index Linked Plan Redemption History (USER_DATA)
         * @description Get the history of Index Linked Plan Redemption transactions
         *
         *     Max 30 day difference between startTime and endTime
         *     If no startTime and endTime, default to show past 30 day records
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    requestId: number;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    asset?: string;
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redemption history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            indexId: number;
                            /** @example BINANCE TOP 10 EW */
                            indexName: string;
                            /**
                             * Format: int64
                             * @example 11
                             */
                            redemptionId: number;
                            /** @example SUCCESS */
                            status: string;
                            /** @example BTC */
                            asset: string;
                            /** @example 0.005 */
                            amount: string;
                            /**
                             * Format: int64
                             * @example 1648378800000
                             */
                            redemptionDateTime: number;
                            /** @example 0 */
                            transactionFee: string;
                            /** @example USDT */
                            transactionFeeUnit: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/lending/auto-invest/rebalance/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Index Linked Plan Rebalance Details (USER_DATA)
         * @description Get the history of Index Linked Plan Redemption transactions
         *
         *     Max 30 day difference between startTime and endTime
         *     If no startTime and endTime, default to show past 30 day records
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Rebalance Details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            indexId: number;
                            /** @example BINANCE TOP 10 EW */
                            indexName: string;
                            /**
                             * Format: int64
                             * @example 11
                             */
                            rebalanceId: number;
                            /** @example SUCCESS */
                            status: string;
                            /** @example 10 */
                            rebalanceFee: string;
                            /** @example USDT */
                            rebalanceFeeUnit: string;
                            transactionDetails: {
                                /** @example BTC */
                                asset: string;
                                /**
                                 * Format: int64
                                 * @example 1648378800000
                                 */
                                transactionDateTime: number;
                                /** @example BUY */
                                rebalanceDirection: string;
                                /** @example 0.005 */
                                rebalanceAmount: string;
                            }[];
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/eth-staking/eth/stake": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Subscribe ETH Staking V2(TRADE)
         * @description Stake ETH to get WBETH
         *
         *     - You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         *     Weight(IP): 150
         */
        post: {
            parameters: {
                query: {
                    /** @description Amount in ETH, limit 4 decimals */
                    amount: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Subscribed WBETH */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success: boolean;
                            /** @example 0.23092091 */
                            wbethAmount: string;
                            /**
                             * @description ETH amount per 1 WBETH
                             * @example 1.001212342342
                             */
                            conversionRatio: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/eth-staking/eth/redeem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redeem ETH (TRADE)
         * @description Redeem WBETH or BETH and get ETH
         *
         *     - You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         *     Weight(IP): 150
         */
        post: {
            parameters: {
                query: {
                    /** @description WBETH or BETH, default to BETH */
                    asset?: string;
                    /** @description Amount in BETH, limit 8 decimals */
                    amount: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returned ETH */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success: boolean;
                            /**
                             * Format: int64
                             * @example 1575018510000
                             */
                            arrivalTime: number;
                            /** @example 0.23092091 */
                            ethAmount: string;
                            /** @example 1.00121234 */
                            conversionRatio: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/eth-staking/eth/history/stakingHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ETH staking history (USER_DATA)
         * @description - The time between startTime and endTime cannot be longer than 3 months.
         *     - If startTime and endTime are both not sent, then the last 30 days' data will be returned.
         *     - If startTime is sent but endTime is not sent, the next 30 days' data beginning from startTime will be returned.
         *     - If endTime is sent but startTime is not sent, the 30 days' data before endTime will be returned.
         *
         *     Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description ETH staking history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                time: number;
                                /** @example ETH */
                                asset: string;
                                /** @example 21312.23223 */
                                amount: string;
                                /**
                                 * @description PENDING, SUCCESS, FAILED
                                 * @example SUCCESS
                                 */
                                status: string;
                                /** @example 21286.42584 */
                                distributeAmount: string;
                                /** @example 1.00121234 */
                                conversionRatio: string;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/eth-staking/eth/history/redemptionHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ETH redemption history (USER_DATA)
         * @description - The time between startTime and endTime cannot be longer than 3 months.
         *     - If startTime and endTime are both not sent, then the last 30 days' data will be returned.
         *     - If startTime is sent but endTime is not sent, the next 30 days' data beginning from startTime will be returned.
         *     - If endTime is sent but startTime is not sent, the 30 days' data before endTime will be returned.
         *
         *     Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description ETH redemption history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                time: number;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                arrivalTime: number;
                                /** @example BETH */
                                asset: string;
                                /** @example 21312.23223 */
                                amount: string;
                                /**
                                 * @description PENDING, SUCCESS, FAILED
                                 * @example SUCCESS
                                 */
                                status: string;
                                /** @example ETH */
                                distributeAsset: string;
                                /** @example 21338.0699 */
                                distributeAmount: string;
                                /** @example 1.00121234 */
                                conversionRatio: string;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/eth-staking/eth/history/rewardsHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get BETH rewards distribution history(USER_DATA)
         * @description - The time between startTime and endTime cannot be longer than 3 months.
         *     - If startTime and endTime are both not sent, then the last 30 days' data will be returned.
         *     - If startTime is sent but endTime is not sent, the next 30 days' data beginning from startTime will be returned.
         *     - If endTime is sent but startTime is not sent, the 30 days' data before endTime will be returned.
         *
         *     Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description BETH rewards distribution history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                time: number;
                                /** @example ETH */
                                asset: string;
                                /**
                                 * @description BETH holding balance
                                 * @example 2.3223
                                 */
                                holding: string;
                                /**
                                 * @description Distributed rewards
                                 * @example 0.23223
                                 */
                                amount: string;
                                /**
                                 * @description 0.5 means 50% here
                                 * @example 0.5
                                 */
                                annualPercentageRate: string;
                                /** @example SUCCESS */
                                status: string;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/eth-staking/eth/quota": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current ETH staking quota (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Eth staking quota */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Show min(Daily available limit, total personal staking quota)
                             * @example 1000
                             */
                            leftStakingPersonalQuota: string;
                            /**
                             * @description Show min(Daily personal redeem quota, total redemption limit)
                             * @example 1000
                             */
                            leftRedemptionPersonalQuota: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/eth-staking/eth/history/rateHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get WBETH Rate History (USER_DATA)
         * @description - The time between startTime and endTime cannot be longer than 3 months.
         *     - If startTime and endTime are both not sent, then the last 30 days' data will be returned.
         *     - If startTime is sent but endTime is not sent, the next 30 days' data beginning from startTime will be returned.
         *     - If endTime is sent but startTime is not sent, the 30 days' data before endTime will be returned.
         *
         *     Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description WBETH Rate History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /**
                                 * @description BETH APR
                                 * @example 0.5
                                 */
                                annualPercentageRate: string;
                                /**
                                 * @description BETH value per 1 WBETH
                                 * @example 1.00121234
                                 */
                                exchangeRate: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                time: number;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v2/eth-staking/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ETH Staking account V2(USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description ETH Staking account */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1.22330928 */
                            holdingInETH: string;
                            holdings: {
                                /** @example 1.10928781 */
                                wbethAmount: string;
                                /** @example 1.90002112 */
                                bethAmount: string;
                            };
                            /** @example 0.22330928 */
                            thirtyDaysProfitInETH: string;
                            profit: {
                                /** @example 0.12330928 */
                                amountFromWBETH: string;
                                /** @example 0.1 */
                                amountFromBETH: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/eth-staking/wbeth/wrap": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Wrap BETH(TRADE)
         * @description - You need to open Enable Spot & Margin Trading permission for the API Key which requests this endpoint.
         *
         *     Weight(IP): 150
         */
        post: {
            parameters: {
                query: {
                    /** @description Amount in BETH, limit 4 decimals */
                    amount: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Wrap BETH */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success: boolean;
                            /** @example 0.22330928 */
                            wbethAmount: string;
                            /** @example 1.001212343432 */
                            exchangeRate: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/eth-staking/wbeth/history/wrapHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get WBETH wrap history (USER_DATA)
         * @description - The time between startTime and endTime cannot be longer than 3 months.
         *     - If startTime and endTime are both not sent, then the last 30 days' data will be returned.
         *     - If startTime is sent but endTime is not sent, the next 30 days' data beginning from startTime will be returned.
         *     - If endTime is sent but startTime is not sent, the 30 days' data before endTime will be returned.
         *
         *     Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description WBETH wrap history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                time: number;
                                /** @example BETH */
                                fromAsset: string;
                                /** @example 21312.23223 */
                                fromAmount: string;
                                /** @example WBETH */
                                toAsset: string;
                                /** @example 21312.23223 */
                                toAmount: string;
                                /**
                                 * @description BETH amount per 1 WBETH
                                 * @example 1.01243253
                                 */
                                exchangeRate: string;
                                /**
                                 * @description PENDING, SUCCESS, FAILED
                                 * @example SUCCESS
                                 */
                                status: string;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/eth-staking/wbeth/history/unwrapHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get WBETH unwrap history (USER_DATA)
         * @description - The time between startTime and endTime cannot be longer than 3 months.
         *     - If startTime and endTime are both not sent, then the last 30 days' data will be returned.
         *     - If startTime is sent but endTime is not sent, the next 30 days' data beginning from startTime will be returned.
         *     - If endTime is sent but startTime is not sent, the 30 days' data before endTime will be returned.
         *
         *     Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description WBETH unwrap history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                time: number;
                                /** @example WBETH */
                                fromAsset: string;
                                /** @example 21312.23223 */
                                fromAmount: string;
                                /** @example BETH */
                                toAsset: string;
                                /** @example 21312.23223 */
                                toAmount: string;
                                /**
                                 * @description BETH amount per 1 WBETH
                                 * @example 1.01243253
                                 */
                                exchangeRate: string;
                                /**
                                 * @description PENDING, SUCCESS, FAILED
                                 * @example SUCCESS
                                 */
                                status: string;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/eth-staking/eth/history/wbethRewardsHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get WBETH rewards history(USER_DATA)
         * @description - The time between startTime and endTime cannot be longer than 3 months.
         *     - If startTime and endTime are both not sent, then the last 30 days' data will be returned.
         *     - If startTime is sent but endTime is not sent, the next 30 days' data beginning from startTime will be returned.
         *     - If endTime is sent but startTime is not sent, the 30 days' data before endTime will be returned.
         *
         *     Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description WBETH rewards history */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1.23230920 */
                            estRewardsInETH: string;
                            rows: {
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                time: number;
                                /**
                                 * @description Estimated rewards accrued within WBETH
                                 * @example 0.23223
                                 */
                                amountInETH: string;
                                /**
                                 * @description WBETH holding balance
                                 * @example 2.3223
                                 */
                                holding: string;
                                /** @example 2.4231 */
                                holdingInETH: string;
                                /** @example 0.5 */
                                annualPercentageRate: string;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/copyTrading/futures/userStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Futures Lead Trader Status(TRADE)
         * @description Get Futures Lead Trader Status
         *
         *     Weight(UID): 20
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Futures Lead Trader Status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            data: {
                                /** @example true */
                                isLeadTrader: boolean;
                                /**
                                 * Format: int64
                                 * @example 1717382310843
                                 */
                                time: number;
                            };
                            /** @example true */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/copyTrading/futures/leadSymbol": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Futures Lead Trading Symbol Whitelist(USER_DATA)
         * @description Get Futures Lead Trading Symbol Whitelist
         *
         *     Weight(IP): 20
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Futures Lead Trading Symbol Whitelist */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 000000 */
                            code: string;
                            /** @example success */
                            message: string;
                            data: {
                                /** @example BTCUSDT */
                                symbol: string;
                                /** @example BTC */
                                baseAsset: string;
                                /** @example USDT */
                                quoteAsset: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/flexible/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Simple Earn Flexible Product List (USER_DATA)
         * @description Get available Simple Earn flexible product list
         *
         *     Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    asset?: string;
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Simple Earn Flexible Product List */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BTC */
                                asset: string;
                                /** @example 0.05000000 */
                                latestAnnualPercentageRate: string;
                                tierAnnualPercentageRate: {
                                    /**
                                     * Format: double
                                     * @example 0.05
                                     */
                                    "0-5BTC": number;
                                    /**
                                     * Format: double
                                     * @example 0.03
                                     */
                                    "5-10BTC": number;
                                };
                                /** @example 0.05000000 */
                                airDropPercentageRate: string;
                                /** @example true */
                                canPurchase: boolean;
                                /** @example true */
                                canRedeem: boolean;
                                /** @example true */
                                isSoldOut: boolean;
                                /** @example true */
                                hot: boolean;
                                /** @example 0.01000000 */
                                minPurchaseAmount: string;
                                /** @example BTC001 */
                                productId: string;
                                /** @example 1646182276000 */
                                subscriptionStartTime: string;
                                /** @example PURCHASING */
                                status: string;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/locked/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Simple Earn Locked Product List (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    asset?: string;
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Simple Earn Locked Product List */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BNB */
                                projectId: string;
                                detail: {
                                    /** @example AXS */
                                    asset: string;
                                    /** @example AXS */
                                    rewardAsset: string;
                                    /**
                                     * Format: int64
                                     * @example 90
                                     */
                                    duration: number;
                                    /** @example true */
                                    renewable: boolean;
                                    /** @example true */
                                    isSoldOut: boolean;
                                    /** @example 1.2069 */
                                    apr: string;
                                    /** @example CREATED */
                                    status: string;
                                    /** @example 1646182276000 */
                                    subscriptionStartTime: string;
                                    /** @example BNB */
                                    extraRewardAsset: string;
                                    /** @example 0.23 */
                                    extraRewardAPR: string;
                                };
                                quota: {
                                    /** @example 2 */
                                    totalPersonalQuota: string;
                                    /** @example 0.001 */
                                    minimum: string;
                                };
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/flexible/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Subscribe Flexible Product (TRADE)
         * @description Weight(IP): 1
         *
         *     Rate Limit: 1/3s per account
         */
        post: {
            parameters: {
                query: {
                    productId: string;
                    amount: number;
                    /** @description true or false, default true. */
                    autoSubscribe?: boolean;
                    /** @description SPOT,FUND,ALL, default SPOT */
                    sourceAccount?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Flexible Product Subscription Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 40607
                             */
                            purchaseId: number;
                            /** @example true */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/locked/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Subscribe Locked Product (TRADE)
         * @description Weight(IP): 1
         *
         *     Rate Limit: 1/3s per account
         */
        post: {
            parameters: {
                query: {
                    projectId: string;
                    amount: number;
                    /** @description true or false, default true. */
                    autoSubscribe?: boolean;
                    /** @description SPOT,FUND,ALL, default SPOT */
                    sourceAccount?: string;
                    /** @description SPOT,FLEXIBLE, default FLEXIBLE */
                    redeemTo?: "SPOT" | "FLEXIBLE";
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Locked Product Subscription Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 40607
                             */
                            purchaseId: number;
                            /** @example 12345 */
                            positionId: string;
                            /** @example true */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/flexible/redeem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redeem Flexible Product (TRADE)
         * @description Weight(IP): 1
         *
         *     Rate Limit: 1/3s per account
         */
        post: {
            parameters: {
                query: {
                    productId: string;
                    /** @description true or false, default to false */
                    redeemAll?: boolean;
                    /** @description if redeemAll is false, amount is mandatory */
                    amount?: number;
                    /** @description SPOT,FUND,ALL, default SPOT */
                    destAccount?: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redeem Flexible Product */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 40607
                             */
                            redeemId: number;
                            /** @example true */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/locked/redeem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redeem Locked Product (TRADE)
         * @description Weight(IP): 1
         *
         *     Rate Limit: 1/3s per account
         */
        post: {
            parameters: {
                query: {
                    /** @description 1234 */
                    positionId: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redeem Locked Product */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 40607
                             */
                            redeemId: number;
                            /** @example true */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/flexible/position": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Flexible Product Position (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    asset?: string;
                    productId?: string;
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Flexible Product Position */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example 75.46000000 */
                                totalAmount: string;
                                tierAnnualPercentageRate: {
                                    /**
                                     * Format: double
                                     * @example 0.05
                                     */
                                    "0-5BTC": number;
                                    /**
                                     * Format: double
                                     * @example 0.03
                                     */
                                    "5-10BTC": number;
                                };
                                /** @example 0.02599895 */
                                latestAnnualPercentageRate: string;
                                /** @example 0.02599895 */
                                yesterdayAirdropPercentageRate: string;
                                /** @example USDT */
                                asset: string;
                                /** @example BETH */
                                airDropAsset: string;
                                /** @example true */
                                canRedeem: boolean;
                                /** @example 232.23123213 */
                                collateralAmount: string;
                                /** @example USDT001 */
                                productId: string;
                                /** @example 0.10293829 */
                                yesterdayRealTimeRewards: string;
                                /** @example 0.22759183 */
                                cumulativeBonusRewards: string;
                                /** @example 0.22759183 */
                                cumulativeRealTimeRewards: string;
                                /** @example 0.45459183 */
                                cumulativeTotalRewards: string;
                                /** @example true */
                                autoSubscribe: boolean;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/locked/position": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Locked Product Position (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    asset?: string;
                    positionId?: string;
                    projectId?: string;
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Locked Product Position */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example 123123 */
                                positionId: string;
                                /** @example 123122 */
                                parentPositionId: string;
                                /** @example Axs*90 */
                                projectId: string;
                                /** @example AXS */
                                asset: string;
                                /** @example 122.09202928 */
                                amount: string;
                                /** @example 1646182276000 */
                                purchaseTime: string;
                                /** @example 60 */
                                duration: string;
                                /** @example 4 */
                                accrualDays: string;
                                /** @example AXS */
                                rewardAsset: string;
                                /** @example 0.23 */
                                APY: string;
                                /**
                                 * @description Earned amount
                                 * @example 5.17181528
                                 */
                                rewardAmt: string;
                                /**
                                 * @description Rewards assets of extra staking type
                                 * @example BNB
                                 */
                                extraRewardAsset: string;
                                /**
                                 * @description APR of extra staking type
                                 * @example 0.0203
                                 */
                                extraRewardAPR: string;
                                /**
                                 * @description Rewards of extra staking type, distribute when order expires
                                 * @example 5.17181528
                                 */
                                estExtraRewardAmt: string;
                                /**
                                 * @description Next estimated rewards payment
                                 * @example 1.29295383
                                 */
                                nextPay: string;
                                /**
                                 * @description Next rewards payment date
                                 * @example 1646697600000
                                 */
                                nextPayDate: string;
                                /**
                                 * @description Payment cycle
                                 * @example 1
                                 */
                                payPeriod: string;
                                /**
                                 * @description Early redemption amount
                                 * @example 2802.24068892
                                 */
                                redeemAmountEarly: string;
                                /**
                                 * @description Rewards accrual end date
                                 * @example 1651449600000
                                 */
                                rewardsEndDate: string;
                                /**
                                 * @description Redemption arrival time
                                 * @example 1651536000000
                                 */
                                deliverDate: string;
                                /**
                                 * @description Redemption interval
                                 * @example 1
                                 */
                                redeemPeriod: string;
                                /**
                                 * @description Amount under redemption
                                 * @example 232.2323
                                 */
                                redeemingAmt: string;
                                /**
                                 * @description Redeem to Flexible product or Spot wallet
                                 * @example FLEXIBLE
                                 */
                                redeemTo: string;
                                /**
                                 * @description Arrival time of partial redemption amount of order
                                 * @example 1651536000000
                                 */
                                partialAmtDeliverDate: string;
                                /**
                                 * @description When it is true, early redemption can be operated
                                 * @example true
                                 */
                                canRedeemEarly: boolean;
                                /**
                                 * @description When it is true, fast redemption can be operated
                                 * @example true
                                 */
                                canFastRedemption: boolean;
                                /**
                                 * @description When it is true, auto staking can be operated
                                 * @example true
                                 */
                                autoSubscribe: boolean;
                                /**
                                 * @description Order type is auto subscribe or normal
                                 * @example AUTO
                                 */
                                type: string;
                                /** @example HOLDING */
                                status: string;
                                /** @example true */
                                canReStake: boolean;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Simple Account (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Account Information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 0.01067982 */
                            totalAmountInBTC: string;
                            /** @example 77.13289230 */
                            totalAmountInUSDT: string;
                            /** @example 0.00000000 */
                            totalFlexibleAmountInBTC: string;
                            /** @example 0.00000000 */
                            totalFlexibleAmountInUSDT: string;
                            /** @example 0.01067982 */
                            totalLockedInBTC: string;
                            /** @example 77.13289230 */
                            totalLockedInUSDT: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/flexible/history/subscriptionRecord": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Flexible Subscription Record (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    productId?: string;
                    purchaseId?: string;
                    asset?: string;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Flexible Product Position */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example 100.00000000 */
                                amount: string;
                                /** @example USDT */
                                asset: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                time: number;
                                /**
                                 * Format: int64
                                 * @example 26055
                                 */
                                purchaseId: number;
                                /** @example USDT001 */
                                productId: string;
                                /**
                                 * @description AUTO for auto subscribe, NORMAL for normal subscription, CONVERT for Locked to Flexible, LOAN for flexible loan collateral, AI for Auto Invest subscribe, TRANSFER for Locked Savings to Flexible
                                 * @example AUTO
                                 */
                                type: string;
                                /**
                                 * @description SPOT, FUNDING, SPOTANDFUNDING
                                 * @example SPOT
                                 */
                                sourceAccount: string;
                                /**
                                 * @description Display if sourceAccount is SPOTANDFUNDING
                                 * @example 30
                                 */
                                amtFromSpot: string;
                                /**
                                 * @description Display if sourceAccount is SPOTANDFUNDING
                                 * @example 70
                                 */
                                amtFromFunding: string;
                                /**
                                 * @description PURCHASING/SUCCESS/FAILED
                                 * @example SUCCESS
                                 */
                                status: string;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/locked/history/subscriptionRecord": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Locked Subscription Record (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    purchaseId?: string;
                    asset?: string;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Locked Subscription Record */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example 123123 */
                                positionId: string;
                                /**
                                 * Format: int64
                                 * @example 26055
                                 */
                                purchaseId: number;
                                /** @example Axs*90 */
                                projectId: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                time: number;
                                /** @example BNB */
                                asset: string;
                                /** @example 21312.23223 */
                                amount: string;
                                /** @example 30 */
                                lockPeriod: string;
                                /**
                                 * @description NORMAL for normal subscription, AUTO for auto-subscription order, ACTIVITY for activity order, TRIAL for trial fund order, RESTAKE for restake order
                                 * @example AUTO
                                 */
                                type: string;
                                /**
                                 * @description SPOT, FUNDING, SPOTANDFUNDING
                                 * @example SPOT
                                 */
                                sourceAccount: string;
                                /**
                                 * @description Display if sourceAccount is SPOTANDFUNDING
                                 * @example 30
                                 */
                                amtFromSpot: string;
                                /**
                                 * @description Display if sourceAccount is SPOTANDFUNDING
                                 * @example 70
                                 */
                                amtFromFunding: string;
                                /**
                                 * @description PURCHASING/SUCCESS/FAILED
                                 * @example SUCCESS
                                 */
                                status: string;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/flexible/history/redemptionRecord": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Flexible Redemption Record (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query?: {
                    productId?: string;
                    redeemId?: string;
                    asset?: string;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Flexible Redemption Record */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example 10.54000000 */
                                amount: string;
                                /** @example USDT */
                                asset: string;
                                /**
                                 * Format: int64
                                 * @example 1577257222000
                                 */
                                time: number;
                                /** @example USDT001 */
                                projectId: string;
                                /**
                                 * Format: int64
                                 * @example 40607
                                 */
                                redeemId: number;
                                /**
                                 * @description SPOT, FUNDING
                                 * @example SPOT
                                 */
                                destAccount: string;
                                /** @example PAID */
                                status: string;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/locked/history/redemptionRecord": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Locked Redemption Record (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    positionId?: string;
                    redeemId?: string;
                    asset?: string;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Locked Redemption Record */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example 123123 */
                                positionId: string;
                                /**
                                 * Format: int64
                                 * @example 40607
                                 */
                                redeemId: number;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                time: number;
                                /** @example BNB */
                                asset: string;
                                /** @example 30 */
                                lockPeriod: string;
                                /** @example 21312.23223 */
                                amount: string;
                                /** @example 21312.23223 */
                                originalAmount: string;
                                /**
                                 * @description MATURE for redeem to Spot Wallet, NEW_TRANSFERRED for redeem to Flexible product, AHEAD for early redemption
                                 * @example MATURE
                                 */
                                type: string;
                                /** @example 1575018510000 */
                                deliverDate: string;
                                /**
                                 * @description Loss of profit on early redemption
                                 * @example 0.00001232
                                 */
                                lossAmount: string;
                                /** @example true, */
                                isComplete: boolean;
                                /** @example AXS */
                                rewardAsset: string;
                                /** @example 5.17181528 */
                                rewardAmt: string;
                                /** @example BNB */
                                extraRewardAsset: string;
                                /** @example 5.17181528 */
                                estExtraRewardAmt: string;
                                /** @example PAID */
                                status: string;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/flexible/history/rewardsRecord": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Flexible Rewards History (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    productId?: string;
                    asset?: string;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description "BONUS", "REALTIME", "REWARDS" */
                    type: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Flexible Rewards History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BUSD */
                                asset: string;
                                /** @example 0.00006408 */
                                rewards: string;
                                /** @example USDT001 */
                                projectId: string;
                                /** @example BONUS */
                                type: string;
                                /**
                                 * Format: int64
                                 * @example 1577257222000
                                 */
                                time: number;
                            }[];
                            /**
                             * Format: int64
                             * @example 2
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/locked/history/rewardsRecord": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Locked Rewards History (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    positionId?: string;
                    asset?: string;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Locked Rewards History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example 123123 */
                                positionId: string;
                                /**
                                 * Format: int64
                                 * @example 1577257222000
                                 */
                                time: number;
                                /** @example BNB */
                                asset: string;
                                /** @example 30 */
                                lockPeriod: string;
                                /** @example 21312.23223 */
                                amount: string;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/flexible/setAutoSubscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Flexible Auto Subscribe (USER_DATA)
         * @description Weight(IP): 150
         */
        post: {
            parameters: {
                query: {
                    productId: string;
                    /** @description true or false */
                    autoSubscribe: boolean;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Flexible Product Subscription Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/locked/setAutoSubscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Locked Auto Subscribe (USER_DATA)
         * @description Weight(IP): 150
         */
        post: {
            parameters: {
                query: {
                    positionId: string;
                    /** @description true or false */
                    autoSubscribe: boolean;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Locked Auto Subscribe */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/flexible/personalLeftQuota": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Flexible Personal Left Quota (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    productId: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Flexible Personal Left Quota */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1000 */
                            leftPersonalQuota: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/locked/personalLeftQuota": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Locked Personal Left Quota (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    projectId: string;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Locked Personal Left Quota */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1000 */
                            leftPersonalQuota: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/flexible/subscriptionPreview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Flexible Subscription Preview (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    productId: string;
                    amount: number;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Flexible Subscription Preview */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 1232.32230982 */
                            totalAmount: string;
                            /** @example BUSD */
                            rewardAsset: string;
                            /** @example BETH */
                            airDropAsset: string;
                            /** @example 0.22759183 */
                            estDailyBonusRewards: string;
                            /** @example 0.22759183 */
                            estDailyRealTimeRewards: string;
                            /** @example 0.22759183 */
                            estDailyAirdropRewards: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/locked/subscriptionPreview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Locked Subscription Preview (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    projectId: string;
                    amount: number;
                    /** @description true or false, default true. */
                    autoSubscribe?: boolean;
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Locked Product Subscription Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example AXS */
                            rewardAsset: string;
                            /** @example 5.17181528 */
                            totalRewardAmt: string;
                            /** @example BNB */
                            extraRewardAsset: string;
                            /** @example 5.17181528 */
                            estTotalExtraRewardAmt: string;
                            /** @example 1.29295383 */
                            nextPay: string;
                            /** @example 1646697600000 */
                            nextPayDate: string;
                            /** @example 1646697600000 */
                            valueDate: string;
                            /** @example 1651449600000 */
                            rewardsEndDate: string;
                            /** @example 1651536000000 */
                            deliverDate: string;
                            /** @example 1651536000000 */
                            nextSubscriptionDate: string;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/locked/setRedeemOption": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Set Locked Product Redeem Option(USER_DATA)
         * @description Set redeem option for Locked product
         *
         *     Weight(IP): 50
         */
        get: {
            parameters: {
                query: {
                    positionId: string;
                    /** @description SPOT,FLEXIBLE, default FLEXIBLE */
                    redeemTo?: "SPOT" | "FLEXIBLE";
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Locked Product Redeem Option */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/flexible/history/rateHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Rate History (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    productId: string;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Rate History */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example BUSD001 */
                                productId: string;
                                /** @example BUSD */
                                asset: string;
                                /** @example 0.00006408 */
                                annualPercentageRate: string;
                                /**
                                 * Format: int64
                                 * @example 1577233578000
                                 */
                                time: number;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/simple-earn/flexible/history/collateralRecord": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Collateral Record (USER_DATA)
         * @description Weight(IP): 150
         */
        get: {
            parameters: {
                query: {
                    productId?: string;
                    /** @description UTC timestamp in ms */
                    startTime?: components["parameters"]["startTime"];
                    /** @description UTC timestamp in ms */
                    endTime?: components["parameters"]["endTime"];
                    /** @description Current querying page. Start from 1. Default:1 */
                    current?: components["parameters"]["current"];
                    /** @description Default:10 Max:100 */
                    size?: components["parameters"]["size"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Collateral Record */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rows: {
                                /** @example 100.00000000 */
                                amount: string;
                                /** @example BUSD001 */
                                productId: string;
                                /** @example USDT */
                                asset: string;
                                /**
                                 * Format: int64
                                 * @example 1575018510000
                                 */
                                createTime: number;
                                /** @example REPAY */
                                type: string;
                                /** @example USDT */
                                productName: string;
                                /**
                                 * Format: int64
                                 * @example 26055
                                 */
                                orderId: number;
                            }[];
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/dci/product/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dual Investment product list(USER_DATA)
         * @description Get Dual Investment product list
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description Input CALL or PUT */
                    optionType: "CALL" | "PUT";
                    /** @description Target exercised asset, e.g.:
                     *     if you subscribe to a high sell product (call option), you should input:
                     *       - optionType: CALL,
                     *       - exercisedCoin: USDT,
                     *       - investCoin: BNB;
                     *
                     *     if you subscribe to a low buy product (put option), you should input:
                     *       - optionType: PUT,
                     *       - exercisedCoin: BNB,
                     *       - investCoin: USDT; */
                    exercisedCoin: string;
                    /** @description Asset used for subscribing, e.g.:
                     *     if you subscribe to a high sell product (call option), you should input:
                     *       - optionType: CALL,
                     *       - exercisedCoin: USDT,
                     *       - investCoin: BNB;
                     *
                     *     if you subscribe to a low buy product (put option), you should input:
                     *       - optionType: PUT,
                     *       - exercisedCoin: BNB,
                     *       - investCoin: USDT; */
                    investCoin: string;
                    /** @description MIN 1, MAX 100; Default 100 */
                    pageSize?: components["parameters"]["smallPageSize"];
                    /** @description Page number, default is first page, start form 1 */
                    pageIndex?: components["parameters"]["pageIndex"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dual Investment product list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                            list: {
                                /** @example 741590 */
                                id: string;
                                /** @example USDT */
                                investCoin: string;
                                /** @example BNB */
                                exercisedCoin: string;
                                /** @example 380 */
                                strikePrice: string;
                                /**
                                 * Format: int32
                                 * @example 4
                                 */
                                duration: number;
                                /**
                                 * Format: int64
                                 * @example 1709020800000
                                 */
                                settleDate: number;
                                /**
                                 * Format: int32
                                 * @example 8
                                 */
                                purchaseDecimal: number;
                                /**
                                 * Format: int64
                                 * @example 1708934400000
                                 */
                                purchaseEndTime: number;
                                /** @example true */
                                canPurchase: boolean;
                                /** @example 0.6076 */
                                apr: string;
                                /**
                                 * Format: int64
                                 * @example 8257205859
                                 */
                                orderId: number;
                                /** @example 0.1 */
                                minAmount: string;
                                /** @example 25265.7 */
                                maxAmount: string;
                                /**
                                 * Format: int64
                                 * @example 1708560084000
                                 */
                                createTimestamp: number;
                                /** @example PUT */
                                optionType: string;
                                /** @example true */
                                isAutoCompoundEnable: boolean;
                                /** @example [
                                 *       "STANDARD",
                                 *       "ADVANCE"
                                 *     ] */
                                autoCompoundPlanList: string[];
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/dci/product/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Subscribe Dual Investment products(USER_DATA)
         * @description Subscribe Dual Investment products
         *
         *     - `Products are not available.` means that the APR changes to lower value, or the orders are not available.
         *     - `Failed` is a system or network errors.
         *
         *     Weight(IP): 1
         */
        post: {
            parameters: {
                query: {
                    /** @description get id from /sapi/v1/dci/product/list */
                    id: string;
                    /** @description get orderId from /sapi/v1/dci/product/list */
                    orderId: string;
                    depositAmount: number;
                    /** @description NONE: switch off the plan,
                     *     STANDARD: standard plan,
                     *     ADVANCED: advanced plan; */
                    autoCompoundPlan: components["parameters"]["autoCompoundPlan"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dual Investment product subscription response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 10208824
                             */
                            positionId: number;
                            /** @example BNB */
                            investCoin: string;
                            /** @example USDT */
                            exercisedCoin: string;
                            /** @example 0.002 */
                            subscriptionAmount: string;
                            /**
                             * Format: int32
                             * @example 4
                             */
                            duration: number;
                            /**
                             * @description STANDARD, ADVANCED, this field won't display when autocompound is set to None
                             * @example STANDARD
                             */
                            autoCompoundPlan: string;
                            /** @example 380 */
                            strikePrice: string;
                            /**
                             * Format: int64
                             * @example 1709020800000
                             */
                            settleDate: number;
                            /** @example PURCHASE_SUCCESS */
                            purchaseStatus: string;
                            /** @example 0.7397 */
                            apr: string;
                            /**
                             * Format: int64
                             * @example 8259117597
                             */
                            orderId: number;
                            /**
                             * Format: int64
                             * @example 1708677583874
                             */
                            purchaseTime: number;
                            /** @example CALL */
                            "optionType\""?: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/dci/product/positions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dual Investment positions(USER_DATA)
         * @description Get Dual Investment positions (batch)
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description - PENDING: Products are purchasing, will give results later;
                     *     - PURCHASE_SUCCESS: purchase successfully;
                     *     - SETTLED: Products are finish settling;
                     *     - PURCHASE_FAIL: fail to purchase;
                     *     - REFUNDING: refund ongoing;
                     *     - REFUND_SUCCESS: refund to spot account successfully;
                     *     - SETTLING: Products are settling.
                     *     If don't fill this field, will response all the position status. */
                    status?: "PENDING" | "PURCHASE_SUCCESS" | "SETTLED" | "PURCHASE_FAIL" | "REFUNDING" | "REFUND_SUCCESS" | "SETTLING";
                    /** @description MIN 1, MAX 100; Default 100 */
                    pageSize?: components["parameters"]["smallPageSize"];
                    /** @description Page number, default is first page, start form 1 */
                    pageIndex?: components["parameters"]["pageIndex"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dual Investment product list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: int64
                             * @example 1
                             */
                            total: number;
                            list: {
                                /** @example 741590 */
                                id: string;
                                /** @example USDT */
                                investCoin: string;
                                /** @example BNB */
                                exercisedCoin: string;
                                /** @example 0.5 */
                                subscriptionAmount: string;
                                /** @example 380 */
                                strikePrice: string;
                                /**
                                 * Format: int32
                                 * @example 4
                                 */
                                duration: number;
                                /**
                                 * Format: int64
                                 * @example 1709020800000
                                 */
                                settleDate: number;
                                /** @example PURCHASE_SUCCESS */
                                purchaseStatus: string;
                                /** @example 0.0365 */
                                apr: string;
                                /**
                                 * Format: int64
                                 * @example 7973677530
                                 */
                                orderId: number;
                                /**
                                 * Format: int64
                                 * @example 1708329600000
                                 */
                                purchaseEndTime: number;
                                /** @example PUT */
                                optionType: string;
                                /** @example STANDARD */
                                autoCompoundPlan: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/dci/product/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Dual Investment accounts(USER_DATA)
         * @description Check Dual Investment accounts
         *
         *     Weight(IP): 1
         */
        get: {
            parameters: {
                query: {
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dual Investment accounts */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Total BTC amounts in Dual Investment
                             * @example 0.01067982
                             */
                            totalAmountInBTC: string;
                            /**
                             * @description Total USDT equivalents in BTC in Dual Investment
                             * @example 77.13289230
                             */
                            totalAmountInUSDT: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sapi/v1/dci/product/auto_compound/edit-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Auto-Compound status(USER_DATA)
         * @description Change Auto-Compound status
         *
         *     - 15:31 ~ 16:00 UTC+8 This function is disabled
         *
         *     Weight(IP): 1
         *
         *     Rate Limit: Maximum 1 time/s per account
         */
        post: {
            parameters: {
                query: {
                    /** @description Get positionId from /sapi/v1/dci/product/positions */
                    positionId: number;
                    /** @description NONE: switch off the plan,
                     *     STANDARD: standard plan,
                     *     ADVANCED: advanced plan; */
                    autoCompoundPlan: components["parameters"]["autoCompoundPlan"];
                    /** @description The value cannot be greater than 60000 */
                    recvWindow?: components["parameters"]["recvWindow"];
                    /** @description UTC timestamp in ms */
                    timestamp: components["parameters"]["timestamp"];
                    /** @description Signature */
                    signature: components["parameters"]["signature"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Change Auto-Compound status response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 123456789 */
                            positionId: string;
                            /**
                             * @description NONE, STANDARD, ADVANCED
                             * @example ADVANCED
                             */
                            autoCompoundPlan: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
                /** @description Unauthorized Request */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        account: {
            /**
             * Format: int64
             * @example 15
             */
            makerCommission: number;
            /**
             * Format: int64
             * @example 15
             */
            takerCommission: number;
            /**
             * Format: int64
             * @example 0
             */
            buyerCommission: number;
            /**
             * Format: int64
             * @example 0
             */
            sellerCommission: number;
            commissionRates: {
                /** @example 0.00150000 */
                maker: string;
                /** @example 0.00150000 */
                taker: string;
                /** @example 0.00000000 */
                buyer: string;
                /** @example 0.00000000 */
                seller: string;
            };
            canTrade: boolean;
            canWithdraw: boolean;
            canDeposit: boolean;
            /** @example false */
            brokered: boolean;
            /** @example false */
            requireSelfTradePrevention: boolean;
            /** @example false */
            preventSor: boolean;
            /**
             * Format: int64
             * @example 123456789
             */
            updateTime: number;
            /** @example SPOT */
            accountType: string;
            balances: {
                /** @example BTC */
                asset: string;
                /** @example 4723846.89208129 */
                free: string;
                /** @example 0.00000000 */
                locked: string;
            }[];
            permissions: string[];
            /**
             * Format: int64
             * @example 354937868
             */
            uid: number;
        };
        order: {
            /** @example BNBBTC */
            symbol: string;
            /** @example msXkySR3u5uYwpvRMFsi3u */
            origClientOrderId: string;
            /**
             * Format: int64
             * @example 28
             */
            orderId: number;
            /**
             * Format: int64
             * @description Unless OCO, value will be -1
             * @example -1
             */
            orderListId: number;
            /** @example 6gCrw2kRUAF9CvJDGP16IP */
            clientOrderId: string;
            /**
             * Format: int64
             * @example 1507725176595
             */
            transactTime: number;
            /** @example 1.00000000 */
            price: string;
            /** @example 10.00000000 */
            origQty: string;
            /** @example 10.00000000 */
            executedQty: string;
            /** @example 10.00000000 */
            cummulativeQuoteQty: string;
            /** @example FILLED */
            status: string;
            /** @example GTC */
            timeInForce: string;
            /** @example LIMIT */
            type: string;
            /** @example SELL */
            side: string;
            /** @example NONE */
            selfTradePreventionMode: string;
        };
        ocoOrder: {
            /**
             * Format: int64
             * @example 1929
             */
            orderListId: number;
            /** @example OCO */
            contingencyType: string;
            /** @example ALL_DONE */
            listStatusType: string;
            /** @example ALL_DONE */
            listOrderStatus: string;
            /** @example C3wyj4WVEktd7u9aVBRXcN */
            listClientOrderId: string;
            /**
             * Format: int64
             * @example 1574040868128
             */
            transactionTime: number;
            /** @example BNBBTC */
            symbol: string;
            /** @example [
             *       {
             *         "symbol": "BNBBTC",
             *         "orderId": 2,
             *         "clientOrderId": "pO9ufTiFGg3nw2fOdgeOXa"
             *       },
             *       {
             *         "symbol": "BNBBTC",
             *         "orderId": 3,
             *         "clientOrderId": "TXOvglzXuaubXAaENpaRCB"
             *       }
             *     ] */
            orders: {
                symbol: string;
                /** Format: int64 */
                orderId: number;
                clientOrderId: string;
            }[];
            /** @example [
             *       {
             *         "symbol": "BNBBTC",
             *         "origClientOrderId": "pO9ufTiFGg3nw2fOdgeOXa",
             *         "orderId": 2,
             *         "orderListId": 0,
             *         "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
             *         "price": "1.00000000",
             *         "origQty": "10.00000000",
             *         "executedQty": "0.00000000",
             *         "cummulativeQuoteQty": "0.00000000",
             *         "status": "CANCELED",
             *         "timeInForce": "GTC",
             *         "type": "STOP_LOSS_LIMIT",
             *         "side": "SELL",
             *         "stopPrice": "1.00000000",
             *         "transactTime": 1688005070874
             *       },
             *       {
             *         "symbol": "BNBBTC",
             *         "origClientOrderId": "TXOvglzXuaubXAaENpaRCB",
             *         "orderId": 3,
             *         "orderListId": 0,
             *         "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
             *         "price": "3.00000000",
             *         "origQty": "10.00000000",
             *         "executedQty": "0.00000000",
             *         "cummulativeQuoteQty": "0.00000000",
             *         "status": "CANCELED",
             *         "timeInForce": "GTC",
             *         "type": "LIMIT_MAKER",
             *         "side": "SELL",
             *         "selfTradePreventionMode": "NONE",
             *         "transactTime": 1688005070874
             *       }
             *     ] */
            orderReports: {
                symbol: string;
                origClientOrderId: string;
                /** Format: int64 */
                orderId: number;
                /** Format: int64 */
                orderListId: number;
                clientOrderId: string;
                price: string;
                origQty: string;
                executedQty: string;
                cummulativeQuoteQty: string;
                status: string;
                timeInForce: string;
                type: string;
                side: string;
                stopPrice: string;
                selfTradePreventionMode: string;
                /** Format: int64 */
                transactTime: number;
            }[];
        };
        marginOcoOrder: {
            /**
             * Format: int64
             * @example 0
             */
            orderListId: number;
            /** @example OCO */
            contingencyType: string;
            /** @example ALL_DONE */
            listStatusType: string;
            /** @example ALL_DONE */
            listOrderStatus: string;
            /** @example C3wyj4WVEktd7u9aVBRXcN */
            listClientOrderId: string;
            /**
             * Format: int64
             * @example 1574040868128
             */
            transactionTime: number;
            /** @example BNBUSDT */
            symbol: string;
            /** @example false */
            isIsolated: boolean;
            orders: {
                symbol: string;
                /** Format: int64 */
                orderId: number;
                clientOrderId: string;
            }[];
            orderReports: {
                symbol: string;
                origClientOrderId: string;
                /** Format: int64 */
                orderId: number;
                /** Format: int64 */
                orderListId: number;
                clientOrderId: string;
                price: string;
                origQty: string;
                executedQty: string;
                cummulativeQuoteQty: string;
                status: string;
                timeInForce: string;
                type: string;
                side: string;
                stopPrice: string;
            }[];
        };
        orderDetails: {
            /** @example LTCBTC */
            symbol: string;
            /**
             * Format: int64
             * @example 1
             */
            orderId: number;
            /**
             * Format: int64
             * @description Unless OCO, value will be -1
             * @example -1
             */
            orderListId: number;
            /** @example myOrder1 */
            clientOrderId: string;
            /** @example 0.1 */
            price: string;
            /** @example 1.0 */
            origQty: string;
            /** @example 0.0 */
            executedQty: string;
            /** @example 0.0 */
            cummulativeQuoteQty: string;
            /** @example NEW */
            status: string;
            /** @example GTC */
            timeInForce: string;
            /** @example LIMIT */
            type: string;
            /** @example BUY */
            side: string;
            /** @example 0.0 */
            stopPrice: string;
            /** @example 0.0 */
            icebergQty: string;
            /**
             * Format: int64
             * @example 1499827319559
             */
            time: number;
            /**
             * Format: int64
             * @example 1499827319559
             */
            updateTime: number;
            isWorking: boolean;
            /**
             * Format: int64
             * @example 1499827319559
             */
            workingTime: number;
            /** @example 0.00000000 */
            origQuoteOrderQty: string;
            /** @example NONE */
            selfTradePreventionMode: string;
            /** @example 0 */
            preventedMatchId?: number;
            /** @example 1.200000 */
            preventedQuantity?: string;
        };
        orderResponseAck: {
            /** @example BTCUSDT */
            symbol: string;
            /**
             * Format: int64
             * @example 28
             */
            orderId: number;
            /**
             * Format: int64
             * @example -1
             */
            orderListId: number;
            /** @example 6gCrw2kRUAF9CvJDGP16IP */
            clientOrderId: string;
            /**
             * Format: int64
             * @example 1507725176595
             */
            transactTime: number;
        };
        orderResponseResult: {
            /** @example BTCUSDT */
            symbol: string;
            /**
             * Format: int64
             * @example 28
             */
            orderId: number;
            /**
             * Format: int64
             * @example -1
             */
            orderListId: number;
            /** @example 6gCrw2kRUAF9CvJDGP16IP */
            clientOrderId: string;
            /**
             * Format: int64
             * @example 1507725176595
             */
            transactTime: number;
            /** @example 0.00000000 */
            price: string;
            /** @example 10.00000000 */
            origQty: string;
            /** @example 10.00000000 */
            executedQty: string;
            /** @example 10.00000000 */
            cummulativeQuoteQty: string;
            /** @example FILLED */
            status: string;
            /** @example GTC */
            timeInForce: string;
            /** @example MARKET */
            type: string;
            /** @example SELL */
            side: string;
            /**
             * Format: int64
             * @example 1
             */
            strategyId?: number;
            /**
             * Format: int64
             * @example 1000000
             */
            strategyType?: number;
            /**
             * Format: int64
             * @example 1507725176595
             */
            workingTime: number;
            /** @example NONE */
            selfTradePreventionMode: string;
        };
        orderResponseFull: {
            /** @example BTCUSDT */
            symbol: string;
            /**
             * Format: int64
             * @example 28
             */
            orderId: number;
            /**
             * Format: int64
             * @example -1
             */
            orderListId: number;
            /** @example 6gCrw2kRUAF9CvJDGP16IP */
            clientOrderId: string;
            /**
             * Format: int64
             * @example 1507725176595
             */
            transactTime: number;
            /** @example 0.00000000 */
            price: string;
            /** @example 10.00000000 */
            origQty: string;
            /** @example 10.00000000 */
            executedQty: string;
            /** @example 10.00000000 */
            cummulativeQuoteQty: string;
            /** @example FILLED */
            status: string;
            /** @example GTC */
            timeInForce: string;
            /** @example MARKET */
            type: string;
            /** @example SELL */
            side: string;
            /**
             * Format: int64
             * @example 1
             */
            strategyId?: number;
            /**
             * Format: int64
             * @example 1000000
             */
            strategyType?: number;
            /**
             * Format: int64
             * @example 1507725176595
             */
            workingTime: number;
            /** @example NONE */
            selfTradePreventionMode: string;
            fills: {
                /** @example 4000.00000000 */
                price: string;
                /** @example 1.00000000 */
                qty: string;
                /** @example 4.00000000 */
                commission: string;
                /** @example USDT */
                commissionAsset: string;
            }[];
        };
        marginOrder: {
            /** @example LTCBTC */
            symbol: string;
            /**
             * Format: int64
             * @example 28
             */
            orderId: number;
            /** @example msXkySR3u5uYwpvRMFsi3u */
            origClientOrderId: string;
            /** @example 6gCrw2kRUAF9CvJDGP16IP */
            clientOrderId: string;
            /** @example 1.00000000 */
            price: string;
            /** @example 10.00000000 */
            origQty: string;
            /** @example 8.00000000 */
            executedQty: string;
            /** @example 8.00000000 */
            cummulativeQuoteQty: string;
            /** @example CANCELED */
            status: string;
            /** @example GTC */
            timeInForce: string;
            /** @example LIMIT */
            type: string;
            /** @example SELL */
            side: string;
        };
        marginOrderDetail: {
            /** @example ZwfQzuDIGpceVhKW5DvCmO */
            clientOrderId: string;
            /** @example 0.00000000 */
            cummulativeQuoteQty: string;
            /** @example 0.00000000 */
            executedQty: string;
            /** @example 0.00000000 */
            icebergQty: string;
            isWorking: boolean;
            /**
             * Format: int64
             * @example 213205622
             */
            orderId: number;
            /** @example 0.30000000 */
            origQty: string;
            /** @example 0.00493630 */
            price: string;
            /** @example SELL */
            side: string;
            /** @example NEW */
            status: string;
            /** @example 0.00000000 */
            stopPrice: string;
            /** @example BNBBTC */
            symbol: string;
            isIsolated: boolean;
            /**
             * Format: int64
             * @example 1562133008725
             */
            time: number;
            /** @example GTC */
            timeInForce: string;
            /** @example LIMIT */
            type: string;
            /**
             * Format: int64
             * @example 1562133008725
             */
            updateTime: number;
            /** @example NONE */
            selfTradePreventionMode: string;
        };
        canceledMarginOrderDetail: {
            /** @example BNBUSDT */
            symbol: string;
            isIsolated: boolean;
            /** @example E6APeyTJvkMvLMYMqu1KQ4 */
            origClientOrderId: string;
            /**
             * Format: int64
             * @example 11
             */
            orderId: number;
            /**
             * Format: int64
             * @example -1
             */
            orderListId: number;
            /** @example pXLV6Hz6mprAcVYpVMTGgx */
            clientOrderId: string;
            /** @example 0.089853 */
            price: string;
            /** @example 0.178622 */
            origQty: string;
            /** @example 0.000000 */
            executedQty: string;
            /** @example 0.000000 */
            cummulativeQuoteQty: string;
            /** @example CANCELED */
            status: string;
            /** @example GTC */
            timeInForce: string;
            /** @example LIMIT */
            type: string;
            /** @example BUY */
            side: string;
        };
        marginOrderResponseAck: {
            /** @example BTCUSDT */
            symbol: string;
            /**
             * Format: int64
             * @example 28
             */
            orderId: number;
            /** @example 6gCrw2kRUAF9CvJDGP16IP */
            clientOrderId: string;
            isIsolated: boolean;
            /**
             * Format: int64
             * @example 1507725176595
             */
            transactTime: number;
        };
        marginOrderResponseResult: {
            /** @example BTCUSDT */
            symbol: string;
            /**
             * Format: int64
             * @example 28
             */
            orderId: number;
            /** @example 6gCrw2kRUAF9CvJDGP16IP */
            clientOrderId: string;
            /**
             * Format: int64
             * @example 1507725176595
             */
            transactTime: number;
            /** @example 1.00000000 */
            price: string;
            /** @example 10.00000000 */
            origQty: string;
            /** @example 10.00000000 */
            executedQty: string;
            /** @example 10.00000000 */
            cummulativeQuoteQty: string;
            /** @example FILLED */
            status: string;
            /** @example GTC */
            timeInForce: string;
            /** @example MARKET */
            type: string;
            isIsolated: boolean;
            /** @example SELL */
            side: string;
        };
        marginOrderResponseFull: {
            /** @example BTCUSDT */
            symbol: string;
            /**
             * Format: int64
             * @example 28
             */
            orderId: number;
            /** @example 6gCrw2kRUAF9CvJDGP16IP */
            clientOrderId: string;
            /**
             * Format: int64
             * @example 1507725176595
             */
            transactTime: number;
            /** @example 1.00000000 */
            price: string;
            /** @example 10.00000000 */
            origQty: string;
            /** @example 10.00000000 */
            executedQty: string;
            /** @example 10.00000000 */
            cummulativeQuoteQty: string;
            /** @example FILLED */
            status: string;
            /** @example GTC */
            timeInForce: string;
            /** @example MARKET */
            type: string;
            /** @example SELL */
            side: string;
            /**
             * Format: double
             * @description will not return if no margin trade happens
             * @example 5
             */
            marginBuyBorrowAmount: number;
            /**
             * @description will not return if no margin trade happens
             * @example BTC
             */
            marginBuyBorrowAsset: string;
            isIsolated: boolean;
            fills: {
                /** @example 4000.00000000 */
                price: string;
                /** @example 1.00000000 */
                qty: string;
                /** @example 4.00000000 */
                commission: string;
                /** @example USDT */
                commissionAsset: string;
            }[];
        };
        marginTrade: {
            /** @example 0.00006000 */
            commission: string;
            /** @example BTC */
            commissionAsset: string;
            /**
             * Format: int64
             * @example 28
             */
            id: number;
            isBestMatch: boolean;
            isBuyer: boolean;
            isMaker: boolean;
            /**
             * Format: int64
             * @example 28
             */
            orderId: number;
            /** @example 0.02000000 */
            price: string;
            /** @example 1.02000000 */
            qty: string;
            /** @example BNBBTC */
            symbol: string;
            /** @example false */
            isIsolated: boolean;
            /**
             * Format: int64
             * @example 1507725176595
             */
            time: number;
        };
        marginTransferDetails: {
            rows: {
                /** @example 0.10000000 */
                amount: string;
                /** @example BNB */
                asset: string;
                /** @example CONFIRMED */
                status: string;
                /**
                 * Format: int64
                 * @example 1566898617000
                 */
                timestamp: number;
                /**
                 * Format: int64
                 * @example 5240372201
                 */
                txId: number;
                /** @example ROLL_IN */
                type?: string;
                /** @example SPOT */
                transFrom: string;
                /** @example ISOLATED_MARGIN */
                transTo: string;
            }[];
            /**
             * Format: int32
             * @example 1
             */
            total: number;
        };
        isolatedMarginAccountInfo: {
            assets: {
                baseAsset: {
                    /** @example BTC */
                    asset: string;
                    borrowEnabled: boolean;
                    /** @example 0.00000000 */
                    borrowed: string;
                    /** @example 0.00000000 */
                    free: string;
                    /** @example 0.00000000 */
                    interest: string;
                    /** @example 0.00000000 */
                    locked: string;
                    /** @example 0.00000000 */
                    netAsset: string;
                    /** @example 0.00000000 */
                    netAssetOfBtc: string;
                    repayEnabled: boolean;
                    /** @example 0.00000000 */
                    totalAsset: string;
                };
                quoteAsset: {
                    /** @example USDT */
                    asset: string;
                    borrowEnabled: boolean;
                    /** @example 0.00000000 */
                    borrowed: string;
                    /** @example 0.00000000 */
                    free: string;
                    /** @example 0.00000000 */
                    interest: string;
                    /** @example 0.00000000 */
                    locked: string;
                    /** @example 0.00000000 */
                    netAsset: string;
                    /** @example 0.00000000 */
                    netAssetOfBtc: string;
                    repayEnabled: boolean;
                    /** @example 0.00000000 */
                    totalAsset: string;
                };
                /** @example BTCUSDT */
                symbol: string;
                isolatedCreated: boolean;
                /** @description true-enabled, false-disabled */
                enabled: boolean;
                /** @example 0.00000000 */
                marginLevel: string;
                /**
                 * @description "EXCESSIVE", "NORMAL", "MARGIN_CALL", "PRE_LIQUIDATION", "FORCE_LIQUIDATION"
                 * @example EXCESSIVE
                 */
                marginLevelStatus: string;
                /** @example 0.00000000 */
                marginRatio: string;
                /** @example 10000.00000000 */
                indexPrice: string;
                /** @example 1000.00000000 */
                liquidatePrice: string;
                /** @example 1.00000000 */
                liquidateRate: string;
                tradeEnabled: boolean;
            }[];
            /** @example 0.00000000 */
            totalAssetOfBtc: string;
            /** @example 0.00000000 */
            totalLiabilityOfBtc: string;
            /** @example 0.00000000 */
            totalNetAssetOfBtc: string;
        };
        bookTickerList: components["schemas"]["bookTicker"][];
        bookTicker: {
            /** @example BNBBTC */
            symbol: string;
            /** @example 16.36240000 */
            bidPrice: string;
            /** @example 256.78000000 */
            bidQty: string;
            /** @example 16.36450000 */
            askPrice: string;
            /** @example 12.56000000 */
            askQty: string;
        };
        priceTickerList: components["schemas"]["priceTicker"][];
        priceTicker: {
            /** @example BNBBTC */
            symbol: string;
            /** @example 0.17160000 */
            price: string;
        };
        repaymentInfo: {
            /** @example BUSD */
            loanCoin: string;
            /** @example 100.5 */
            remainingPrincipal: string;
            /** @example 0 */
            remainingInterest: string;
            /** @example BNB */
            collateralCoin: string;
            /** @example 5.253 */
            remainingCollateral: string;
            /** @example 0.25 */
            currentLTV: string;
            /** @example Repaying */
            repayStatus: string;
        };
        repaymentInfo2: {
            /** @example BUSD */
            loanCoin: string;
            /** @example BNB */
            collateralCoin: string;
            /** @example Repaying */
            repayStatus: string;
        };
        tickerList: components["schemas"]["ticker"][];
        ticker: {
            /** @example BNBBTC */
            symbol: string;
            /** @example 0.17160000 */
            priceChange: string;
            /** @example 1.060 */
            priceChangePercent: string;
            /** @example 16.35920000 */
            prevClosePrice: string;
            /** @example 27.84000000 */
            lastPrice: string;
            /** @example 16.34488284 */
            bidPrice: string;
            /** @example 16.34488284 */
            bidQty: string;
            /** @example 16.35920000 */
            askPrice: string;
            /** @example 25.06000000 */
            askQty: string;
            /** @example 16.18760000 */
            openPrice: string;
            /** @example 16.55000000 */
            highPrice: string;
            /** @example 16.16940000 */
            lowPrice: string;
            /** @example 1678279.95000000 */
            volume: string;
            /** @example 27431289.14792300 */
            quoteVolume: string;
            /**
             * Format: int64
             * @example 1592808788637
             */
            openTime: number;
            /**
             * Format: int64
             * @example 1592895188637
             */
            closeTime: number;
            /**
             * Format: int64
             * @example 62683296
             */
            firstId: number;
            /**
             * Format: int64
             * @example 62739253
             */
            lastId: number;
            /**
             * Format: int64
             * @example 55958
             */
            count: number;
        };
        dayTickerList: components["schemas"]["dayTicker"][];
        dayTicker: {
            /** @example BTCUSDT */
            symbol: string;
            /**
             * @description Absolute price change
             * @example -83.13000000
             */
            priceChange: string;
            /**
             * @description Relative price change in percent
             * @example -0.317
             */
            priceChangePercent: string;
            /**
             * @description quoteVolume / volume
             * @example 26234.58803036
             */
            weightedAvgPrice: string;
            /** @example 26304.80000000 */
            openPrice: string;
            /** @example 26397.46000000 */
            highPrice: string;
            /** @example 26088.34000000 */
            lowPrice: string;
            /** @example 26221.67000000 */
            lastPrice: string;
            /**
             * @description Volume in base asset
             * @example 18495.35066000
             */
            volume: string;
            /**
             * @description Volume in quote asset
             * @example 485217905.04210480
             */
            quoteVolume: string;
            /**
             * Format: int64
             * @example 1695686400000
             */
            openTime: number;
            /**
             * Format: int64
             * @example 1695772799999
             */
            closeTime: number;
            /**
             * Format: int64
             * @description Trade ID of the first trade in the interval
             * @example 3220151555
             */
            firstId: number;
            /**
             * Format: int64
             * @description Trade ID of the last trade in the interval
             * @example 3220849281
             */
            lastId: number;
            /**
             * Format: int64
             * @description Number of trades in the interval
             * @example 697727
             */
            count: number;
        };
        myTrade: {
            /** @example BNBBTC */
            symbol: string;
            /**
             * Format: int64
             * @description Trade id
             * @example 28457
             */
            id: number;
            /**
             * Format: int64
             * @example 100234
             */
            orderId: number;
            /**
             * Format: int64
             * @example -1
             */
            orderListId: number;
            /**
             * @description Price
             * @example 4.00000100
             */
            price: string;
            /**
             * @description Amount of base asset
             * @example 12.00000000
             */
            qty: string;
            /**
             * @description Amount of quote asset
             * @example 48.000012
             */
            quoteQty: string;
            /** @example 10.10000000 */
            commission: string;
            /** @example BNB */
            commissionAsset: string;
            /**
             * Format: int64
             * @description Trade timestamp
             * @example 1499865549590
             */
            time: number;
            /** @example false */
            isBuyer: boolean;
            /** @example false */
            isMaker: boolean;
            isBestMatch: boolean;
        };
        transaction: {
            /**
             * Format: int64
             * @description transaction id
             * @example 345196462
             */
            tranId: number;
        };
        trade: {
            /**
             * Format: int64
             * @description trade id
             * @example 345196462
             */
            id: number;
            /**
             * @description price
             * @example 9638.99000000
             */
            price: string;
            /**
             * @description amount of base asset
             * @example 0.02077200
             */
            qty: string;
            /**
             * @description amount of quote asset
             * @example 0.02077200
             */
            quoteQty: string;
            /**
             * Format: int64
             * @description Trade executed timestamp, as same as `T` in the stream
             * @example 1592887772684
             */
            time: number;
            isBuyerMaker: boolean;
            isBestMatch: boolean;
        };
        aggTrade: {
            /**
             * Format: int64
             * @description Aggregate tradeId
             * @example 26129
             */
            a: number;
            /**
             * @description Price
             * @example 0.01633102
             */
            p: string;
            /**
             * @description Quantity
             * @example 4.70443515
             */
            q: string;
            /**
             * Format: int64
             * @description First tradeId
             * @example 27781
             */
            f: number;
            /**
             * Format: int64
             * @description Last tradeId
             * @example 27781
             */
            l: number;
            /**
             * @description Timestamp
             * @example 1498793709153
             */
            T: boolean;
            /** @description Was the buyer the maker? */
            m: boolean;
            /** @description Was the trade the best price match? */
            M: boolean;
        };
        bnbBurnStatus: {
            spotBNBBurn: boolean;
            /** @example false */
            interestBNBBurn: boolean;
        };
        snapshotSpot: {
            /**
             * Format: int64
             * @example 200
             */
            code: number;
            /** @example  */
            msg: string;
            snapshotVos: {
                data: {
                    balances: {
                        /** @example BTC */
                        asset: string;
                        /** @example 0.2 */
                        free: string;
                        /** @example 0.001 */
                        locked: string;
                    }[];
                    /** @example 0.09905021 */
                    totalAssetOfBtc: string;
                };
                /** @example spot */
                type: string;
                /**
                 * Format: int64
                 * @example 1576281599000
                 */
                updateTime: number;
            }[];
        };
        snapshotMargin: {
            /**
             * Format: int64
             * @example 200
             */
            code: number;
            /** @example  */
            msg: string;
            snapshotVos: {
                data: {
                    /** @example 2748.02909813 */
                    marginLevel: string;
                    /** @example 0.00274803 */
                    totalAssetOfBtc: string;
                    /** @example 0.00000100 */
                    totalLiabilityOfBtc: string;
                    /** @example 0.00274750 */
                    totalNetAssetOfBtc: string;
                    userAssets: {
                        /** @example XRP */
                        asset: string;
                        /** @example 0.00000000 */
                        borrowed: string;
                        /** @example 1.00000000 */
                        free: string;
                        /** @example 0.00000000 */
                        interest: string;
                        /** @example 0.00000000 */
                        locked: string;
                        /** @example 1.00000000 */
                        netAsset: string;
                    }[];
                };
                /** @example margin */
                type: string;
                /**
                 * Format: int64
                 * @example 1576281599000
                 */
                updateTime: number;
            }[];
        };
        snapshotFutures: {
            /**
             * Format: int64
             * @example 200
             */
            code: number;
            /** @example  */
            msg: string;
            snapshotVos: {
                data: {
                    assets: {
                        /** @example USDT */
                        asset: string;
                        /** @example 118.99782335 */
                        marginBalance: string;
                        /** @example 120.23811389 */
                        walletBalance: string;
                    }[];
                    position: {
                        /** @example 7130.41000000 */
                        entryPrice: string;
                        /** @example 7257.66239673 */
                        markPrice: string;
                        /** @example 0.01000000 */
                        positionAmt: string;
                        /** @example BTCUSDT */
                        symbol: string;
                        /** @example 1.24029054 */
                        unRealizedProfit: string;
                    }[];
                };
                /** @example futures */
                type: string;
                /**
                 * Format: int64
                 * @example 1576281599000
                 */
                updateTime: number;
            }[];
        };
        subAccountUSDTFuturesDetails: {
            futureAccountResp: {
                /** @example abc@test.com */
                email: string;
                assets: {
                    /** @example USDT */
                    asset: string;
                    /** @example 0.00000000 */
                    initialMargin: string;
                    /** @example 0.00000000 */
                    maintenanceMargin: string;
                    /** @example 0.88308000 */
                    marginBalance: string;
                    /** @example 0.88308000 */
                    maxWithdrawAmount: string;
                    /** @example 0.00000000 */
                    openOrderInitialMargin: string;
                    /** @example 0.00000000 */
                    positionInitialMargin: string;
                    /** @example 0.00000000 */
                    unrealizedProfit: string;
                    /** @example 0.88308000 */
                    walletBalance: string;
                }[];
                canDeposit: boolean;
                canTrade: boolean;
                canWithdraw: boolean;
                /**
                 * Format: int64
                 * @example 2
                 */
                feeTier: number;
                /** @example 0.88308000 */
                maxWithdrawAmount: string;
                /** @example 0.00000000 */
                totalInitialMargin: string;
                /** @example 0.00000000 */
                totalMaintenanceMargin: string;
                /** @example 0.88308000 */
                totalMarginBalance: string;
                /** @example 0.00000000 */
                totalOpenOrderInitialMargin: string;
                /** @example 0.00000000 */
                totalPositionInitialMargin: string;
                /** @example 0.00000000 */
                totalUnrealizedProfit: string;
                /** @example 0.88308000 */
                totalWalletBalance: string;
                /**
                 * Format: int64
                 * @example 1576756674610
                 */
                updateTime: number;
            };
        };
        subAccountCOINFuturesDetails: {
            /** @example abc@test.com */
            email: string;
            assets: {
                /** @example BTC */
                asset: string;
                /** @example 0.00000000 */
                initialMargin: string;
                /** @example 0.00000000 */
                maintenanceMargin: string;
                /** @example 0.88308000 */
                marginBalance: string;
                /** @example 0.88308000 */
                maxWithdrawAmount: string;
                /** @example 0.00000000 */
                openOrderInitialMargin: string;
                /** @example 0.00000000 */
                positionInitialMargin: string;
                /** @example 0.00000000 */
                unrealizedProfit: string;
                /** @example 0.88308000 */
                walletBalance: string;
            }[];
            canDeposit: boolean;
            canTrade: boolean;
            canWithdraw: boolean;
            /**
             * Format: int64
             * @example 2
             */
            feeTier: number;
            /**
             * Format: int64
             * @example 1598959682001
             */
            updateTime: number;
        };
        subAccountUSDTFuturesSummary: {
            futureAccountSummaryResp: {
                /** @example 9.83137400 */
                totalInitialMargin: string;
                /** @example 0.41568700 */
                totalMaintenanceMargin: string;
                /** @example 23.03235621 */
                totalMarginBalance: string;
                /** @example 9.00000000 */
                totalOpenOrderInitialMargin: string;
                /** @example 0.83137400 */
                totalPositionInitialMargin: string;
                /** @example 0.03219710 */
                totalUnrealizedProfit: string;
                /** @example 22.15879444 */
                totalWalletBalance: string;
                /**
                 * @description The sum of BUSD and USDT
                 * @example USD
                 */
                asset: string;
                subAccountList: {
                    /** @example 123@test.com */
                    email: string;
                    /** @example 9.00000000 */
                    totalInitialMargin: string;
                    /** @example 0.00000000 */
                    totalMaintenanceMargin: string;
                    /** @example 22.12659734 */
                    totalMarginBalance: string;
                    /** @example 9.00000000 */
                    totalOpenOrderInitialMargin: string;
                    /** @example 0.00000000 */
                    totalPositionInitialMargin: string;
                    /** @example 0.00000000 */
                    totalUnrealizedProfit: string;
                    /** @example 22.12659734 */
                    totalWalletBalance: string;
                    /**
                     * @description The sum of BUSD and USDT
                     * @example USD
                     */
                    asset: string;
                }[];
            };
        };
        subAccountCOINFuturesSummary: {
            deliveryAccountSummaryResp: {
                /** @example 25.03221121 */
                totalMarginBalanceOfBTC: string;
                /** @example 0.1223341 */
                totalUnrealizedProfitOfBTC: string;
                /** @example 22.15879444 */
                totalWalletBalanceOfBTC: string;
                /** @example BTC */
                asset: string;
                subAccountList: {
                    /** @example 123@test.com */
                    email: string;
                    /** @example 22.12659734 */
                    totalMarginBalance: string;
                    /** @example 0 */
                    totalUnrealizedProfit: string;
                    /** @example 22.12659734 */
                    totalWalletBalance: string;
                    /** @example BTC */
                    asset: string;
                }[];
            };
        };
        subAccountUSDTFuturesPositionRisk: {
            futurePositionRiskVos: {
                /** @example 9975.12000 */
                entryPrice: string;
                /**
                 * @description current initial leverage
                 * @example 50
                 */
                leverage: string;
                /**
                 * @description notional value limit of current initial leverage
                 * @example 1000000
                 */
                maxNotional: string;
                /** @example 7963.54 */
                liquidationPrice: string;
                /** @example 9973.50770517 */
                markPrice: string;
                /** @example 0.010 */
                positionAmount: string;
                /** @example BTCUSDT */
                symbol: string;
                /** @example -0.01612295 */
                unrealizedProfit: string;
            }[];
        };
        subAccountCOINFuturesPositionRisk: {
            deliveryPositionRiskVos: {
                /** @example 9975.12000 */
                entryPrice: string;
                /** @example 9973.50770517 */
                markPrice: string;
                /** @example 20 */
                leverage: string;
                /** @example false */
                isolated: string;
                /** @example 9973.50770517 */
                isolatedWallet: string;
                /** @example 0.00000000 */
                isolatedMargin: string;
                /** @example false */
                isAutoAddMargin: string;
                /** @example BOTH */
                positionSide: string;
                /** @example 1.230 */
                positionAmount: string;
                /** @example BTCUSD_201225 */
                symbol: string;
                /** @example -0.01612295 */
                unrealizedProfit: string;
            }[];
        };
        error: {
            /**
             * Format: int64
             * @description Error code
             */
            code: number;
            /**
             * @description Error message
             * @example error message
             */
            msg: string;
        };
    };
    responses: never;
    parameters: {
        getCrossMargingTransferHistoryType: "ROLL_IN" | "ROLL_OUT";
        /** @description Determines whether to use BNB to pay for trading fees on SPOT */
        spotBNBBurn: "true" | "false";
        /** @description Determines whether to use BNB to pay for margin loan interest */
        interestBNBBurn: "true" | "false";
        /** @description * `0` - pending
         *     * `6` - credited but cannot withdraw
         *     * `1` - success */
        depositHistory: number;
        /** @description * `0` - Email Sent
         *     * `1` - Cancelled
         *     * `2` - Awaiting Approval
         *     * `3` - Rejected
         *     * `4` - Processing
         *     * `5` - Failure
         *     * `6` - Completed */
        withdrawHistory: number;
        /** @description MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet */
        queryConvertTransfer: "MAIN" | "CARD";
        querySubAccountList: "true" | "false";
        asset: string;
        amount: number;
        /** @description Current querying page. Start from 1. Default:1 */
        current: number;
        /** @description Coin name */
        optionalCoin: string;
        /** @description Coin name */
        coin: string;
        side: "SELL" | "BUY";
        optionalSide: "SELL" | "BUY";
        /** @description Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode. */
        positionSide: "BOTH" | "LONG" | "SHORT";
        /** @description Default:10 Max:100 */
        size: number;
        /** @description Trading symbol, e.g. BNBUSDT */
        symbol: string;
        /** @description Trading symbol, e.g. BNBUSDT */
        optionalSymbol: string;
        optionalAsset: string;
        /** @description Default 500; max 1000. */
        limit: number;
        /** @description Default 50, Max 50 */
        limit50: number;
        /** @description User websocket listen key */
        listenKey: string;
        /** @description Trade id to fetch from. Default gets most recent trades. */
        fromId: number;
        offset: number;
        /** @description Order id */
        orderId: number;
        /** @description Order list id */
        orderListId: number;
        /** @description Order id from client */
        origClientOrderId: string;
        /** @description A unique Id for the entire orderList */
        listClientOrderId: string;
        /** @description Used to uniquely identify this cancel. Automatically generated by default */
        newClientOrderId: string;
        strategyId: number;
        /** @description The value cannot be less than 1000000. */
        strategyType: number;
        /** @description Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK. */
        newOrderRespType: "ACK" | "RESULT" | "FULL";
        /** @description The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. */
        selfTradePreventionMode: "EXPIRE_TAKER" | "EXPIRE_MAKER" | "EXPIRE_BOTH" | "NONE";
        /** @description Set the response JSON. */
        ocoNewOrderRespType: "ACK" | "RESULT" | "FULL";
        /** @description UTC timestamp in ms */
        startTime: number;
        /** @description UTC timestamp in ms */
        endTime: number;
        /** @description UTC timestamp in ms */
        startTimeReq: number;
        /** @description UTC timestamp in ms */
        endTimeReq: number;
        /** @description Coin used as collateral */
        collateralCoinReq: string;
        /** @description Coin used as collateral */
        collateralCoin: string;
        collateralAmount: number;
        /** @description Coin loaned */
        loanCoinReq: string;
        /** @description Coin loaned */
        loanCoin: string;
        /** @description Loan amount */
        loanAmount: number;
        /** @description Order price */
        price: number;
        /** @description Order price */
        optionalPrice: number;
        quantity: number;
        /** @description Order quantity */
        optionalQuantity: number;
        /** @description The value cannot be greater than 60000 */
        recvWindow: number;
        /** @description UTC timestamp in ms */
        timestamp: number;
        /** @description Order time in force */
        timeInForce: "GTC" | "IOC" | "FOK";
        type: number;
        /** @description Order type */
        orderType: "LIMIT" | "MARKET" | "STOP_LOSS" | "STOP_LOSS_LIMIT" | "TAKE_PROFIT" | "TAKE_PROFIT_LIMIT" | "LIMIT_MAKER";
        /** @description Universal transfer type */
        univTransferType: "MAIN_C2C" | "MAIN_UMFUTURE" | "MAIN_CMFUTURE" | "MAIN_MARGIN" | "MAIN_MINING" | "C2C_MAIN" | "C2C_UMFUTURE" | "C2C_MINING" | "C2C_MARGIN" | "UMFUTURE_MAIN" | "UMFUTURE_C2C" | "UMFUTURE_MARGIN" | "CMFUTURE_MAIN" | "CMFUTURE_MARGIN" | "MARGIN_MAIN" | "MARGIN_UMFUTURE" | "MARGIN_CMFUTURE" | "MARGIN_MINING" | "MARGIN_C2C" | "MINING_MAIN" | "MINING_UMFUTURE" | "MINING_C2C" | "MINING_MARGIN" | "MAIN_PAY" | "PAY_MAIN" | "ISOLATEDMARGIN_MARGIN" | "MARGIN_ISOLATEDMARGIN" | "ISOLATEDMARGIN_ISOLATEDMARGIN";
        /** @description Signature */
        signature: string;
        /** @description Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
        stopPrice: number;
        /** @description * `TRUE` - For isolated margin
         *     * `FALSE` - Default, not for isolated margin */
        isIsolatedMargin: "TRUE" | "FALSE";
        transFrom: "SPOT" | "ISOLATED_MARGIN";
        optionalTransFrom: "SPOT" | "ISOLATED_MARGIN";
        transTo: "SPOT" | "ISOLATED_MARGIN";
        optionalTransTo: "SPOT" | "ISOLATED_MARGIN";
        /** @description Max 5 symbols can be sent; separated by ',' */
        symbols: string;
        arraySymbols: string;
        /** @description Supported values: FULL or MINI.
         *     If none provided, the default is FULL */
        tickerType: "FULL" | "MINI";
        permissions: string;
        /** @description * `0` - deposit
         *     * `1` - withdraw */
        transactionType: number;
        beginTime: number;
        /** @description Default 1 */
        page: number;
        /** @description Default 100, max 500 */
        rows: number;
        /** @description Quote quantity */
        quoteOrderQty: number;
        /** @description Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. */
        icebergQty: number;
        /** @description Default `ALL` */
        flexibleProductStatus: "ALL" | "SUBSCRIBABLE" | "UNSUBSCRIBABLE";
        /** @description Default `ALL` */
        optionalFlexibleProductStatus: "ALL" | "SUBSCRIBABLE" | "UNSUBSCRIBABLE";
        /** @description Default `ALL` */
        optionalFixedAndActivityProductStatus: "ALL" | "SUBSCRIBABLE" | "UNSUBSCRIBABLE";
        /** @description Default `ALL` */
        featured: "ALL" | "TRUE";
        flexibleProductId: string;
        fixedAndActivityProjectId: string;
        flexibleProductType: "FAST" | "NORMAL";
        fixedAndActivityProductType: "ACTIVITY" | "CUSTOMIZED_FIXED";
        /** @description Default `START_TIME` */
        sortBy: "START_TIME" | "LOT_SIZE" | "INTEREST_RATE" | "DURATION";
        /** @description default "true" */
        isSortAsc: boolean;
        projectId: string;
        lot: string;
        needBtcValuation: "true" | "false";
        /** @description * `DAILY` - for flexible
         *     * `ACTIVITY` - for activity
         *     * `CUSTOMIZED_FIXED` for fixed */
        lendingType: "DAILY" | "ACTIVITY" | "CUSTOMIZED_FIXED";
        optionalPositionId: string;
        positionId: string;
        positionStatus: "HOLDING" | "REDEEMED";
        /** @description Mining Account */
        userName: string;
        /** @description Algorithm(sha256) */
        algo: string;
        /** @description Page number, default is first page, start form 1 */
        pageIndex: number;
        /** @description sort sequence(default=0)0 positive sequence, 1 negative sequence */
        sort: number;
        /** @description Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time */
        sortColumn: number;
        /** @description miners status(default=0)0 all, 1 valid, 2 invalid, 3 failure */
        workerStatus: number;
        /** @description Search date, millisecond timestamp, while empty query all */
        startDate: string;
        /** @description Search date, millisecond timestamp, while empty query all */
        endDate: string;
        /** @description Number of pages, minimum 10, maximum 200 */
        pageSize: string;
        /** @description MIN 1, MAX 100; Default 100 */
        smallPageSize: string;
        /** @description Mining ID */
        configId: string;
        /** @description Mining Account */
        toPoolUser: string;
        /** @description Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000) */
        hashRate: string;
        /** @description Miner’s name */
        workerName: string;
        /** @description BTCDOWN, BTCUP */
        blvtTokenName: string;
        /** @description BTCDOWN, BTCUP */
        optionalBlvtTokenName: string;
        poolId: number;
        optionalPoolId: number;
        quoteAsset: string;
        baseAsset: string;
        quoteQty: number;
        /** @description Sub-account email */
        subAccountEmail: string;
        /** @description Sub-account email */
        optionalSubAccountEmail: string;
        /** @description Sub-account email */
        optionalSubAccountFromEmail: string;
        /** @description Sub-account email */
        optionalSubAccountToEmail: string;
        /** @description Sender email */
        subAccountFromEmail: string;
        /** @description Recipient email */
        subAccountToEmail: string;
        /** @description Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN */
        fromSymbol: string;
        /** @description Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN */
        toSymbol: string;
        /** @description Isolated symbol */
        isolatedSymbol: string;
        /** @description Default: false. Set to true for archived data from 6 months ago */
        archived: string;
        /** @description Default `NO_SIDE_EFFECT` */
        sideEffectType: "NO_SIDE_EFFECT" | "MARGIN_BUY" | "AUTO_REPAY";
        /** @description kline intervals */
        interval: "1s" | "1m" | "3m" | "5m" | "15m" | "30m" | "1h" | "2h" | "4h" | "6h" | "8h" | "12h" | "1d" | "3d" | "1w" | "1M";
        /** @description * `1` - transfer from main account to margin account
         *     * `2` - transfer from margin account to main account */
        crossMarginAccountTransferType: number;
        /** @description A unique Id for the limit order */
        limitClientOrderId: string;
        limitStrategyId: number;
        /** @description The value cannot be less than 1000000. */
        limitStrategyType: number;
        limitIcebergQty: number;
        /** @description A unique Id for the stop loss/stop loss limit leg */
        stopClientOrderId: string;
        stopStrategyId: number;
        stopStrategyType: number;
        ocoStopPrice: number;
        /** @description If provided, stopLimitTimeInForce is required. */
        stopLimitPrice: number;
        stopIcebergQty: number;
        stopLimitTimeInForce: "GTC" | "FOK" | "IOC";
        subAccountApiKey: string;
        /** @description true or false */
        ipRestrict: boolean;
        /** @description true or false */
        thirdParty: boolean;
        /** @description third party IP list name */
        thirdPartyName: string;
        /** @description Can be added in batches, separated by commas */
        ipAddress: string;
        /** @description Can be added in batches, separated by commas */
        optionalIpAddress: string;
        /** @description Defaults to user's vip level */
        vipLevel: number;
        clientTranId: string;
        /** @description Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. */
        optionalTrailingDelta: number;
        productId: string;
        /** @description * `TRUE` - For isolated margin
         *     * `FALSE` - Default, not for isolated margin */
        optionalIsIsolated: string;
        email: string;
        preventedMatchId: number;
        cancelRestrictions: "ONLY_NEW" | "ONLY_PARTIALLY_FILLED";
        network: string;
        targetAsset: string;
        autoRepay: boolean;
        /** @description NONE: switch off the plan,
         *     STANDARD: standard plan,
         *     ADVANCED: advanced plan; */
        autoCompoundPlan: "NONE" | "STANDARD" | "ADVANCE";
        /** @description Supported values: LIMIT,LIMIT_MAKER */
        workingType: "LIMIT" | "LIMIT_MAKER";
        /** @description BUY,SELL */
        workingSide: "BUY" | "SELL";
        /** @description Arbitrary unique ID among open orders for the working order. Automatically generated if not sent. */
        workingClientOrderId: string;
        workingPrice: number;
        /** @description Sets the quantity for the working order. */
        workingQuantity: number;
        /** @description This can only be used if workingTimeInForce is GTC. */
        workingIcebergQty: number;
        /** @description GTC, IOC, FOK */
        workingTimeInForce: "GTC" | "IOC" | "FOK";
        /** @description Supported values: Order Types Note that MARKET orders using quoteOrderQty are not supported. */
        pendingType: "LIMIT" | "MARKET" | "STOP_LOSS" | "STOP_LOSS_LIMIT" | "TAKE_PROFIT" | "TAKE_PROFIT_LIMIT" | "LIMIT_MAKER";
        /** @description BUY,SELL */
        pendingSide: "BUY" | "SELL";
        /** @description Arbitrary unique ID among open orders for the pending order. Automatically generated if not sent. */
        pendingClientOrderId: string;
        pendingPrice: number;
        pendingStopPrice: number;
        pendingTrailingDelta: number;
        /** @description Sets the quantity for the pending order. */
        pendingQuantity: number;
        /** @description This can only be used if pendingTimeInForce is GTC. */
        pendingIcebergQty: number;
        /** @description GTC, IOC, FOK */
        pendingTimeInForce: "GTC" | "IOC" | "FOK";
        /** @description Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT */
        pendingAboveType: "LIMIT_MAKER" | "STOP_LOSS" | "STOP_LOSS_LIMIT";
        /** @description Arbitrary unique ID among open orders for the pending above order. Automatically generated if not sent. */
        pendingAboveClientOrderId: string;
        pendingAbovePrice: number;
        pendingAboveStopPrice: number;
        pendingAboveTrailingDelta: number;
        /** @description This can only be used if pendingAboveTimeInForce is GTC. */
        pendingAboveIcebergQty: number;
        pendingAboveTimeInForce: "GTC" | "IOC" | "FOK";
        /** @description Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT */
        pendingBelowType: "LIMIT_MAKER" | "STOP_LOSS" | "STOP_LOSS_LIMIT";
        /** @description Arbitrary unique ID among open orders for the pending below order. Automatically generated if not sent. */
        pendingBelowClientOrderId: string;
        pendingBelowPrice: number;
        pendingBelowStopPrice: number;
        pendingBelowTrailingDelta: number;
        /** @description This can only be used if pendingBelowTimeInForce is GTC. */
        pendingBelowIcebergQty: number;
        pendingBelowTimeInForce: "GTC" | "IOC" | "FOK";
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
